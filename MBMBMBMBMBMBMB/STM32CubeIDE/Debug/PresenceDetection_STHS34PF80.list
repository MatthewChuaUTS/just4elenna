
PresenceDetection_STHS34PF80.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800ae28  0800ae28  0001ae28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aeec  0800aeec  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800aeec  0800aeec  0001aeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aef4  0800aef4  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aef4  0800aef4  0001aef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aef8  0800aef8  0001aef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800aefc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bdc  200000d8  0800afd4  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00009004  20000cb4  0800afd4  00020cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_line   00020d07  00000000  00000000  0002019b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000c7  00000000  00000000  00040ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0001b8e2  00000000  00000000  00040f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000041bb  00000000  00000000  0005c84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a50  00000000  00000000  00060a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7897  00000000  00000000  00062458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001452  00000000  00000000  00109cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001bf3d  00000000  00000000  0010b141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007698  00000000  00000000  00127080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae10 	.word	0x0800ae10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	0800ae10 	.word	0x0800ae10

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b970 	b.w	8000c54 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9e08      	ldr	r6, [sp, #32]
 8000992:	460d      	mov	r5, r1
 8000994:	4604      	mov	r4, r0
 8000996:	460f      	mov	r7, r1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d14a      	bne.n	8000a32 <__udivmoddi4+0xa6>
 800099c:	428a      	cmp	r2, r1
 800099e:	4694      	mov	ip, r2
 80009a0:	d965      	bls.n	8000a6e <__udivmoddi4+0xe2>
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	b143      	cbz	r3, 80009ba <__udivmoddi4+0x2e>
 80009a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80009ac:	f1c3 0220 	rsb	r2, r3, #32
 80009b0:	409f      	lsls	r7, r3
 80009b2:	fa20 f202 	lsr.w	r2, r0, r2
 80009b6:	4317      	orrs	r7, r2
 80009b8:	409c      	lsls	r4, r3
 80009ba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009be:	fa1f f58c 	uxth.w	r5, ip
 80009c2:	fbb7 f1fe 	udiv	r1, r7, lr
 80009c6:	0c22      	lsrs	r2, r4, #16
 80009c8:	fb0e 7711 	mls	r7, lr, r1, r7
 80009cc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009d0:	fb01 f005 	mul.w	r0, r1, r5
 80009d4:	4290      	cmp	r0, r2
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x62>
 80009d8:	eb1c 0202 	adds.w	r2, ip, r2
 80009dc:	f101 37ff 	add.w	r7, r1, #4294967295
 80009e0:	f080 811c 	bcs.w	8000c1c <__udivmoddi4+0x290>
 80009e4:	4290      	cmp	r0, r2
 80009e6:	f240 8119 	bls.w	8000c1c <__udivmoddi4+0x290>
 80009ea:	3902      	subs	r1, #2
 80009ec:	4462      	add	r2, ip
 80009ee:	1a12      	subs	r2, r2, r0
 80009f0:	b2a4      	uxth	r4, r4
 80009f2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009f6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009fe:	fb00 f505 	mul.w	r5, r0, r5
 8000a02:	42a5      	cmp	r5, r4
 8000a04:	d90a      	bls.n	8000a1c <__udivmoddi4+0x90>
 8000a06:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a0e:	f080 8107 	bcs.w	8000c20 <__udivmoddi4+0x294>
 8000a12:	42a5      	cmp	r5, r4
 8000a14:	f240 8104 	bls.w	8000c20 <__udivmoddi4+0x294>
 8000a18:	4464      	add	r4, ip
 8000a1a:	3802      	subs	r0, #2
 8000a1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a20:	1b64      	subs	r4, r4, r5
 8000a22:	2100      	movs	r1, #0
 8000a24:	b11e      	cbz	r6, 8000a2e <__udivmoddi4+0xa2>
 8000a26:	40dc      	lsrs	r4, r3
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0xbc>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	f000 80ed 	beq.w	8000c16 <__udivmoddi4+0x28a>
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a42:	4608      	mov	r0, r1
 8000a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a48:	fab3 f183 	clz	r1, r3
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	d149      	bne.n	8000ae4 <__udivmoddi4+0x158>
 8000a50:	42ab      	cmp	r3, r5
 8000a52:	d302      	bcc.n	8000a5a <__udivmoddi4+0xce>
 8000a54:	4282      	cmp	r2, r0
 8000a56:	f200 80f8 	bhi.w	8000c4a <__udivmoddi4+0x2be>
 8000a5a:	1a84      	subs	r4, r0, r2
 8000a5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a60:	2001      	movs	r0, #1
 8000a62:	4617      	mov	r7, r2
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d0e2      	beq.n	8000a2e <__udivmoddi4+0xa2>
 8000a68:	e9c6 4700 	strd	r4, r7, [r6]
 8000a6c:	e7df      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000a6e:	b902      	cbnz	r2, 8000a72 <__udivmoddi4+0xe6>
 8000a70:	deff      	udf	#255	; 0xff
 8000a72:	fab2 f382 	clz	r3, r2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 8090 	bne.w	8000b9c <__udivmoddi4+0x210>
 8000a7c:	1a8a      	subs	r2, r1, r2
 8000a7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a82:	fa1f fe8c 	uxth.w	lr, ip
 8000a86:	2101      	movs	r1, #1
 8000a88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a90:	0c22      	lsrs	r2, r4, #16
 8000a92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a96:	fb0e f005 	mul.w	r0, lr, r5
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x124>
 8000a9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000aa2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x122>
 8000aa8:	4290      	cmp	r0, r2
 8000aaa:	f200 80cb 	bhi.w	8000c44 <__udivmoddi4+0x2b8>
 8000aae:	4645      	mov	r5, r8
 8000ab0:	1a12      	subs	r2, r2, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ab8:	fb07 2210 	mls	r2, r7, r0, r2
 8000abc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ac0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x14e>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x14c>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f200 80bb 	bhi.w	8000c4e <__udivmoddi4+0x2c2>
 8000ad8:	4610      	mov	r0, r2
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ae2:	e79f      	b.n	8000a24 <__udivmoddi4+0x98>
 8000ae4:	f1c1 0720 	rsb	r7, r1, #32
 8000ae8:	408b      	lsls	r3, r1
 8000aea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa05 f401 	lsl.w	r4, r5, r1
 8000af6:	fa20 f307 	lsr.w	r3, r0, r7
 8000afa:	40fd      	lsrs	r5, r7
 8000afc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b00:	4323      	orrs	r3, r4
 8000b02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b06:	fa1f fe8c 	uxth.w	lr, ip
 8000b0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b0e:	0c1c      	lsrs	r4, r3, #16
 8000b10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b14:	fb08 f50e 	mul.w	r5, r8, lr
 8000b18:	42a5      	cmp	r5, r4
 8000b1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b0>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2b4>
 8000b30:	42a5      	cmp	r5, r4
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2b4>
 8000b36:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3a:	4464      	add	r4, ip
 8000b3c:	1b64      	subs	r4, r4, r5
 8000b3e:	b29d      	uxth	r5, r3
 8000b40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b44:	fb09 4413 	mls	r4, r9, r3, r4
 8000b48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x1da>
 8000b54:	eb1c 0404 	adds.w	r4, ip, r4
 8000b58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b5c:	d26c      	bcs.n	8000c38 <__udivmoddi4+0x2ac>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	d96a      	bls.n	8000c38 <__udivmoddi4+0x2ac>
 8000b62:	3b02      	subs	r3, #2
 8000b64:	4464      	add	r4, ip
 8000b66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b6e:	eba4 040e 	sub.w	r4, r4, lr
 8000b72:	42ac      	cmp	r4, r5
 8000b74:	46c8      	mov	r8, r9
 8000b76:	46ae      	mov	lr, r5
 8000b78:	d356      	bcc.n	8000c28 <__udivmoddi4+0x29c>
 8000b7a:	d053      	beq.n	8000c24 <__udivmoddi4+0x298>
 8000b7c:	b156      	cbz	r6, 8000b94 <__udivmoddi4+0x208>
 8000b7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b82:	eb64 040e 	sbc.w	r4, r4, lr
 8000b86:	fa04 f707 	lsl.w	r7, r4, r7
 8000b8a:	40ca      	lsrs	r2, r1
 8000b8c:	40cc      	lsrs	r4, r1
 8000b8e:	4317      	orrs	r7, r2
 8000b90:	e9c6 7400 	strd	r7, r4, [r6]
 8000b94:	4618      	mov	r0, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ba0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ba8:	fa25 f101 	lsr.w	r1, r5, r1
 8000bac:	409d      	lsls	r5, r3
 8000bae:	432a      	orrs	r2, r5
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000bc0:	0c11      	lsrs	r1, r2, #16
 8000bc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000bca:	428d      	cmp	r5, r1
 8000bcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x258>
 8000bd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bda:	d22f      	bcs.n	8000c3c <__udivmoddi4+0x2b0>
 8000bdc:	428d      	cmp	r5, r1
 8000bde:	d92d      	bls.n	8000c3c <__udivmoddi4+0x2b0>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4461      	add	r1, ip
 8000be4:	1b49      	subs	r1, r1, r5
 8000be6:	b292      	uxth	r2, r2
 8000be8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bec:	fb07 1115 	mls	r1, r7, r5, r1
 8000bf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bf8:	4291      	cmp	r1, r2
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x282>
 8000bfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000c00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c04:	d216      	bcs.n	8000c34 <__udivmoddi4+0x2a8>
 8000c06:	4291      	cmp	r1, r2
 8000c08:	d914      	bls.n	8000c34 <__udivmoddi4+0x2a8>
 8000c0a:	3d02      	subs	r5, #2
 8000c0c:	4462      	add	r2, ip
 8000c0e:	1a52      	subs	r2, r2, r1
 8000c10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c14:	e738      	b.n	8000a88 <__udivmoddi4+0xfc>
 8000c16:	4631      	mov	r1, r6
 8000c18:	4630      	mov	r0, r6
 8000c1a:	e708      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000c1c:	4639      	mov	r1, r7
 8000c1e:	e6e6      	b.n	80009ee <__udivmoddi4+0x62>
 8000c20:	4610      	mov	r0, r2
 8000c22:	e6fb      	b.n	8000a1c <__udivmoddi4+0x90>
 8000c24:	4548      	cmp	r0, r9
 8000c26:	d2a9      	bcs.n	8000b7c <__udivmoddi4+0x1f0>
 8000c28:	ebb9 0802 	subs.w	r8, r9, r2
 8000c2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c30:	3b01      	subs	r3, #1
 8000c32:	e7a3      	b.n	8000b7c <__udivmoddi4+0x1f0>
 8000c34:	4645      	mov	r5, r8
 8000c36:	e7ea      	b.n	8000c0e <__udivmoddi4+0x282>
 8000c38:	462b      	mov	r3, r5
 8000c3a:	e794      	b.n	8000b66 <__udivmoddi4+0x1da>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	e7d1      	b.n	8000be4 <__udivmoddi4+0x258>
 8000c40:	46d0      	mov	r8, sl
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b0>
 8000c44:	3d02      	subs	r5, #2
 8000c46:	4462      	add	r2, ip
 8000c48:	e732      	b.n	8000ab0 <__udivmoddi4+0x124>
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e70a      	b.n	8000a64 <__udivmoddi4+0xd8>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	e742      	b.n	8000ada <__udivmoddi4+0x14e>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c5e:	490e      	ldr	r1, [pc, #56]	; (8000c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c60:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c74:	4c0b      	ldr	r4, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c82:	f003 fd8b 	bl	800479c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f009 fb93 	bl	800a3b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f001 fdf5 	bl	8002878 <main>
  bx  lr    
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8000c9c:	0800aefc 	.word	0x0800aefc
  ldr r2, =_sbss
 8000ca0:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8000ca4:	20000cb4 	.word	0x20000cb4

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>

08000caa <MX_MEMS_Init>:
static void DWT_Init(void);
static void DWT_Start(void);
static uint32_t DWT_Stop(void);

void MX_MEMS_Init(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_PresenceDetection_Init();
 8000cae:	f000 f839 	bl	8000d24 <MX_PresenceDetection_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_PresenceDetection_Process();
 8000cbc:	f000 f874 	bl	8000da8 <MX_PresenceDetection_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */
  if (TObjRaw > (TAmbRaw+1000)) { // if person found, turn on red led
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_MEMS_Process+0x30>)
 8000cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_MEMS_Process+0x34>)
 8000cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cce:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	dd03      	ble.n	8000cde <MX_MEMS_Process+0x26>
	  personFlag = 1;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_MEMS_Process+0x38>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	801a      	strh	r2, [r3, #0]
  } else {
	  personFlag = 0;
  }

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8000cdc:	e002      	b.n	8000ce4 <MX_MEMS_Process+0x2c>
	  personFlag = 0;
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <MX_MEMS_Process+0x38>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	801a      	strh	r2, [r3, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200002e0 	.word	0x200002e0
 8000cec:	200002de 	.word	0x200002de
 8000cf0:	20000a58 	.word	0x20000a58

08000cf4 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *              the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d102      	bne.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000a10 	.word	0x20000a10
 8000d20:	20000124 	.word	0x20000124

08000d24 <MX_PresenceDetection_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_PresenceDetection_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Initialize LED */
  BSP_LED_Init(LED2);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f002 fb55 	bl	80033d8 <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f002 fbd2 	bl	80034d8 <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 8000d34:	f001 ff44 	bl	8002bc0 <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 8000d38:	201e      	movs	r0, #30
 8000d3a:	f000 f9b3 	bl	80010a4 <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 8000d3e:	f000 f89f 	bl	8000e80 <Init_Sensors>

  Odr = (uint8_t)TEMP_ODR;
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_PresenceDetection_Init+0x68>)
 8000d44:	221e      	movs	r2, #30
 8000d46:	701a      	strb	r2, [r3, #0]
  BSP_SENSOR_TEMP_GetAvgTmos(&AvgTmos);
 8000d48:	4811      	ldr	r0, [pc, #68]	; (8000d90 <MX_PresenceDetection_Init+0x6c>)
 8000d4a:	f001 f8c7 	bl	8001edc <BSP_SENSOR_TEMP_GetAvgTmos>
  BSP_SENSOR_TEMP_GetAvgT(&AvgT);
 8000d4e:	4811      	ldr	r0, [pc, #68]	; (8000d94 <MX_PresenceDetection_Init+0x70>)
 8000d50:	f001 f8de 	bl	8001f10 <BSP_SENSOR_TEMP_GetAvgT>
  BSP_SENSOR_TEMP_GetGainFactor(&GainFactor);
 8000d54:	4810      	ldr	r0, [pc, #64]	; (8000d98 <MX_PresenceDetection_Init+0x74>)
 8000d56:	f001 f8e7 	bl	8001f28 <BSP_SENSOR_TEMP_GetGainFactor>
  BSP_SENSOR_TEMP_GetSensitivity(&Sensitivity);
 8000d5a:	4810      	ldr	r0, [pc, #64]	; (8000d9c <MX_PresenceDetection_Init+0x78>)
 8000d5c:	f001 f8f0 	bl	8001f40 <BSP_SENSOR_TEMP_GetSensitivity>

  /* PresenceDetection API initialization function */
  InfraredPD_manager_init();
 8000d60:	f001 fd2c 	bl	80027bc <InfraredPD_manager_init>

  /* OPTIONAL */
  /* Get library version */
  InfraredPD_manager_get_version(LibVersion, &LibVersionLen);
 8000d64:	490e      	ldr	r1, [pc, #56]	; (8000da0 <MX_PresenceDetection_Init+0x7c>)
 8000d66:	480f      	ldr	r0, [pc, #60]	; (8000da4 <MX_PresenceDetection_Init+0x80>)
 8000d68:	f001 fd76 	bl	8002858 <InfraredPD_manager_get_version>

  DWT_Init();
 8000d6c:	f000 f9ce 	bl	800110c <DWT_Init>

  BSP_LED_On(LED2);
 8000d70:	2000      	movs	r0, #0
 8000d72:	f002 fb43 	bl	80033fc <BSP_LED_On>
  HAL_Delay(500);
 8000d76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d7a:	f003 fd93 	bl	80048a4 <HAL_Delay>
  BSP_LED_Off(LED2);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f002 fb52 	bl	8003428 <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 8000d84:	f000 fae6 	bl	8001354 <UART_StartReceiveMsg>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200002d4 	.word	0x200002d4
 8000d90:	200002d6 	.word	0x200002d6
 8000d94:	200002d8 	.word	0x200002d8
 8000d98:	200002d9 	.word	0x200002d9
 8000d9c:	200002da 	.word	0x200002da
 8000da0:	20000120 	.word	0x20000120
 8000da4:	200000fc 	.word	0x200000fc

08000da8 <MX_PresenceDetection_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static void MX_PresenceDetection_Process(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  static TMsg msg_dat;
  static TMsg msg_cmd;

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 8000dac:	482d      	ldr	r0, [pc, #180]	; (8000e64 <MX_PresenceDetection_Process+0xbc>)
 8000dae:	f000 f9ff 	bl	80011b0 <UART_ReceivedMSG>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d106      	bne.n	8000dc6 <MX_PresenceDetection_Process+0x1e>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 8000db8:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <MX_PresenceDetection_Process+0xbc>)
 8000dba:	791b      	ldrb	r3, [r3, #4]
 8000dbc:	2b32      	cmp	r3, #50	; 0x32
 8000dbe:	d102      	bne.n	8000dc6 <MX_PresenceDetection_Process+0x1e>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 8000dc0:	4828      	ldr	r0, [pc, #160]	; (8000e64 <MX_PresenceDetection_Process+0xbc>)
 8000dc2:	f001 f8fb 	bl	8001fbc <HandleMSG>
    }
  }

  if (SensorReadRequest == 1U)
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <MX_PresenceDetection_Process+0xc0>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d146      	bne.n	8000e5e <MX_PresenceDetection_Process+0xb6>
  {
    SensorReadRequest = 0;
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <MX_PresenceDetection_Process+0xc0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 8000dd6:	4825      	ldr	r0, [pc, #148]	; (8000e6c <MX_PresenceDetection_Process+0xc4>)
 8000dd8:	f000 f86a 	bl	8000eb0 <RTC_Handler>
    Infrared_Sensor_Handler(&msg_dat);
 8000ddc:	4823      	ldr	r0, [pc, #140]	; (8000e6c <MX_PresenceDetection_Process+0xc4>)
 8000dde:	f000 f933 	bl	8001048 <Infrared_Sensor_Handler>

    if (DiscardSamples < 1U)
 8000de2:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <MX_PresenceDetection_Process+0xc8>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <MX_PresenceDetection_Process+0x48>
    {
      /* PresenceDetection specific part */
      PD_Data_Handler(&msg_dat);
 8000dea:	4820      	ldr	r0, [pc, #128]	; (8000e6c <MX_PresenceDetection_Process+0xc4>)
 8000dec:	f000 f8d4 	bl	8000f98 <PD_Data_Handler>
    }

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 8000df0:	481e      	ldr	r0, [pc, #120]	; (8000e6c <MX_PresenceDetection_Process+0xc4>)
 8000df2:	f001 f8c9 	bl	8001f88 <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_PresenceDetection_Process+0xc4>)
 8000df8:	221d      	movs	r2, #29
 8000dfa:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_PresenceDetection_Process+0xcc>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d11e      	bne.n	8000e42 <MX_PresenceDetection_Process+0x9a>
    {
      OfflineDataCount--;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_PresenceDetection_Process+0xd0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <MX_PresenceDetection_Process+0xd0>)
 8000e0c:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_PresenceDetection_Process+0xd0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	da02      	bge.n	8000e1c <MX_PresenceDetection_Process+0x74>
      {
        OfflineDataCount = 0;
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_PresenceDetection_Process+0xd0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_PresenceDetection_Process+0xd4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3301      	adds	r3, #1
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <MX_PresenceDetection_Process+0xd4>)
 8000e24:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_PresenceDetection_Process+0xd4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b07      	cmp	r3, #7
 8000e2c:	dd02      	ble.n	8000e34 <MX_PresenceDetection_Process+0x8c>
      {
        OfflineDataReadIndex = 0;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_PresenceDetection_Process+0xd4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <MX_PresenceDetection_Process+0xd0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	dd02      	ble.n	8000e42 <MX_PresenceDetection_Process+0x9a>
      {
        SensorReadRequest = 1;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <MX_PresenceDetection_Process+0xc0>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
      }
    }

    if (DiscardSamples > 0U)
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_PresenceDetection_Process+0xc8>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d006      	beq.n	8000e58 <MX_PresenceDetection_Process+0xb0>
    {
      DiscardSamples--;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_PresenceDetection_Process+0xc8>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <MX_PresenceDetection_Process+0xc8>)
 8000e54:	701a      	strb	r2, [r3, #0]
    else
    {
      UART_SendMsg(&msg_dat);
    }
  }
}
 8000e56:	e002      	b.n	8000e5e <MX_PresenceDetection_Process+0xb6>
      UART_SendMsg(&msg_dat);
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_PresenceDetection_Process+0xc4>)
 8000e5a:	f000 fa5f 	bl	800131c <UART_SendMsg>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200002e4 	.word	0x200002e4
 8000e68:	20000124 	.word	0x20000124
 8000e6c:	200003e8 	.word	0x200003e8
 8000e70:	200002dc 	.word	0x200002dc
 8000e74:	20000125 	.word	0x20000125
 8000e78:	200002d0 	.word	0x200002d0
 8000e7c:	200002c8 	.word	0x200002c8

08000e80 <Init_Sensors>:
  * @brief  Initialize all sensors
  * @param  None
  * @retval None
  */
static void Init_Sensors(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 8000e84:	f000 ff82 	bl	8001d8c <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 8000e88:	f000 ff87 	bl	8001d9a <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 8000e8c:	f000 ff8c 	bl	8001da8 <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 8000e90:	f000 ff91 	bl	8001db6 <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 8000e94:	f000 ff96 	bl	8001dc4 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 8000e98:	f000 ff9c 	bl	8001dd4 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_TEMP_SetAvgTmos(AVG_TMOS);
 8000e9c:	2020      	movs	r0, #32
 8000e9e:	f001 f829 	bl	8001ef4 <BSP_SENSOR_TEMP_SetAvgTmos>
  BSP_SENSOR_TEMP_SetOutputDataRate(TEMP_ODR);
 8000ea2:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8000ea6:	f000 fff2 	bl	8001e8e <BSP_SENSOR_TEMP_SetOutputDataRate>
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <RTC_Handler>:
  * @brief  Handles the time+date getting/sending
  * @param  Msg the time+date part of the stream
  * @retval None
  */
static void RTC_Handler(TMsg *Msg)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 8000ebe:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <RTC_Handler+0xd8>)
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 8000ec4:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <RTC_Handler+0xdc>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d12b      	bne.n	8000f24 <RTC_Handler+0x74>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 8000ecc:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <RTC_Handler+0xe0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a30      	ldr	r2, [pc, #192]	; (8000f94 <RTC_Handler+0xe4>)
 8000ed2:	2134      	movs	r1, #52	; 0x34
 8000ed4:	fb01 f303 	mul.w	r3, r1, r3
 8000ed8:	4413      	add	r3, r2
 8000eda:	781a      	ldrb	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <RTC_Handler+0xe0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <RTC_Handler+0xe4>)
 8000ee6:	2134      	movs	r1, #52	; 0x34
 8000ee8:	fb01 f303 	mul.w	r3, r1, r3
 8000eec:	4413      	add	r3, r2
 8000eee:	3301      	adds	r3, #1
 8000ef0:	781a      	ldrb	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <RTC_Handler+0xe0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <RTC_Handler+0xe4>)
 8000efc:	2134      	movs	r1, #52	; 0x34
 8000efe:	fb01 f303 	mul.w	r3, r1, r3
 8000f02:	4413      	add	r3, r2
 8000f04:	3302      	adds	r3, #2
 8000f06:	781a      	ldrb	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 8000f0c:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <RTC_Handler+0xe0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <RTC_Handler+0xe4>)
 8000f12:	2134      	movs	r1, #52	; 0x34
 8000f14:	fb01 f303 	mul.w	r3, r1, r3
 8000f18:	4413      	add	r3, r2
 8000f1a:	3303      	adds	r3, #3
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 8000f22:	e02d      	b.n	8000f80 <RTC_Handler+0xd0>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4816      	ldr	r0, [pc, #88]	; (8000f88 <RTC_Handler+0xd8>)
 8000f2e:	f006 faef 	bl	8007510 <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4813      	ldr	r0, [pc, #76]	; (8000f88 <RTC_Handler+0xd8>)
 8000f3c:	f006 fbca 	bl	80076d4 <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2264      	movs	r2, #100	; 0x64
 8000f48:	fb02 f303 	mul.w	r3, r2, r3
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 8000f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f52:	3301      	adds	r3, #1
 8000f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 8000f60:	6a3b      	ldr	r3, [r7, #32]
 8000f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 8000f66:	7a3a      	ldrb	r2, [r7, #8]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 8000f6c:	7a7a      	ldrb	r2, [r7, #9]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 8000f72:	7aba      	ldrb	r2, [r7, #10]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000f7e:	729a      	strb	r2, [r3, #10]
}
 8000f80:	bf00      	nop
 8000f82:	3730      	adds	r7, #48	; 0x30
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200009a8 	.word	0x200009a8
 8000f8c:	20000125 	.word	0x20000125
 8000f90:	200002c8 	.word	0x200002c8
 8000f94:	20000128 	.word	0x20000128

08000f98 <PD_Data_Handler>:
  * @brief  Presence Detection data handler
  * @param  Msg the Presence Detection data part of the stream
  * @retval None
  */
static void PD_Data_Handler(TMsg *Msg)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  IPD_input_t data_in = {.t_amb = 0, .t_obj = 0};
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	813b      	strh	r3, [r7, #8]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	817b      	strh	r3, [r7, #10]
  static IPD_output_t data_out;

  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <PD_Data_Handler+0xa0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d13b      	bne.n	8001030 <PD_Data_Handler+0x98>
  {
    /* Fill input data */
    data_in.t_amb = TAmbRaw;
 8000fb8:	4b20      	ldr	r3, [pc, #128]	; (800103c <PD_Data_Handler+0xa4>)
 8000fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbe:	813b      	strh	r3, [r7, #8]
    data_in.t_obj = TObjRaw;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <PD_Data_Handler+0xa8>)
 8000fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc6:	817b      	strh	r3, [r7, #10]

    /* Run Presence Detection algorithm */
    BSP_LED_On(LED2);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f002 fa17 	bl	80033fc <BSP_LED_On>
    DWT_Start();
 8000fce:	f000 f8b5 	bl	800113c <DWT_Start>
    InfraredPD_manager_run(&data_in, &data_out);
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	491b      	ldr	r1, [pc, #108]	; (8001044 <PD_Data_Handler+0xac>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 fc2b 	bl	8002834 <InfraredPD_manager_run>
    elapsed_time_us = DWT_Stop();
 8000fde:	f000 f8bf 	bl	8001160 <DWT_Stop>
 8000fe2:	60f8      	str	r0, [r7, #12]
    BSP_LED_Off(LED2);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f002 fa1f 	bl	8003428 <BSP_LED_Off>

    Serialize_s32(&Msg->Data[15], (int32_t)data_out.t_obj_comp, 4);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3313      	adds	r3, #19
 8000fee:	4a15      	ldr	r2, [pc, #84]	; (8001044 <PD_Data_Handler+0xac>)
 8000ff0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 f87e 	bl	80030fa <Serialize_s32>
    Serialize_s32(&Msg->Data[19], (int32_t)data_out.t_obj_change, 4);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3317      	adds	r3, #23
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <PD_Data_Handler+0xac>)
 8001004:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001008:	4611      	mov	r1, r2
 800100a:	2204      	movs	r2, #4
 800100c:	4618      	mov	r0, r3
 800100e:	f002 f874 	bl	80030fa <Serialize_s32>
    Msg->Data[23] = (uint8_t)data_out.mot_flag;
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <PD_Data_Handler+0xac>)
 8001014:	791a      	ldrb	r2, [r3, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	76da      	strb	r2, [r3, #27]
    Msg->Data[24] = (uint8_t)data_out.pres_flag;
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <PD_Data_Handler+0xac>)
 800101c:	795a      	ldrb	r2, [r3, #5]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	771a      	strb	r2, [r3, #28]

    Serialize_s32(&Msg->Data[25], (int32_t)elapsed_time_us, 4);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	331d      	adds	r3, #29
 8001026:	68f9      	ldr	r1, [r7, #12]
 8001028:	2204      	movs	r2, #4
 800102a:	4618      	mov	r0, r3
 800102c:	f002 f865 	bl	80030fa <Serialize_s32>
  }
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200000f8 	.word	0x200000f8
 800103c:	200002de 	.word	0x200002de
 8001040:	200002e0 	.word	0x200002e0
 8001044:	200004ec 	.word	0x200004ec

08001048 <Infrared_Sensor_Handler>:
  * @brief  Handles the Infrared data getting/sending
  * @param  Msg the IR part of the stream
  * @retval None
  */
static void Infrared_Sensor_Handler(TMsg *Msg)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <Infrared_Sensor_Handler+0x50>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b02      	cmp	r3, #2
 800105a:	d119      	bne.n	8001090 <Infrared_Sensor_Handler+0x48>
  {
    BSP_SENSOR_TEMP_GetTAmbRaw(&TAmbRaw);
 800105c:	480f      	ldr	r0, [pc, #60]	; (800109c <Infrared_Sensor_Handler+0x54>)
 800105e:	f000 ff25 	bl	8001eac <BSP_SENSOR_TEMP_GetTAmbRaw>
    BSP_SENSOR_TEMP_GetTObjRaw(&TObjRaw);
 8001062:	480f      	ldr	r0, [pc, #60]	; (80010a0 <Infrared_Sensor_Handler+0x58>)
 8001064:	f000 ff2e 	bl	8001ec4 <BSP_SENSOR_TEMP_GetTObjRaw>

    Serialize_s32(&Msg->Data[7], (int32_t)TAmbRaw, 4);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	330b      	adds	r3, #11
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <Infrared_Sensor_Handler+0x54>)
 800106e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001072:	4611      	mov	r1, r2
 8001074:	2204      	movs	r2, #4
 8001076:	4618      	mov	r0, r3
 8001078:	f002 f83f 	bl	80030fa <Serialize_s32>
    Serialize_s32(&Msg->Data[11], (int32_t)TObjRaw, 4);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	330f      	adds	r3, #15
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <Infrared_Sensor_Handler+0x58>)
 8001082:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001086:	4611      	mov	r1, r2
 8001088:	2204      	movs	r2, #4
 800108a:	4618      	mov	r0, r3
 800108c:	f002 f835 	bl	80030fa <Serialize_s32>
  }
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200000f8 	.word	0x200000f8
 800109c:	200002de 	.word	0x200002de
 80010a0:	200002e0 	.word	0x200002e0

080010a4 <TIM_Config>:
  * @brief  Timer configuration
  * @param  Freq the desired Timer frequency
  * @retval None
  */
static void TIM_Config(uint32_t Freq)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 80010ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010b0:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <TIM_Config+0x60>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010bc:	3b01      	subs	r3, #1
 80010be:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <TIM_Config+0x64>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <TIM_Config+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <TIM_Config+0x64>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <TIM_Config+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <TIM_Config+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <TIM_Config+0x64>)
 80010ec:	f006 fbfe 	bl	80078ec <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <TIM_Config+0x56>
  {
    Error_Handler();
 80010f6:	f001 ff01 	bl	8002efc <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000007c 	.word	0x2000007c
 8001108:	20000a10 	.word	0x20000a10

0800110c <DWT_Init>:
  * @brief  Initialize DWT register for counting clock cycles purpose
  * @param  None
  * @retval None
  */
static void DWT_Init(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <DWT_Init+0x28>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <DWT_Init+0x28>)
 8001116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800111a:	60d3      	str	r3, [r2, #12]
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <DWT_Init+0x2c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <DWT_Init+0x2c>)
 8001122:	f023 0301 	bic.w	r3, r3, #1
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000edf0 	.word	0xe000edf0
 8001138:	e0001000 	.word	0xe0001000

0800113c <DWT_Start>:
  * @brief  Start counting clock cycles
  * @param  None
  * @retval None
  */
static void DWT_Start(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <DWT_Start+0x20>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <DWT_Start+0x20>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <DWT_Start+0x20>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6013      	str	r3, [r2, #0]
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e0001000 	.word	0xe0001000

08001160 <DWT_Stop>:
  * @brief  Stop counting clock cycles and calculate elapsed time in [us]
  * @param  None
  * @retval Elapsed time in [us]
  */
static uint32_t DWT_Stop(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <DWT_Stop+0x44>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <DWT_Stop+0x44>)
 8001174:	f023 0301 	bic.w	r3, r3, #1
 8001178:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <DWT_Stop+0x44>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <DWT_Stop+0x48>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a09      	ldr	r2, [pc, #36]	; (80011ac <DWT_Stop+0x4c>)
 8001186:	fba2 2303 	umull	r2, r3, r2, r3
 800118a:	0c9b      	lsrs	r3, r3, #18
 800118c:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e0001000 	.word	0xe0001000
 80011a8:	2000007c 	.word	0x2000007c
 80011ac:	431bde83 	.word	0x431bde83

080011b0 <UART_ReceivedMSG>:
  * @brief  Check if a message is received via UART
  * @param  Msg the pointer to the message to be received
  * @retval 1 if a complete message is found, 0 otherwise
  */
int UART_ReceivedMSG(TMsg *Msg)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 80011bc:	4b54      	ldr	r3, [pc, #336]	; (8001310 <UART_ReceivedMSG+0x160>)
 80011be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f8df 	bl	8001384 <Get_DMA_Flag_Status>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f040 809c 	bne.w	8001306 <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 80011ce:	4b50      	ldr	r3, [pc, #320]	; (8001310 <UART_ReceivedMSG+0x160>)
 80011d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fab8 	bl	8001748 <Get_DMA_Counter>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29b      	uxth	r3, r3
 80011dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80011e0:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 80011e2:	4b4c      	ldr	r3, [pc, #304]	; (8001314 <UART_ReceivedMSG+0x164>)
 80011e4:	889b      	ldrh	r3, [r3, #4]
 80011e6:	8bba      	ldrh	r2, [r7, #28]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d305      	bcc.n	80011f8 <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 80011ec:	4b49      	ldr	r3, [pc, #292]	; (8001314 <UART_ReceivedMSG+0x164>)
 80011ee:	889b      	ldrh	r3, [r3, #4]
 80011f0:	8bba      	ldrh	r2, [r7, #28]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	843b      	strh	r3, [r7, #32]
 80011f6:	e007      	b.n	8001208 <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 80011f8:	4b46      	ldr	r3, [pc, #280]	; (8001314 <UART_ReceivedMSG+0x164>)
 80011fa:	889b      	ldrh	r3, [r3, #4]
 80011fc:	8bba      	ldrh	r2, [r7, #28]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	b29b      	uxth	r3, r3
 8001202:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001206:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 8001208:	4b42      	ldr	r3, [pc, #264]	; (8001314 <UART_ReceivedMSG+0x164>)
 800120a:	889b      	ldrh	r3, [r3, #4]
 800120c:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 800120e:	2300      	movs	r3, #0
 8001210:	847b      	strh	r3, [r7, #34]	; 0x22
 8001212:	e06d      	b.n	80012f0 <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 8001214:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001216:	4a40      	ldr	r2, [pc, #256]	; (8001318 <UART_ReceivedMSG+0x168>)
 8001218:	5cd3      	ldrb	r3, [r2, r3]
 800121a:	76fb      	strb	r3, [r7, #27]
      j++;
 800121c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800121e:	3301      	adds	r3, #1
 8001220:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 8001222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001228:	d301      	bcc.n	800122e <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 800122e:	7efb      	ldrb	r3, [r7, #27]
 8001230:	2bf0      	cmp	r3, #240	; 0xf0
 8001232:	d15a      	bne.n	80012ea <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 8001234:	4b37      	ldr	r3, [pc, #220]	; (8001314 <UART_ReceivedMSG+0x164>)
 8001236:	889b      	ldrh	r3, [r3, #4]
 8001238:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 800123a:	2300      	movs	r3, #0
 800123c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800123e:	e03a      	b.n	80012b6 <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 8001240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001242:	3301      	adds	r3, #1
 8001244:	b29b      	uxth	r3, r3
 8001246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800124a:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 800124c:	8bfb      	ldrh	r3, [r7, #30]
 800124e:	2bff      	cmp	r3, #255	; 0xff
 8001250:	d904      	bls.n	800125c <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 8001252:	4a30      	ldr	r2, [pc, #192]	; (8001314 <UART_ReceivedMSG+0x164>)
 8001254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001256:	8093      	strh	r3, [r2, #4]
            return 0;
 8001258:	2300      	movs	r3, #0
 800125a:	e055      	b.n	8001308 <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 800125c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800125e:	4a2e      	ldr	r2, [pc, #184]	; (8001318 <UART_ReceivedMSG+0x168>)
 8001260:	5cd3      	ldrb	r3, [r2, r3]
 8001262:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 8001264:	8b3b      	ldrh	r3, [r7, #24]
 8001266:	4a2c      	ldr	r2, [pc, #176]	; (8001318 <UART_ReceivedMSG+0x168>)
 8001268:	5cd3      	ldrb	r3, [r2, r3]
 800126a:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 800126c:	8bfb      	ldrh	r3, [r7, #30]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	3304      	adds	r3, #4
 8001274:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 8001276:	7db9      	ldrb	r1, [r7, #22]
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fe9b 	bl	8002fb8 <ReverseByteStuffCopyByte2>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d104      	bne.n	8001296 <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 800128c:	4a21      	ldr	r2, [pc, #132]	; (8001314 <UART_ReceivedMSG+0x164>)
 800128e:	8b3b      	ldrh	r3, [r7, #24]
 8001290:	8093      	strh	r3, [r2, #4]
            return 0;
 8001292:	2300      	movs	r3, #0
 8001294:	e038      	b.n	8001308 <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	b29a      	uxth	r2, r3
 800129a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800129c:	4413      	add	r3, r2
 800129e:	b29b      	uxth	r3, r3
 80012a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012a4:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 80012a6:	8bfb      	ldrh	r3, [r7, #30]
 80012a8:	3301      	adds	r3, #1
 80012aa:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012b2:	4413      	add	r3, r2
 80012b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80012b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3c0      	bcc.n	8001240 <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 80012be:	8bfa      	ldrh	r2, [r7, #30]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 80012c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012c6:	3301      	adds	r3, #1
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012ce:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 80012d0:	4a10      	ldr	r2, [pc, #64]	; (8001314 <UART_ReceivedMSG+0x164>)
 80012d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012d4:	8093      	strh	r3, [r2, #4]

        /* check message integrity */
        return (CHK_CheckAndRemove(Msg) != 0) ? 1 : 0;
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f001 febf 	bl	800305a <CHK_CheckAndRemove>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf14      	ite	ne
 80012e2:	2301      	movne	r3, #1
 80012e4:	2300      	moveq	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	e00e      	b.n	8001308 <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 80012ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012ec:	3301      	adds	r3, #1
 80012ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80012f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80012f2:	8c3b      	ldrh	r3, [r7, #32]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d38d      	bcc.n	8001214 <UART_ReceivedMSG+0x64>
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 80012f8:	8c3b      	ldrh	r3, [r7, #32]
 80012fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012fe:	d902      	bls.n	8001306 <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <UART_ReceivedMSG+0x164>)
 8001302:	8bbb      	ldrh	r3, [r7, #28]
 8001304:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000a68 	.word	0x20000a68
 8001314:	200006f4 	.word	0x200006f4
 8001318:	200004f4 	.word	0x200004f4

0800131c <UART_SendMsg>:
  * @brief  Send a message via UART
  * @param  Msg the pointer to the message to be sent
  * @retval None
  */
void UART_SendMsg(TMsg *Msg)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f001 fe6e 	bl	8003006 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4807      	ldr	r0, [pc, #28]	; (800134c <UART_SendMsg+0x30>)
 800132e:	f001 fe15 	bl	8002f5c <ByteStuffCopy>
 8001332:	4603      	mov	r3, r0
 8001334:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 8001336:	89fa      	ldrh	r2, [r7, #14]
 8001338:	f241 3388 	movw	r3, #5000	; 0x1388
 800133c:	4903      	ldr	r1, [pc, #12]	; (800134c <UART_SendMsg+0x30>)
 800133e:	4804      	ldr	r0, [pc, #16]	; (8001350 <UART_SendMsg+0x34>)
 8001340:	f007 fb1d 	bl	800897e <HAL_UART_Transmit>
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200006fc 	.word	0x200006fc
 8001350:	20000a68 	.word	0x20000a68

08001354 <UART_StartReceiveMsg>:
  * @brief  Start receiving messages via DMA
  * @param  None
  * @retval None
  */
void UART_StartReceiveMsg(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <UART_StartReceiveMsg+0x28>)
 800135a:	4a09      	ldr	r2, [pc, #36]	; (8001380 <UART_StartReceiveMsg+0x2c>)
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <UART_StartReceiveMsg+0x28>)
 8001360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001364:	859a      	strh	r2, [r3, #44]	; 0x2c
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <UART_StartReceiveMsg+0x28>)
 8001368:	2200      	movs	r2, #0
 800136a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 800136c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001370:	4903      	ldr	r1, [pc, #12]	; (8001380 <UART_StartReceiveMsg+0x2c>)
 8001372:	4802      	ldr	r0, [pc, #8]	; (800137c <UART_StartReceiveMsg+0x28>)
 8001374:	f007 fb95 	bl	8008aa2 <HAL_UART_Receive_DMA>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000a68 	.word	0x20000a68
 8001380:	200004f4 	.word	0x200004f4

08001384 <Get_DMA_Flag_Status>:
  * @brief  Get the DMA Stream pending flags
  * @param  handle_dma DMA handle
  * @retval The state of FLAG (SET or RESET)
  */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b8c      	ldr	r3, [pc, #560]	; (80015c4 <Get_DMA_Flag_Status+0x240>)
 8001394:	429a      	cmp	r2, r3
 8001396:	d961      	bls.n	800145c <Get_DMA_Flag_Status+0xd8>
 8001398:	4b8b      	ldr	r3, [pc, #556]	; (80015c8 <Get_DMA_Flag_Status+0x244>)
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	498a      	ldr	r1, [pc, #552]	; (80015cc <Get_DMA_Flag_Status+0x248>)
 80013a2:	428b      	cmp	r3, r1
 80013a4:	d057      	beq.n	8001456 <Get_DMA_Flag_Status+0xd2>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4989      	ldr	r1, [pc, #548]	; (80015d0 <Get_DMA_Flag_Status+0x24c>)
 80013ac:	428b      	cmp	r3, r1
 80013ae:	d050      	beq.n	8001452 <Get_DMA_Flag_Status+0xce>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4987      	ldr	r1, [pc, #540]	; (80015d4 <Get_DMA_Flag_Status+0x250>)
 80013b6:	428b      	cmp	r3, r1
 80013b8:	d049      	beq.n	800144e <Get_DMA_Flag_Status+0xca>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4986      	ldr	r1, [pc, #536]	; (80015d8 <Get_DMA_Flag_Status+0x254>)
 80013c0:	428b      	cmp	r3, r1
 80013c2:	d042      	beq.n	800144a <Get_DMA_Flag_Status+0xc6>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4984      	ldr	r1, [pc, #528]	; (80015dc <Get_DMA_Flag_Status+0x258>)
 80013ca:	428b      	cmp	r3, r1
 80013cc:	d03a      	beq.n	8001444 <Get_DMA_Flag_Status+0xc0>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4983      	ldr	r1, [pc, #524]	; (80015e0 <Get_DMA_Flag_Status+0x25c>)
 80013d4:	428b      	cmp	r3, r1
 80013d6:	d032      	beq.n	800143e <Get_DMA_Flag_Status+0xba>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4981      	ldr	r1, [pc, #516]	; (80015e4 <Get_DMA_Flag_Status+0x260>)
 80013de:	428b      	cmp	r3, r1
 80013e0:	d02a      	beq.n	8001438 <Get_DMA_Flag_Status+0xb4>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4980      	ldr	r1, [pc, #512]	; (80015e8 <Get_DMA_Flag_Status+0x264>)
 80013e8:	428b      	cmp	r3, r1
 80013ea:	d022      	beq.n	8001432 <Get_DMA_Flag_Status+0xae>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	497e      	ldr	r1, [pc, #504]	; (80015ec <Get_DMA_Flag_Status+0x268>)
 80013f2:	428b      	cmp	r3, r1
 80013f4:	d01a      	beq.n	800142c <Get_DMA_Flag_Status+0xa8>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	497d      	ldr	r1, [pc, #500]	; (80015f0 <Get_DMA_Flag_Status+0x26c>)
 80013fc:	428b      	cmp	r3, r1
 80013fe:	d012      	beq.n	8001426 <Get_DMA_Flag_Status+0xa2>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	497b      	ldr	r1, [pc, #492]	; (80015f4 <Get_DMA_Flag_Status+0x270>)
 8001406:	428b      	cmp	r3, r1
 8001408:	d00a      	beq.n	8001420 <Get_DMA_Flag_Status+0x9c>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	497a      	ldr	r1, [pc, #488]	; (80015f8 <Get_DMA_Flag_Status+0x274>)
 8001410:	428b      	cmp	r3, r1
 8001412:	d102      	bne.n	800141a <Get_DMA_Flag_Status+0x96>
 8001414:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001418:	e01e      	b.n	8001458 <Get_DMA_Flag_Status+0xd4>
 800141a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800141e:	e01b      	b.n	8001458 <Get_DMA_Flag_Status+0xd4>
 8001420:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001424:	e018      	b.n	8001458 <Get_DMA_Flag_Status+0xd4>
 8001426:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800142a:	e015      	b.n	8001458 <Get_DMA_Flag_Status+0xd4>
 800142c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001430:	e012      	b.n	8001458 <Get_DMA_Flag_Status+0xd4>
 8001432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001436:	e00f      	b.n	8001458 <Get_DMA_Flag_Status+0xd4>
 8001438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800143c:	e00c      	b.n	8001458 <Get_DMA_Flag_Status+0xd4>
 800143e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001442:	e009      	b.n	8001458 <Get_DMA_Flag_Status+0xd4>
 8001444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001448:	e006      	b.n	8001458 <Get_DMA_Flag_Status+0xd4>
 800144a:	2308      	movs	r3, #8
 800144c:	e004      	b.n	8001458 <Get_DMA_Flag_Status+0xd4>
 800144e:	2308      	movs	r3, #8
 8001450:	e002      	b.n	8001458 <Get_DMA_Flag_Status+0xd4>
 8001452:	2308      	movs	r3, #8
 8001454:	e000      	b.n	8001458 <Get_DMA_Flag_Status+0xd4>
 8001456:	2308      	movs	r3, #8
 8001458:	4013      	ands	r3, r2
 800145a:	e154      	b.n	8001706 <Get_DMA_Flag_Status+0x382>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b66      	ldr	r3, [pc, #408]	; (80015fc <Get_DMA_Flag_Status+0x278>)
 8001464:	429a      	cmp	r2, r3
 8001466:	d961      	bls.n	800152c <Get_DMA_Flag_Status+0x1a8>
 8001468:	4b57      	ldr	r3, [pc, #348]	; (80015c8 <Get_DMA_Flag_Status+0x244>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4956      	ldr	r1, [pc, #344]	; (80015cc <Get_DMA_Flag_Status+0x248>)
 8001472:	428b      	cmp	r3, r1
 8001474:	d057      	beq.n	8001526 <Get_DMA_Flag_Status+0x1a2>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4955      	ldr	r1, [pc, #340]	; (80015d0 <Get_DMA_Flag_Status+0x24c>)
 800147c:	428b      	cmp	r3, r1
 800147e:	d050      	beq.n	8001522 <Get_DMA_Flag_Status+0x19e>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4953      	ldr	r1, [pc, #332]	; (80015d4 <Get_DMA_Flag_Status+0x250>)
 8001486:	428b      	cmp	r3, r1
 8001488:	d049      	beq.n	800151e <Get_DMA_Flag_Status+0x19a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4952      	ldr	r1, [pc, #328]	; (80015d8 <Get_DMA_Flag_Status+0x254>)
 8001490:	428b      	cmp	r3, r1
 8001492:	d042      	beq.n	800151a <Get_DMA_Flag_Status+0x196>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4950      	ldr	r1, [pc, #320]	; (80015dc <Get_DMA_Flag_Status+0x258>)
 800149a:	428b      	cmp	r3, r1
 800149c:	d03a      	beq.n	8001514 <Get_DMA_Flag_Status+0x190>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	494f      	ldr	r1, [pc, #316]	; (80015e0 <Get_DMA_Flag_Status+0x25c>)
 80014a4:	428b      	cmp	r3, r1
 80014a6:	d032      	beq.n	800150e <Get_DMA_Flag_Status+0x18a>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	494d      	ldr	r1, [pc, #308]	; (80015e4 <Get_DMA_Flag_Status+0x260>)
 80014ae:	428b      	cmp	r3, r1
 80014b0:	d02a      	beq.n	8001508 <Get_DMA_Flag_Status+0x184>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	494c      	ldr	r1, [pc, #304]	; (80015e8 <Get_DMA_Flag_Status+0x264>)
 80014b8:	428b      	cmp	r3, r1
 80014ba:	d022      	beq.n	8001502 <Get_DMA_Flag_Status+0x17e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	494a      	ldr	r1, [pc, #296]	; (80015ec <Get_DMA_Flag_Status+0x268>)
 80014c2:	428b      	cmp	r3, r1
 80014c4:	d01a      	beq.n	80014fc <Get_DMA_Flag_Status+0x178>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4949      	ldr	r1, [pc, #292]	; (80015f0 <Get_DMA_Flag_Status+0x26c>)
 80014cc:	428b      	cmp	r3, r1
 80014ce:	d012      	beq.n	80014f6 <Get_DMA_Flag_Status+0x172>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4947      	ldr	r1, [pc, #284]	; (80015f4 <Get_DMA_Flag_Status+0x270>)
 80014d6:	428b      	cmp	r3, r1
 80014d8:	d00a      	beq.n	80014f0 <Get_DMA_Flag_Status+0x16c>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4946      	ldr	r1, [pc, #280]	; (80015f8 <Get_DMA_Flag_Status+0x274>)
 80014e0:	428b      	cmp	r3, r1
 80014e2:	d102      	bne.n	80014ea <Get_DMA_Flag_Status+0x166>
 80014e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80014e8:	e01e      	b.n	8001528 <Get_DMA_Flag_Status+0x1a4>
 80014ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014ee:	e01b      	b.n	8001528 <Get_DMA_Flag_Status+0x1a4>
 80014f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80014f4:	e018      	b.n	8001528 <Get_DMA_Flag_Status+0x1a4>
 80014f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80014fa:	e015      	b.n	8001528 <Get_DMA_Flag_Status+0x1a4>
 80014fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001500:	e012      	b.n	8001528 <Get_DMA_Flag_Status+0x1a4>
 8001502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001506:	e00f      	b.n	8001528 <Get_DMA_Flag_Status+0x1a4>
 8001508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800150c:	e00c      	b.n	8001528 <Get_DMA_Flag_Status+0x1a4>
 800150e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001512:	e009      	b.n	8001528 <Get_DMA_Flag_Status+0x1a4>
 8001514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001518:	e006      	b.n	8001528 <Get_DMA_Flag_Status+0x1a4>
 800151a:	2308      	movs	r3, #8
 800151c:	e004      	b.n	8001528 <Get_DMA_Flag_Status+0x1a4>
 800151e:	2308      	movs	r3, #8
 8001520:	e002      	b.n	8001528 <Get_DMA_Flag_Status+0x1a4>
 8001522:	2308      	movs	r3, #8
 8001524:	e000      	b.n	8001528 <Get_DMA_Flag_Status+0x1a4>
 8001526:	2308      	movs	r3, #8
 8001528:	4013      	ands	r3, r2
 800152a:	e0ec      	b.n	8001706 <Get_DMA_Flag_Status+0x382>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <Get_DMA_Flag_Status+0x27c>)
 8001534:	429a      	cmp	r2, r3
 8001536:	f240 8085 	bls.w	8001644 <Get_DMA_Flag_Status+0x2c0>
 800153a:	4b32      	ldr	r3, [pc, #200]	; (8001604 <Get_DMA_Flag_Status+0x280>)
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4922      	ldr	r1, [pc, #136]	; (80015cc <Get_DMA_Flag_Status+0x248>)
 8001544:	428b      	cmp	r3, r1
 8001546:	d07a      	beq.n	800163e <Get_DMA_Flag_Status+0x2ba>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4920      	ldr	r1, [pc, #128]	; (80015d0 <Get_DMA_Flag_Status+0x24c>)
 800154e:	428b      	cmp	r3, r1
 8001550:	d073      	beq.n	800163a <Get_DMA_Flag_Status+0x2b6>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	491f      	ldr	r1, [pc, #124]	; (80015d4 <Get_DMA_Flag_Status+0x250>)
 8001558:	428b      	cmp	r3, r1
 800155a:	d06c      	beq.n	8001636 <Get_DMA_Flag_Status+0x2b2>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	491d      	ldr	r1, [pc, #116]	; (80015d8 <Get_DMA_Flag_Status+0x254>)
 8001562:	428b      	cmp	r3, r1
 8001564:	d065      	beq.n	8001632 <Get_DMA_Flag_Status+0x2ae>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	491c      	ldr	r1, [pc, #112]	; (80015dc <Get_DMA_Flag_Status+0x258>)
 800156c:	428b      	cmp	r3, r1
 800156e:	d05d      	beq.n	800162c <Get_DMA_Flag_Status+0x2a8>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	491a      	ldr	r1, [pc, #104]	; (80015e0 <Get_DMA_Flag_Status+0x25c>)
 8001576:	428b      	cmp	r3, r1
 8001578:	d055      	beq.n	8001626 <Get_DMA_Flag_Status+0x2a2>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4919      	ldr	r1, [pc, #100]	; (80015e4 <Get_DMA_Flag_Status+0x260>)
 8001580:	428b      	cmp	r3, r1
 8001582:	d04d      	beq.n	8001620 <Get_DMA_Flag_Status+0x29c>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4917      	ldr	r1, [pc, #92]	; (80015e8 <Get_DMA_Flag_Status+0x264>)
 800158a:	428b      	cmp	r3, r1
 800158c:	d045      	beq.n	800161a <Get_DMA_Flag_Status+0x296>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4916      	ldr	r1, [pc, #88]	; (80015ec <Get_DMA_Flag_Status+0x268>)
 8001594:	428b      	cmp	r3, r1
 8001596:	d03d      	beq.n	8001614 <Get_DMA_Flag_Status+0x290>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4914      	ldr	r1, [pc, #80]	; (80015f0 <Get_DMA_Flag_Status+0x26c>)
 800159e:	428b      	cmp	r3, r1
 80015a0:	d035      	beq.n	800160e <Get_DMA_Flag_Status+0x28a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4913      	ldr	r1, [pc, #76]	; (80015f4 <Get_DMA_Flag_Status+0x270>)
 80015a8:	428b      	cmp	r3, r1
 80015aa:	d02d      	beq.n	8001608 <Get_DMA_Flag_Status+0x284>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4911      	ldr	r1, [pc, #68]	; (80015f8 <Get_DMA_Flag_Status+0x274>)
 80015b2:	428b      	cmp	r3, r1
 80015b4:	d102      	bne.n	80015bc <Get_DMA_Flag_Status+0x238>
 80015b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80015ba:	e041      	b.n	8001640 <Get_DMA_Flag_Status+0x2bc>
 80015bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c0:	e03e      	b.n	8001640 <Get_DMA_Flag_Status+0x2bc>
 80015c2:	bf00      	nop
 80015c4:	40026458 	.word	0x40026458
 80015c8:	40026400 	.word	0x40026400
 80015cc:	40026010 	.word	0x40026010
 80015d0:	40026410 	.word	0x40026410
 80015d4:	40026070 	.word	0x40026070
 80015d8:	40026470 	.word	0x40026470
 80015dc:	40026028 	.word	0x40026028
 80015e0:	40026428 	.word	0x40026428
 80015e4:	40026088 	.word	0x40026088
 80015e8:	40026488 	.word	0x40026488
 80015ec:	40026040 	.word	0x40026040
 80015f0:	40026440 	.word	0x40026440
 80015f4:	400260a0 	.word	0x400260a0
 80015f8:	400264a0 	.word	0x400264a0
 80015fc:	400260b8 	.word	0x400260b8
 8001600:	40026058 	.word	0x40026058
 8001604:	40026000 	.word	0x40026000
 8001608:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800160c:	e018      	b.n	8001640 <Get_DMA_Flag_Status+0x2bc>
 800160e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001612:	e015      	b.n	8001640 <Get_DMA_Flag_Status+0x2bc>
 8001614:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001618:	e012      	b.n	8001640 <Get_DMA_Flag_Status+0x2bc>
 800161a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800161e:	e00f      	b.n	8001640 <Get_DMA_Flag_Status+0x2bc>
 8001620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001624:	e00c      	b.n	8001640 <Get_DMA_Flag_Status+0x2bc>
 8001626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800162a:	e009      	b.n	8001640 <Get_DMA_Flag_Status+0x2bc>
 800162c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001630:	e006      	b.n	8001640 <Get_DMA_Flag_Status+0x2bc>
 8001632:	2308      	movs	r3, #8
 8001634:	e004      	b.n	8001640 <Get_DMA_Flag_Status+0x2bc>
 8001636:	2308      	movs	r3, #8
 8001638:	e002      	b.n	8001640 <Get_DMA_Flag_Status+0x2bc>
 800163a:	2308      	movs	r3, #8
 800163c:	e000      	b.n	8001640 <Get_DMA_Flag_Status+0x2bc>
 800163e:	2308      	movs	r3, #8
 8001640:	4013      	ands	r3, r2
 8001642:	e060      	b.n	8001706 <Get_DMA_Flag_Status+0x382>
 8001644:	4b33      	ldr	r3, [pc, #204]	; (8001714 <Get_DMA_Flag_Status+0x390>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4932      	ldr	r1, [pc, #200]	; (8001718 <Get_DMA_Flag_Status+0x394>)
 800164e:	428b      	cmp	r3, r1
 8001650:	d057      	beq.n	8001702 <Get_DMA_Flag_Status+0x37e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4931      	ldr	r1, [pc, #196]	; (800171c <Get_DMA_Flag_Status+0x398>)
 8001658:	428b      	cmp	r3, r1
 800165a:	d050      	beq.n	80016fe <Get_DMA_Flag_Status+0x37a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	492f      	ldr	r1, [pc, #188]	; (8001720 <Get_DMA_Flag_Status+0x39c>)
 8001662:	428b      	cmp	r3, r1
 8001664:	d049      	beq.n	80016fa <Get_DMA_Flag_Status+0x376>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	492e      	ldr	r1, [pc, #184]	; (8001724 <Get_DMA_Flag_Status+0x3a0>)
 800166c:	428b      	cmp	r3, r1
 800166e:	d042      	beq.n	80016f6 <Get_DMA_Flag_Status+0x372>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	492c      	ldr	r1, [pc, #176]	; (8001728 <Get_DMA_Flag_Status+0x3a4>)
 8001676:	428b      	cmp	r3, r1
 8001678:	d03a      	beq.n	80016f0 <Get_DMA_Flag_Status+0x36c>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	492b      	ldr	r1, [pc, #172]	; (800172c <Get_DMA_Flag_Status+0x3a8>)
 8001680:	428b      	cmp	r3, r1
 8001682:	d032      	beq.n	80016ea <Get_DMA_Flag_Status+0x366>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4929      	ldr	r1, [pc, #164]	; (8001730 <Get_DMA_Flag_Status+0x3ac>)
 800168a:	428b      	cmp	r3, r1
 800168c:	d02a      	beq.n	80016e4 <Get_DMA_Flag_Status+0x360>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4928      	ldr	r1, [pc, #160]	; (8001734 <Get_DMA_Flag_Status+0x3b0>)
 8001694:	428b      	cmp	r3, r1
 8001696:	d022      	beq.n	80016de <Get_DMA_Flag_Status+0x35a>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4926      	ldr	r1, [pc, #152]	; (8001738 <Get_DMA_Flag_Status+0x3b4>)
 800169e:	428b      	cmp	r3, r1
 80016a0:	d01a      	beq.n	80016d8 <Get_DMA_Flag_Status+0x354>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4925      	ldr	r1, [pc, #148]	; (800173c <Get_DMA_Flag_Status+0x3b8>)
 80016a8:	428b      	cmp	r3, r1
 80016aa:	d012      	beq.n	80016d2 <Get_DMA_Flag_Status+0x34e>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4923      	ldr	r1, [pc, #140]	; (8001740 <Get_DMA_Flag_Status+0x3bc>)
 80016b2:	428b      	cmp	r3, r1
 80016b4:	d00a      	beq.n	80016cc <Get_DMA_Flag_Status+0x348>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4922      	ldr	r1, [pc, #136]	; (8001744 <Get_DMA_Flag_Status+0x3c0>)
 80016bc:	428b      	cmp	r3, r1
 80016be:	d102      	bne.n	80016c6 <Get_DMA_Flag_Status+0x342>
 80016c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80016c4:	e01e      	b.n	8001704 <Get_DMA_Flag_Status+0x380>
 80016c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ca:	e01b      	b.n	8001704 <Get_DMA_Flag_Status+0x380>
 80016cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80016d0:	e018      	b.n	8001704 <Get_DMA_Flag_Status+0x380>
 80016d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80016d6:	e015      	b.n	8001704 <Get_DMA_Flag_Status+0x380>
 80016d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80016dc:	e012      	b.n	8001704 <Get_DMA_Flag_Status+0x380>
 80016de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e2:	e00f      	b.n	8001704 <Get_DMA_Flag_Status+0x380>
 80016e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e8:	e00c      	b.n	8001704 <Get_DMA_Flag_Status+0x380>
 80016ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ee:	e009      	b.n	8001704 <Get_DMA_Flag_Status+0x380>
 80016f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f4:	e006      	b.n	8001704 <Get_DMA_Flag_Status+0x380>
 80016f6:	2308      	movs	r3, #8
 80016f8:	e004      	b.n	8001704 <Get_DMA_Flag_Status+0x380>
 80016fa:	2308      	movs	r3, #8
 80016fc:	e002      	b.n	8001704 <Get_DMA_Flag_Status+0x380>
 80016fe:	2308      	movs	r3, #8
 8001700:	e000      	b.n	8001704 <Get_DMA_Flag_Status+0x380>
 8001702:	2308      	movs	r3, #8
 8001704:	4013      	ands	r3, r2
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40026000 	.word	0x40026000
 8001718:	40026010 	.word	0x40026010
 800171c:	40026410 	.word	0x40026410
 8001720:	40026070 	.word	0x40026070
 8001724:	40026470 	.word	0x40026470
 8001728:	40026028 	.word	0x40026028
 800172c:	40026428 	.word	0x40026428
 8001730:	40026088 	.word	0x40026088
 8001734:	40026488 	.word	0x40026488
 8001738:	40026040 	.word	0x40026040
 800173c:	40026440 	.word	0x40026440
 8001740:	400260a0 	.word	0x400260a0
 8001744:	400264a0 	.word	0x400264a0

08001748 <Get_DMA_Counter>:
  * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
  * @param  handle_dma DMA handle
  * @retval The number of remaining data units in the current DMA Stream transfer
  */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <CUSTOM_ENV_SENSOR_Init>:
  *         - ENV_HUMIDITY
  *         - ENV_GAS
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t function = ENV_TEMPERATURE;
 8001772:	2301      	movs	r3, #1
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  CUSTOM_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d138      	bne.n	80017f2 <CUSTOM_ENV_SENSOR_Init+0x8e>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_0_Probe(Functions) != BSP_ERROR_NONE)
 8001780:	6838      	ldr	r0, [r7, #0]
 8001782:	f000 f941 	bl	8001a08 <STHS34PF80_0_Probe>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <CUSTOM_ENV_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
 8001790:	e069      	b.n	8001866 <CUSTOM_ENV_SENSOR_Init+0x102>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8001792:	4a37      	ldr	r2, [pc, #220]	; (8001870 <CUSTOM_ENV_SENSOR_Init+0x10c>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4935      	ldr	r1, [pc, #212]	; (8001874 <CUSTOM_ENV_SENSOR_Init+0x110>)
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017a4:	f107 0108 	add.w	r1, r7, #8
 80017a8:	4610      	mov	r0, r2
 80017aa:	4798      	blx	r3
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <CUSTOM_ENV_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80017b2:	f06f 0306 	mvn.w	r3, #6
 80017b6:	e056      	b.n	8001866 <CUSTOM_ENV_SENSOR_Init+0x102>
      }
      if (cap.Temperature == 1U)
 80017b8:	7a3b      	ldrb	r3, [r7, #8]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d103      	bne.n	80017c6 <CUSTOM_ENV_SENSOR_Init+0x62>
      {
        component_functions |= ENV_TEMPERATURE;
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80017c6:	7abb      	ldrb	r3, [r7, #10]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d103      	bne.n	80017d4 <CUSTOM_ENV_SENSOR_Init+0x70>
      {
        component_functions |= ENV_HUMIDITY;
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 80017d4:	7a7b      	ldrb	r3, [r7, #9]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d103      	bne.n	80017e2 <CUSTOM_ENV_SENSOR_Init+0x7e>
      {
        component_functions |= ENV_PRESSURE;
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 80017e2:	7afb      	ldrb	r3, [r7, #11]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d108      	bne.n	80017fa <CUSTOM_ENV_SENSOR_Init+0x96>
      {
        component_functions |= ENV_GAS;
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	623b      	str	r3, [r7, #32]
      }
      break;
 80017f0:	e003      	b.n	80017fa <CUSTOM_ENV_SENSOR_Init+0x96>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80017f2:	f06f 0301 	mvn.w	r3, #1
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80017f8:	e000      	b.n	80017fc <CUSTOM_ENV_SENSOR_Init+0x98>
      break;
 80017fa:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80017fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <CUSTOM_ENV_SENSOR_Init+0xa2>
  {
    return ret;
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	e02f      	b.n	8001866 <CUSTOM_ENV_SENSOR_Init+0x102>
  }

  for (i = 0; i < CUSTOM_ENV_FUNCTIONS_NBR; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
 800180a:	e028      	b.n	800185e <CUSTOM_ENV_SENSOR_Init+0xfa>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001810:	4013      	ands	r3, r2
 8001812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001814:	429a      	cmp	r2, r3
 8001816:	d11c      	bne.n	8001852 <CUSTOM_ENV_SENSOR_Init+0xee>
 8001818:	6a3a      	ldr	r2, [r7, #32]
 800181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181c:	4013      	ands	r3, r2
 800181e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001820:	429a      	cmp	r2, r3
 8001822:	d116      	bne.n	8001852 <CUSTOM_ENV_SENSOR_Init+0xee>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <CUSTOM_ENV_SENSOR_Init+0x114>)
 8001826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182c:	4913      	ldr	r1, [pc, #76]	; (800187c <CUSTOM_ENV_SENSOR_Init+0x118>)
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	4413      	add	r3, r2
 8001834:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	490e      	ldr	r1, [pc, #56]	; (8001874 <CUSTOM_ENV_SENSOR_Init+0x110>)
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001842:	4610      	mov	r0, r2
 8001844:	4798      	blx	r3
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d002      	beq.n	8001852 <CUSTOM_ENV_SENSOR_Init+0xee>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800184c:	f06f 0304 	mvn.w	r3, #4
 8001850:	e009      	b.n	8001866 <CUSTOM_ENV_SENSOR_Init+0x102>
      }
    }
    function = function << 1;
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < CUSTOM_ENV_FUNCTIONS_NBR; i++)
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	3301      	adds	r3, #1
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	2b03      	cmp	r3, #3
 8001862:	d9d3      	bls.n	800180c <CUSTOM_ENV_SENSOR_Init+0xa8>
  }

  return ret;
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001866:	4618      	mov	r0, r3
 8001868:	3730      	adds	r7, #48	; 0x30
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000910 	.word	0x20000910
 8001874:	200008fc 	.word	0x200008fc
 8001878:	20000004 	.word	0x20000004
 800187c:	20000900 	.word	0x20000900

08001880 <CUSTOM_ENV_SENSOR_Enable>:
  *         - ENV_HUMIDITY
  *         - ENV_GAS
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_ENV_INSTANCES_NBR)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <CUSTOM_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001890:	f06f 0301 	mvn.w	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	e026      	b.n	80018e6 <CUSTOM_ENV_SENSOR_Enable+0x66>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8001898:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <CUSTOM_ENV_SENSOR_Enable+0x70>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4013      	ands	r3, r2
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d11a      	bne.n	80018e0 <CUSTOM_ENV_SENSOR_Enable+0x60>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <CUSTOM_ENV_SENSOR_Enable+0x74>)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b2:	4911      	ldr	r1, [pc, #68]	; (80018f8 <CUSTOM_ENV_SENSOR_Enable+0x78>)
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <CUSTOM_ENV_SENSOR_Enable+0x7c>)
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018c8:	4610      	mov	r0, r2
 80018ca:	4798      	blx	r3
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <CUSTOM_ENV_SENSOR_Enable+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80018d2:	f06f 0304 	mvn.w	r3, #4
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e005      	b.n	80018e6 <CUSTOM_ENV_SENSOR_Enable+0x66>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e002      	b.n	80018e6 <CUSTOM_ENV_SENSOR_Enable+0x66>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80018e0:	f06f 0301 	mvn.w	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000914 	.word	0x20000914
 80018f4:	20000004 	.word	0x20000004
 80018f8:	20000900 	.word	0x20000900
 80018fc:	200008fc 	.word	0x200008fc

08001900 <CUSTOM_ENV_SENSOR_Disable>:
  *         - ENV_HUMIDITY
  *         - ENV_GAS
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_ENV_INSTANCES_NBR)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <CUSTOM_ENV_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001910:	f06f 0301 	mvn.w	r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	e026      	b.n	8001966 <CUSTOM_ENV_SENSOR_Disable+0x66>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8001918:	4a15      	ldr	r2, [pc, #84]	; (8001970 <CUSTOM_ENV_SENSOR_Disable+0x70>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	4013      	ands	r3, r2
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d11a      	bne.n	8001960 <CUSTOM_ENV_SENSOR_Disable+0x60>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Disable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <CUSTOM_ENV_SENSOR_Disable+0x74>)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	4911      	ldr	r1, [pc, #68]	; (8001978 <CUSTOM_ENV_SENSOR_Disable+0x78>)
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4413      	add	r3, r2
 800193a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	490e      	ldr	r1, [pc, #56]	; (800197c <CUSTOM_ENV_SENSOR_Disable+0x7c>)
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001948:	4610      	mov	r0, r2
 800194a:	4798      	blx	r3
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <CUSTOM_ENV_SENSOR_Disable+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001952:	f06f 0304 	mvn.w	r3, #4
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e005      	b.n	8001966 <CUSTOM_ENV_SENSOR_Disable+0x66>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	e002      	b.n	8001966 <CUSTOM_ENV_SENSOR_Disable+0x66>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8001960:	f06f 0301 	mvn.w	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000914 	.word	0x20000914
 8001974:	20000004 	.word	0x20000004
 8001978:	20000900 	.word	0x20000900
 800197c:	200008fc 	.word	0x200008fc

08001980 <CUSTOM_ENV_SENSOR_SetOutputDataRate>:
  *         - ENV_GAS
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_ENV_INSTANCES_NBR)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001994:	f06f 0301 	mvn.w	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	e028      	b.n	80019ee <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800199c:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x78>)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4013      	ands	r3, r2
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d11c      	bne.n	80019e8 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80019ae:	4a13      	ldr	r2, [pc, #76]	; (80019fc <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x7c>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	4912      	ldr	r1, [pc, #72]	; (8001a00 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x80>)
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4413      	add	r3, r2
 80019be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	490f      	ldr	r1, [pc, #60]	; (8001a04 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x84>)
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019cc:	ed97 0a01 	vldr	s0, [r7, #4]
 80019d0:	4610      	mov	r0, r2
 80019d2:	4798      	blx	r3
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80019da:	f06f 0304 	mvn.w	r3, #4
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e005      	b.n	80019ee <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e002      	b.n	80019ee <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80019e8:	f06f 0301 	mvn.w	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80019ee:	697b      	ldr	r3, [r7, #20]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000914 	.word	0x20000914
 80019fc:	20000004 	.word	0x20000004
 8001a00:	20000900 	.word	0x20000900
 8001a04:	200008fc 	.word	0x200008fc

08001a08 <STHS34PF80_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be:
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STHS34PF80_0_Probe(uint32_t Functions)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b092      	sub	sp, #72	; 0x48
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  STHS34PF80_IO_t            io_ctx;
  uint8_t                    id;
  int32_t                    ret = BSP_ERROR_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	647b      	str	r3, [r7, #68]	; 0x44
  static STHS34PF80_Object_t sths34pf80_obj_0;
  STHS34PF80_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STHS34PF80_I2C_BUS; /* I2C */
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = STHS34PF80_I2C_ADD;
 8001a18:	23b5      	movs	r3, #181	; 0xb5
 8001a1a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = CUSTOM_STHS34PF80_0_I2C_Init;
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <STHS34PF80_0_Probe+0x134>)
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = CUSTOM_STHS34PF80_0_I2C_DeInit;
 8001a22:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <STHS34PF80_0_Probe+0x138>)
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = CUSTOM_STHS34PF80_0_I2C_ReadReg;
 8001a26:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <STHS34PF80_0_Probe+0x13c>)
 8001a28:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = CUSTOM_STHS34PF80_0_I2C_WriteReg;
 8001a2a:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <STHS34PF80_0_Probe+0x140>)
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = BSP_GetTick;
 8001a2e:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <STHS34PF80_0_Probe+0x144>)
 8001a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.Delay       = HAL_Delay;
 8001a32:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <STHS34PF80_0_Probe+0x148>)
 8001a34:	643b      	str	r3, [r7, #64]	; 0x40

  if (STHS34PF80_RegisterBusIO(&sths34pf80_obj_0, &io_ctx) != STHS34PF80_OK)
 8001a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4845      	ldr	r0, [pc, #276]	; (8001b54 <STHS34PF80_0_Probe+0x14c>)
 8001a3e:	f001 ffc3 	bl	80039c8 <STHS34PF80_RegisterBusIO>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <STHS34PF80_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001a48:	f06f 0306 	mvn.w	r3, #6
 8001a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8001a4e:	e06f      	b.n	8001b30 <STHS34PF80_0_Probe+0x128>
  }
  else if (STHS34PF80_ReadID(&sths34pf80_obj_0, &id) != STHS34PF80_OK)
 8001a50:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001a54:	4619      	mov	r1, r3
 8001a56:	483f      	ldr	r0, [pc, #252]	; (8001b54 <STHS34PF80_0_Probe+0x14c>)
 8001a58:	f002 f849 	bl	8003aee <STHS34PF80_ReadID>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <STHS34PF80_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001a62:	f06f 0306 	mvn.w	r3, #6
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
 8001a68:	e062      	b.n	8001b30 <STHS34PF80_0_Probe+0x128>
  }
  else if (id != STHS34PF80_ID)
 8001a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a6e:	2bd3      	cmp	r3, #211	; 0xd3
 8001a70:	d003      	beq.n	8001a7a <STHS34PF80_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001a72:	f06f 0306 	mvn.w	r3, #6
 8001a76:	647b      	str	r3, [r7, #68]	; 0x44
 8001a78:	e05a      	b.n	8001b30 <STHS34PF80_0_Probe+0x128>
  }
  else
  {
    (void)STHS34PF80_GetCapabilities(&sths34pf80_obj_0, &cap);
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4834      	ldr	r0, [pc, #208]	; (8001b54 <STHS34PF80_0_Probe+0x14c>)
 8001a82:	f002 f84f 	bl	8003b24 <STHS34PF80_GetCapabilities>

    EnvCtx[CUSTOM_STHS34PF80_0].Functions = ((uint32_t)cap.Temperature)
 8001a86:	7a3b      	ldrb	r3, [r7, #8]
 8001a88:	461a      	mov	r2, r3
                                          | ((uint32_t)cap.Pressure << 1)
 8001a8a:	7a7b      	ldrb	r3, [r7, #9]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	431a      	orrs	r2, r3
                                          | ((uint32_t)cap.Humidity << 2)
 8001a90:	7abb      	ldrb	r3, [r7, #10]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	431a      	orrs	r2, r3
                                          | ((uint32_t)cap.Gas      << 3);
 8001a96:	7afb      	ldrb	r3, [r7, #11]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4313      	orrs	r3, r2
    EnvCtx[CUSTOM_STHS34PF80_0].Functions = ((uint32_t)cap.Temperature)
 8001a9c:	4a2e      	ldr	r2, [pc, #184]	; (8001b58 <STHS34PF80_0_Probe+0x150>)
 8001a9e:	6013      	str	r3, [r2, #0]

    EnvCompObj[CUSTOM_STHS34PF80_0] = &sths34pf80_obj_0;
 8001aa0:	4b2e      	ldr	r3, [pc, #184]	; (8001b5c <STHS34PF80_0_Probe+0x154>)
 8001aa2:	4a2c      	ldr	r2, [pc, #176]	; (8001b54 <STHS34PF80_0_Probe+0x14c>)
 8001aa4:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[CUSTOM_STHS34PF80_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STHS34PF80_COMMON_Driver;
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <STHS34PF80_0_Probe+0x158>)
 8001aa8:	4a2e      	ldr	r2, [pc, #184]	; (8001b64 <STHS34PF80_0_Probe+0x15c>)
 8001aaa:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8001aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d11d      	bne.n	8001aee <STHS34PF80_0_Probe+0xe6>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d018      	beq.n	8001aee <STHS34PF80_0_Probe+0xe6>
 8001abc:	7a3b      	ldrb	r3, [r7, #8]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d115      	bne.n	8001aee <STHS34PF80_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[CUSTOM_STHS34PF80_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STHS34PF80_TEMP_Driver;
 8001ac2:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <STHS34PF80_0_Probe+0x160>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4a29      	ldr	r2, [pc, #164]	; (8001b6c <STHS34PF80_0_Probe+0x164>)
 8001ac8:	4929      	ldr	r1, [pc, #164]	; (8001b70 <STHS34PF80_0_Probe+0x168>)
 8001aca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[CUSTOM_STHS34PF80_0]->Init(EnvCompObj[CUSTOM_STHS34PF80_0]) != STHS34PF80_OK)
 8001ace:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <STHS34PF80_0_Probe+0x158>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a21      	ldr	r2, [pc, #132]	; (8001b5c <STHS34PF80_0_Probe+0x154>)
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4798      	blx	r3
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <STHS34PF80_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ae2:	f06f 0304 	mvn.w	r3, #4
 8001ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ae8:	e001      	b.n	8001aee <STHS34PF80_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8001aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <STHS34PF80_0_Probe+0xfc>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <STHS34PF80_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001afe:	f06f 0304 	mvn.w	r3, #4
 8001b02:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8001b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <STHS34PF80_0_Probe+0x112>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <STHS34PF80_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b14:	f06f 0304 	mvn.w	r3, #4
 8001b18:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8001b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d107      	bne.n	8001b30 <STHS34PF80_0_Probe+0x128>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <STHS34PF80_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b2a:	f06f 0304 	mvn.w	r3, #4
 8001b2e:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8001b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3748      	adds	r7, #72	; 0x48
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	0800369d 	.word	0x0800369d
 8001b40:	08003701 	.word	0x08003701
 8001b44:	080037b5 	.word	0x080037b5
 8001b48:	08003751 	.word	0x08003751
 8001b4c:	08003819 	.word	0x08003819
 8001b50:	080048a5 	.word	0x080048a5
 8001b54:	20000918 	.word	0x20000918
 8001b58:	20000914 	.word	0x20000914
 8001b5c:	200008fc 	.word	0x200008fc
 8001b60:	20000910 	.word	0x20000910
 8001b64:	20000058 	.word	0x20000058
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	20000900 	.word	0x20000900
 8001b70:	20000068 	.word	0x20000068

08001b74 <CUSTOM_ENV_SENSOR_Get_TAmbRaw>:
  * @param  Instance the device instance
  * @param  Value the ambient raw temperature data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_TAmbRaw(uint32_t Instance, int16_t *Value)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d111      	bne.n	8001ba8 <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetAmbientTemperatureRaw(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8001b84:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x48>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f002 f939 	bl	8003e06 <STHS34PF80_GetAmbientTemperatureRaw>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b9a:	f06f 0304 	mvn.w	r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8001ba0:	e006      	b.n	8001bb0 <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x3c>
        ret = BSP_ERROR_NONE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
      break;
 8001ba6:	e003      	b.n	8001bb0 <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8001ba8:	f06f 0301 	mvn.w	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
      break;
 8001bae:	bf00      	nop
  }

  return ret;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200008fc 	.word	0x200008fc

08001bc0 <CUSTOM_ENV_SENSOR_Get_TObjRaw>:
  * @param  Instance the device instance
  * @param  Value the object raw temperature data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_TObjRaw(uint32_t Instance, int16_t *Value)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d111      	bne.n	8001bf4 <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetObjectTemperatureRaw(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x48>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	6839      	ldr	r1, [r7, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 f8fd 	bl	8003dda <STHS34PF80_GetObjectTemperatureRaw>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001be6:	f06f 0304 	mvn.w	r3, #4
 8001bea:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8001bec:	e006      	b.n	8001bfc <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x3c>
        ret = BSP_ERROR_NONE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
      break;
 8001bf2:	e003      	b.n	8001bfc <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8001bf4:	f06f 0301 	mvn.w	r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
      break;
 8001bfa:	bf00      	nop
  }

  return ret;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200008fc 	.word	0x200008fc

08001c0c <CUSTOM_ENV_SENSOR_Get_AvgTmos>:
  * @param  Instance the device instance
  * @param  Value the AvgTmos data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_AvgTmos(uint32_t Instance, uint16_t *Value)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d111      	bne.n	8001c40 <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetAvgTmos(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x48>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	6839      	ldr	r1, [r7, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f002 f930 	bl	8003e8c <STHS34PF80_GetAvgTmos>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c32:	f06f 0304 	mvn.w	r3, #4
 8001c36:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8001c38:	e006      	b.n	8001c48 <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x3c>
        ret = BSP_ERROR_NONE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
      break;
 8001c3e:	e003      	b.n	8001c48 <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8001c40:	f06f 0301 	mvn.w	r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
      break;
 8001c46:	bf00      	nop
  }

  return ret;
 8001c48:	68fb      	ldr	r3, [r7, #12]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200008fc 	.word	0x200008fc

08001c58 <CUSTOM_ENV_SENSOR_Set_AvgTmos>:
  * @param  Instance the device instance
  * @param  Value the AvgTmos data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Set_AvgTmos(uint32_t Instance, uint16_t Value)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d112      	bne.n	8001c90 <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x38>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_SetAvgTmos(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x4c>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	4611      	mov	r1, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 f962 	bl	8003f40 <STHS34PF80_SetAvgTmos>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c82:	f06f 0304 	mvn.w	r3, #4
 8001c86:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8001c88:	e006      	b.n	8001c98 <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x40>
        ret = BSP_ERROR_NONE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
      break;
 8001c8e:	e003      	b.n	8001c98 <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8001c90:	f06f 0301 	mvn.w	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
      break;
 8001c96:	bf00      	nop
  }

  return ret;
 8001c98:	68fb      	ldr	r3, [r7, #12]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200008fc 	.word	0x200008fc

08001ca8 <CUSTOM_ENV_SENSOR_Get_AvgT>:
  * @param  Instance the device instance
  * @param  Value the AvgT data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_AvgT(uint32_t Instance, uint8_t *Value)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d111      	bne.n	8001cdc <CUSTOM_ENV_SENSOR_Get_AvgT+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetAvgT(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <CUSTOM_ENV_SENSOR_Get_AvgT+0x48>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc0:	6839      	ldr	r1, [r7, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 f97e 	bl	8003fc4 <STHS34PF80_GetAvgT>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <CUSTOM_ENV_SENSOR_Get_AvgT+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001cce:	f06f 0304 	mvn.w	r3, #4
 8001cd2:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8001cd4:	e006      	b.n	8001ce4 <CUSTOM_ENV_SENSOR_Get_AvgT+0x3c>
        ret = BSP_ERROR_NONE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
      break;
 8001cda:	e003      	b.n	8001ce4 <CUSTOM_ENV_SENSOR_Get_AvgT+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8001cdc:	f06f 0301 	mvn.w	r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]
      break;
 8001ce2:	bf00      	nop
  }

  return ret;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200008fc 	.word	0x200008fc

08001cf4 <CUSTOM_ENV_SENSOR_Get_GainFactor>:
  * @param  Instance the device instance
  * @param  Value the GainFactor data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_GainFactor(uint32_t Instance, uint8_t *Value)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d111      	bne.n	8001d28 <CUSTOM_ENV_SENSOR_Get_GainFactor+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetGainFactor(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8001d04:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <CUSTOM_ENV_SENSOR_Get_GainFactor+0x48>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0c:	6839      	ldr	r1, [r7, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 f996 	bl	8004040 <STHS34PF80_GetGainFactor>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <CUSTOM_ENV_SENSOR_Get_GainFactor+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d1a:	f06f 0304 	mvn.w	r3, #4
 8001d1e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8001d20:	e006      	b.n	8001d30 <CUSTOM_ENV_SENSOR_Get_GainFactor+0x3c>
        ret = BSP_ERROR_NONE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
      break;
 8001d26:	e003      	b.n	8001d30 <CUSTOM_ENV_SENSOR_Get_GainFactor+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8001d28:	f06f 0301 	mvn.w	r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
      break;
 8001d2e:	bf00      	nop
  }

  return ret;
 8001d30:	68fb      	ldr	r3, [r7, #12]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200008fc 	.word	0x200008fc

08001d40 <CUSTOM_ENV_SENSOR_Get_Sensitivity>:
  * @param  Instance the device instance
  * @param  Value the Sensitivity value
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_Sensitivity(uint32_t Instance, uint16_t *Value)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d111      	bne.n	8001d74 <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetSensitivity(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8001d50:	4a0d      	ldr	r2, [pc, #52]	; (8001d88 <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x48>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	6839      	ldr	r1, [r7, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 f99c 	bl	8004098 <STHS34PF80_GetSensitivity>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d66:	f06f 0304 	mvn.w	r3, #4
 8001d6a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8001d6c:	e006      	b.n	8001d7c <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x3c>
        ret = BSP_ERROR_NONE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
      break;
 8001d72:	e003      	b.n	8001d7c <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8001d74:	f06f 0301 	mvn.w	r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]
      break;
 8001d7a:	bf00      	nop
  }

  return ret;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200008fc 	.word	0x200008fc

08001d8c <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
#ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
#endif
#endif
#endif
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
#endif
#endif
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
#endif
#endif
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
#endif
#endif
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_SENSOR_Init(CUSTOM_TEMP_INSTANCE_0, HYBRID_TEMPERATURE);
#endif
#else
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
 8001dc8:	2101      	movs	r1, #1
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7ff fcca 	bl	8001764 <CUSTOM_ENV_SENSOR_Init>
#endif
#endif
#endif
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
#endif
#endif
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
#ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
#endif
#endif
#endif
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
#endif
#endif
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
#endif
#endif
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
#endif
#endif
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_ENV_SENSOR_Enable(CUSTOM_TEMP_INSTANCE_0, HYBRID_TEMPERATURE);
#endif
#else
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff fd2d 	bl	8001880 <CUSTOM_ENV_SENSOR_Enable>
#endif
#endif
#endif
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
#endif
#endif
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
#ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
#endif
#endif
#endif
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
#endif
#endif
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
#endif
#endif
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
#endif
#endif
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_ENV_SENSOR_Disable(CUSTOM_TEMP_INSTANCE_0, HYBRID_TEMPERATURE);
#endif
#else
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
 8001e74:	2101      	movs	r1, #1
 8001e76:	2000      	movs	r0, #0
 8001e78:	f7ff fd42 	bl	8001900 <CUSTOM_ENV_SENSOR_Disable>
#endif
#endif
#endif
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
#endif
#endif
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <BSP_SENSOR_TEMP_SetOutputDataRate>:
  * @brief  Set output data rate for temperature sensors
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_TEMP_SetOutputDataRate(float Odr)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)CUSTOM_HYBRID_ENV_SENSOR_SetOutputDataRate(CUSTOM_TEMP_INSTANCE_0, HYBRID_TEMPERATURE, Odr);
#endif
#else
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_SetOutputDataRate(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE, Odr);
 8001e98:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff fd6e 	bl	8001980 <CUSTOM_ENV_SENSOR_SetOutputDataRate>
#endif
#endif
#endif
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <BSP_SENSOR_TEMP_GetTAmbRaw>:
  * @brief  Get the TAmbRaw value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetTAmbRaw(int16_t *Value)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_TAmbRaw(CUSTOM_TEMP_INSTANCE_0, Value);
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff fe5c 	bl	8001b74 <CUSTOM_ENV_SENSOR_Get_TAmbRaw>
#endif
#endif
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <BSP_SENSOR_TEMP_GetTObjRaw>:
  * @brief  Get the TObjRaw value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetTObjRaw(int16_t *Value)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_TObjRaw(CUSTOM_TEMP_INSTANCE_0, Value);
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff fe76 	bl	8001bc0 <CUSTOM_ENV_SENSOR_Get_TObjRaw>
#endif
#endif
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <BSP_SENSOR_TEMP_GetAvgTmos>:
  * @brief  Get the AvgTmos value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetAvgTmos(uint16_t *Value)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_AvgTmos(CUSTOM_TEMP_INSTANCE_0, Value);
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff fe90 	bl	8001c0c <CUSTOM_ENV_SENSOR_Get_AvgTmos>
#endif
#endif
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <BSP_SENSOR_TEMP_SetAvgTmos>:
  * @brief  Set the AvgTmos value to infrared temperature sensor
  * @param  Value the value to be written to
  * @retval None
  */
void BSP_SENSOR_TEMP_SetAvgTmos(uint16_t Value)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	80fb      	strh	r3, [r7, #6]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Set_AvgTmos(CUSTOM_TEMP_INSTANCE_0, Value);
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	4619      	mov	r1, r3
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff fea8 	bl	8001c58 <CUSTOM_ENV_SENSOR_Set_AvgTmos>
#endif
#endif
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <BSP_SENSOR_TEMP_GetAvgT>:
  * @brief  Get the AvgT value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetAvgT(uint8_t *Value)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_AvgT(CUSTOM_TEMP_INSTANCE_0, Value);
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f7ff fec4 	bl	8001ca8 <CUSTOM_ENV_SENSOR_Get_AvgT>
#endif
#endif
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <BSP_SENSOR_TEMP_GetGainFactor>:
  * @brief  Get the GainFactor value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetGainFactor(uint8_t *Value)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_GainFactor(CUSTOM_TEMP_INSTANCE_0, Value);
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7ff fede 	bl	8001cf4 <CUSTOM_ENV_SENSOR_Get_GainFactor>
#endif
#endif
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <BSP_SENSOR_TEMP_GetSensitivity>:
  * @brief  Get the Sensitivity value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetSensitivity(uint16_t *Value)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_Sensitivity(CUSTOM_TEMP_INSTANCE_0, Value);
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f7ff fef8 	bl	8001d40 <CUSTOM_ENV_SENSOR_Get_Sensitivity>
#endif
#endif
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <BUILD_REPLY_HEADER>:
  * @brief  Build the reply header
  * @param  Msg the pointer to the message to be built
  * @retval None
  */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	795a      	ldrb	r2, [r3, #5]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2232      	movs	r2, #50	; 0x32
 8001f6c:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	799b      	ldrb	r3, [r3, #6]
 8001f72:	3b80      	subs	r3, #128	; 0x80
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	719a      	strb	r2, [r3, #6]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <INIT_STREAMING_HEADER>:
  * @brief  Initialize the streaming header
  * @param  Msg the pointer to the header to be initialized
  * @retval None
  */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <INIT_STREAMING_HEADER+0x30>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2232      	movs	r2, #50	; 0x32
 8001f9e:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2208      	movs	r2, #8
 8001fa4:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	601a      	str	r2, [r3, #0]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	20000044 	.word	0x20000044

08001fbc <HandleMSG>:
  */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SourceAddr | CMD | PAYLOAD
 *      1          1         1       N
 */
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b098      	sub	sp, #96	; 0x60
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  int ret = 1;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d801      	bhi.n	8001fd8 <HandleMSG+0x1c>
  {
    return 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e357      	b.n	8002688 <HandleMSG+0x6cc>
  }

  if (Msg->Data[0] != DEV_ADDR)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	791b      	ldrb	r3, [r3, #4]
 8001fdc:	2b32      	cmp	r3, #50	; 0x32
 8001fde:	d001      	beq.n	8001fe4 <HandleMSG+0x28>
  {
    return 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e351      	b.n	8002688 <HandleMSG+0x6cc>
  }

  switch (Msg->Data[2])   /* CMD */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	799b      	ldrb	r3, [r3, #6]
 8001fe8:	2b12      	cmp	r3, #18
 8001fea:	dc6b      	bgt.n	80020c4 <HandleMSG+0x108>
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	dc3d      	bgt.n	800206c <HandleMSG+0xb0>
 8001ff0:	e346      	b.n	8002680 <HandleMSG+0x6c4>
 8001ff2:	3b60      	subs	r3, #96	; 0x60
 8001ff4:	2b1a      	cmp	r3, #26
 8001ff6:	f200 8343 	bhi.w	8002680 <HandleMSG+0x6c4>
 8001ffa:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <HandleMSG+0x44>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	08002167 	.word	0x08002167
 8002004:	08002681 	.word	0x08002681
 8002008:	08002195 	.word	0x08002195
 800200c:	08002681 	.word	0x08002681
 8002010:	08002681 	.word	0x08002681
 8002014:	08002681 	.word	0x08002681
 8002018:	08002681 	.word	0x08002681
 800201c:	08002681 	.word	0x08002681
 8002020:	08002681 	.word	0x08002681
 8002024:	08002681 	.word	0x08002681
 8002028:	08002681 	.word	0x08002681
 800202c:	08002681 	.word	0x08002681
 8002030:	08002681 	.word	0x08002681
 8002034:	08002681 	.word	0x08002681
 8002038:	08002681 	.word	0x08002681
 800203c:	08002681 	.word	0x08002681
 8002040:	08002681 	.word	0x08002681
 8002044:	08002681 	.word	0x08002681
 8002048:	08002681 	.word	0x08002681
 800204c:	08002681 	.word	0x08002681
 8002050:	08002681 	.word	0x08002681
 8002054:	08002681 	.word	0x08002681
 8002058:	080021c3 	.word	0x080021c3
 800205c:	08002681 	.word	0x08002681
 8002060:	08002681 	.word	0x08002681
 8002064:	08002681 	.word	0x08002681
 8002068:	080021f1 	.word	0x080021f1
 800206c:	3b01      	subs	r3, #1
 800206e:	2b11      	cmp	r3, #17
 8002070:	f200 8306 	bhi.w	8002680 <HandleMSG+0x6c4>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <HandleMSG+0xc0>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	080020d1 	.word	0x080020d1
 8002080:	0800210b 	.word	0x0800210b
 8002084:	08002681 	.word	0x08002681
 8002088:	08002681 	.word	0x08002681
 800208c:	08002681 	.word	0x08002681
 8002090:	08002681 	.word	0x08002681
 8002094:	08002681 	.word	0x08002681
 8002098:	0800221f 	.word	0x0800221f
 800209c:	080022cb 	.word	0x080022cb
 80020a0:	08002681 	.word	0x08002681
 80020a4:	08002681 	.word	0x08002681
 80020a8:	08002315 	.word	0x08002315
 80020ac:	08002681 	.word	0x08002681
 80020b0:	080020f1 	.word	0x080020f1
 80020b4:	08002681 	.word	0x08002681
 80020b8:	0800235b 	.word	0x0800235b
 80020bc:	080025d1 	.word	0x080025d1
 80020c0:	0800261f 	.word	0x0800261f
 80020c4:	2b7a      	cmp	r3, #122	; 0x7a
 80020c6:	f300 82db 	bgt.w	8002680 <HandleMSG+0x6c4>
 80020ca:	2b60      	cmp	r3, #96	; 0x60
 80020cc:	da91      	bge.n	8001ff2 <HandleMSG+0x36>
 80020ce:	e2d7      	b.n	8002680 <HandleMSG+0x6c4>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d001      	beq.n	80020dc <HandleMSG+0x120>
      {
        return 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	e2d5      	b.n	8002688 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff3b 	bl	8001f58 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2203      	movs	r2, #3
 80020e6:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff f917 	bl	800131c <UART_SendMsg>
      break;
 80020ee:	e2ca      	b.n	8002686 <HandleMSG+0x6ca>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d001      	beq.n	80020fc <HandleMSG+0x140>
      {
        return 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e2c5      	b.n	8002688 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff2b 	bl	8001f58 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2203      	movs	r2, #3
 8002106:	601a      	str	r2, [r3, #0]
      break;
 8002108:	e2bd      	b.n	8002686 <HandleMSG+0x6ca>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d001      	beq.n	8002116 <HandleMSG+0x15a>
      {
        return 0;
 8002112:	2300      	movs	r3, #0
 8002114:	e2b8      	b.n	8002688 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ff1e 	bl	8001f58 <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 800211c:	f107 020c 	add.w	r2, r7, #12
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fb08 	bl	800273c <Get_PresentationString>

      i = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 8002130:	e00d      	b.n	800214e <HandleMSG+0x192>
      {
        Msg->Data[3U + i] = ps[i];
 8002132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002134:	3303      	adds	r3, #3
 8002136:	f107 0110 	add.w	r1, r7, #16
 800213a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800213c:	440a      	add	r2, r1
 800213e:	7811      	ldrb	r1, [r2, #0]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	460a      	mov	r2, r1
 8002146:	711a      	strb	r2, [r3, #4]
        i++;
 8002148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800214a:	3301      	adds	r3, #1
 800214c:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002152:	429a      	cmp	r2, r3
 8002154:	d3ed      	bcc.n	8002132 <HandleMSG+0x176>
      }

      Msg->Len = 3U + i;
 8002156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002158:	1cda      	adds	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff f8dc 	bl	800131c <UART_SendMsg>
      break;
 8002164:	e28f      	b.n	8002686 <HandleMSG+0x6ca>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d801      	bhi.n	8002172 <HandleMSG+0x1b6>
      {
        return 0;
 800216e:	2300      	movs	r3, #0
 8002170:	e28a      	b.n	8002688 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fef0 	bl	8001f58 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3307      	adds	r3, #7
 800217c:	2204      	movs	r2, #4
 800217e:	21ff      	movs	r1, #255	; 0xff
 8002180:	4618      	mov	r0, r3
 8002182:	f000 ffba 	bl	80030fa <Serialize_s32>
      Msg->Len = 3 + 4;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2207      	movs	r2, #7
 800218a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff f8c5 	bl	800131c <UART_SendMsg>
      break;
 8002192:	e278      	b.n	8002686 <HandleMSG+0x6ca>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d801      	bhi.n	80021a0 <HandleMSG+0x1e4>
      {
        return 0;
 800219c:	2300      	movs	r3, #0
 800219e:	e273      	b.n	8002688 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff fed9 	bl	8001f58 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3307      	adds	r3, #7
 80021aa:	2204      	movs	r2, #4
 80021ac:	2106      	movs	r1, #6
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 ffa3 	bl	80030fa <Serialize_s32>
      Msg->Len = 3 + 4;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2207      	movs	r2, #7
 80021b8:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff f8ae 	bl	800131c <UART_SendMsg>
      break;
 80021c0:	e261      	b.n	8002686 <HandleMSG+0x6ca>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d801      	bhi.n	80021ce <HandleMSG+0x212>
      {
        return 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e25c      	b.n	8002688 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff fec2 	bl	8001f58 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3307      	adds	r3, #7
 80021d8:	2204      	movs	r2, #4
 80021da:	21ff      	movs	r1, #255	; 0xff
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 ff8c 	bl	80030fa <Serialize_s32>
      Msg->Len = 3 + 4;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2207      	movs	r2, #7
 80021e6:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff f897 	bl	800131c <UART_SendMsg>
      break;
 80021ee:	e24a      	b.n	8002686 <HandleMSG+0x6ca>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d801      	bhi.n	80021fc <HandleMSG+0x240>
      {
        return 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	e245      	b.n	8002688 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff feab 	bl	8001f58 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3307      	adds	r3, #7
 8002206:	2204      	movs	r2, #4
 8002208:	21ff      	movs	r1, #255	; 0xff
 800220a:	4618      	mov	r0, r3
 800220c:	f000 ff75 	bl	80030fa <Serialize_s32>
      Msg->Len = 3 + 4;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2207      	movs	r2, #7
 8002214:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff f880 	bl	800131c <UART_SendMsg>
      break;
 800221c:	e233      	b.n	8002686 <HandleMSG+0x6ca>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d801      	bhi.n	800222a <HandleMSG+0x26e>
      {
        return 0;
 8002226:	2300      	movs	r3, #0
 8002228:	e22e      	b.n	8002688 <HandleMSG+0x6cc>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3307      	adds	r3, #7
 800222e:	2104      	movs	r1, #4
 8002230:	4618      	mov	r0, r3
 8002232:	f000 ff3c 	bl	80030ae <Deserialize>
 8002236:	4603      	mov	r3, r0
 8002238:	4a4f      	ldr	r2, [pc, #316]	; (8002378 <HandleMSG+0x3bc>)
 800223a:	6013      	str	r3, [r2, #0]
      DiscardSamples = 2;
 800223c:	4b4f      	ldr	r3, [pc, #316]	; (800237c <HandleMSG+0x3c0>)
 800223e:	2202      	movs	r2, #2
 8002240:	701a      	strb	r2, [r3, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 8002242:	4b4d      	ldr	r3, [pc, #308]	; (8002378 <HandleMSG+0x3bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HandleMSG+0x296>
      {
        BSP_SENSOR_PRESS_Enable();
 800224e:	f7ff fddd 	bl	8001e0c <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 8002252:	4b49      	ldr	r3, [pc, #292]	; (8002378 <HandleMSG+0x3bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b02      	cmp	r3, #2
 800225c:	d101      	bne.n	8002262 <HandleMSG+0x2a6>
      {
        BSP_SENSOR_TEMP_Enable();
 800225e:	f7ff fddc 	bl	8001e1a <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 8002262:	4b45      	ldr	r3, [pc, #276]	; (8002378 <HandleMSG+0x3bc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b04      	cmp	r3, #4
 800226c:	d101      	bne.n	8002272 <HandleMSG+0x2b6>
      {
        BSP_SENSOR_HUM_Enable();
 800226e:	f7ff fddc 	bl	8001e2a <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8002272:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HandleMSG+0x3bc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b10      	cmp	r3, #16
 800227c:	d101      	bne.n	8002282 <HandleMSG+0x2c6>
      {
        BSP_SENSOR_ACC_Enable();
 800227e:	f7ff fdb0 	bl	8001de2 <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 8002282:	4b3d      	ldr	r3, [pc, #244]	; (8002378 <HandleMSG+0x3bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b20      	cmp	r3, #32
 800228c:	d101      	bne.n	8002292 <HandleMSG+0x2d6>
      {
        BSP_SENSOR_GYR_Enable();
 800228e:	f7ff fdaf 	bl	8001df0 <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8002292:	4b39      	ldr	r3, [pc, #228]	; (8002378 <HandleMSG+0x3bc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d101      	bne.n	80022a2 <HandleMSG+0x2e6>
      {
        BSP_SENSOR_MAG_Enable();
 800229e:	f7ff fdae 	bl	8001dfe <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 80022a2:	4837      	ldr	r0, [pc, #220]	; (8002380 <HandleMSG+0x3c4>)
 80022a4:	f005 fb72 	bl	800798c <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <HandleMSG+0x3c8>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	795a      	ldrb	r2, [r3, #5]
 80022b2:	4b35      	ldr	r3, [pc, #212]	; (8002388 <HandleMSG+0x3cc>)
 80022b4:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fe4e 	bl	8001f58 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2203      	movs	r2, #3
 80022c0:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff f82a 	bl	800131c <UART_SendMsg>
      break;
 80022c8:	e1dd      	b.n	8002686 <HandleMSG+0x6ca>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d801      	bhi.n	80022d6 <HandleMSG+0x31a>
      {
        return 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e1d8      	b.n	8002688 <HandleMSG+0x6cc>
      }

      DataLoggerActive = 0;
 80022d6:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HandleMSG+0x3c8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 80022dc:	4828      	ldr	r0, [pc, #160]	; (8002380 <HandleMSG+0x3c4>)
 80022de:	f005 fbb7 	bl	8007a50 <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 80022e2:	f7ff fda9 	bl	8001e38 <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 80022e6:	f7ff fdae 	bl	8001e46 <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 80022ea:	f7ff fdb3 	bl	8001e54 <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 80022ee:	f7ff fdb8 	bl	8001e62 <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 80022f2:	f7ff fdbd 	bl	8001e70 <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 80022f6:	f7ff fdc3 	bl	8001e80 <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <HandleMSG+0x3bc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 8002300:	4b22      	ldr	r3, [pc, #136]	; (800238c <HandleMSG+0x3d0>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fe26 	bl	8001f58 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff f805 	bl	800131c <UART_SendMsg>
      break;
 8002312:	e1b8      	b.n	8002686 <HandleMSG+0x6ca>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d801      	bhi.n	8002320 <HandleMSG+0x364>
      {
        return 0;
 800231c:	2300      	movs	r3, #0
 800231e:	e1b3      	b.n	8002688 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fe19 	bl	8001f58 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2203      	movs	r2, #3
 800232a:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	79d8      	ldrb	r0, [r3, #7]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	7a19      	ldrb	r1, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7a5b      	ldrb	r3, [r3, #9]
 8002338:	461a      	mov	r2, r3
 800233a:	f000 f9d5 	bl	80026e8 <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7a98      	ldrb	r0, [r3, #10]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7ad9      	ldrb	r1, [r3, #11]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7b1a      	ldrb	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7b5b      	ldrb	r3, [r3, #13]
 800234e:	f000 f9a1 	bl	8002694 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe ffe2 	bl	800131c <UART_SendMsg>
      break;
 8002358:	e195      	b.n	8002686 <HandleMSG+0x6ca>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b36      	cmp	r3, #54	; 0x36
 8002360:	d801      	bhi.n	8002366 <HandleMSG+0x3aa>
      {
        return 0;
 8002362:	2300      	movs	r3, #0
 8002364:	e190      	b.n	8002688 <HandleMSG+0x6cc>
      }

      msg_offset = 4;
 8002366:	2304      	movs	r3, #4
 8002368:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	79db      	ldrb	r3, [r3, #7]
 800236e:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 8002370:	2300      	movs	r3, #0
 8002372:	65bb      	str	r3, [r7, #88]	; 0x58
 8002374:	e11d      	b.n	80025b2 <HandleMSG+0x5f6>
 8002376:	bf00      	nop
 8002378:	200000f8 	.word	0x200000f8
 800237c:	200002dc 	.word	0x200002dc
 8002380:	20000a10 	.word	0x20000a10
 8002384:	200000f5 	.word	0x200000f5
 8002388:	20000044 	.word	0x20000044
 800238c:	20000125 	.word	0x20000125
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 8002390:	4ba6      	ldr	r3, [pc, #664]	; (800262c <HandleMSG+0x670>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2234      	movs	r2, #52	; 0x34
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	4aa5      	ldr	r2, [pc, #660]	; (8002630 <HandleMSG+0x674>)
 800239c:	4413      	add	r3, r2
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023a2:	440a      	add	r2, r1
 80023a4:	3204      	adds	r2, #4
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 80023aa:	4ba0      	ldr	r3, [pc, #640]	; (800262c <HandleMSG+0x670>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2234      	movs	r2, #52	; 0x34
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	4a9e      	ldr	r2, [pc, #632]	; (8002630 <HandleMSG+0x674>)
 80023b6:	4413      	add	r3, r2
 80023b8:	3301      	adds	r3, #1
 80023ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023bc:	3201      	adds	r2, #1
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	440a      	add	r2, r1
 80023c2:	3204      	adds	r2, #4
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 80023c8:	4b98      	ldr	r3, [pc, #608]	; (800262c <HandleMSG+0x670>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2234      	movs	r2, #52	; 0x34
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	4a97      	ldr	r2, [pc, #604]	; (8002630 <HandleMSG+0x674>)
 80023d4:	4413      	add	r3, r2
 80023d6:	3302      	adds	r3, #2
 80023d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023da:	3202      	adds	r2, #2
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	440a      	add	r2, r1
 80023e0:	3204      	adds	r2, #4
 80023e2:	7812      	ldrb	r2, [r2, #0]
 80023e4:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 80023e6:	4b91      	ldr	r3, [pc, #580]	; (800262c <HandleMSG+0x670>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2234      	movs	r2, #52	; 0x34
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	4a8f      	ldr	r2, [pc, #572]	; (8002630 <HandleMSG+0x674>)
 80023f2:	4413      	add	r3, r2
 80023f4:	3303      	adds	r3, #3
 80023f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023f8:	3203      	adds	r2, #3
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	440a      	add	r2, r1
 80023fe:	3204      	adds	r2, #4
 8002400:	7812      	ldrb	r2, [r2, #0]
 8002402:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 8002404:	4b89      	ldr	r3, [pc, #548]	; (800262c <HandleMSG+0x670>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2234      	movs	r2, #52	; 0x34
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	4a88      	ldr	r2, [pc, #544]	; (8002630 <HandleMSG+0x674>)
 8002410:	4413      	add	r3, r2
 8002412:	3304      	adds	r3, #4
 8002414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002416:	3204      	adds	r2, #4
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	440a      	add	r2, r1
 800241c:	3204      	adds	r2, #4
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 8002422:	4b82      	ldr	r3, [pc, #520]	; (800262c <HandleMSG+0x670>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2234      	movs	r2, #52	; 0x34
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	3308      	adds	r3, #8
 800242e:	4a80      	ldr	r2, [pc, #512]	; (8002630 <HandleMSG+0x674>)
 8002430:	4413      	add	r3, r2
 8002432:	3304      	adds	r3, #4
 8002434:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002436:	3208      	adds	r2, #8
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	440a      	add	r2, r1
 800243c:	3204      	adds	r2, #4
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 8002442:	4b7a      	ldr	r3, [pc, #488]	; (800262c <HandleMSG+0x670>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2234      	movs	r2, #52	; 0x34
 8002448:	fb02 f303 	mul.w	r3, r2, r3
 800244c:	3308      	adds	r3, #8
 800244e:	4a78      	ldr	r2, [pc, #480]	; (8002630 <HandleMSG+0x674>)
 8002450:	4413      	add	r3, r2
 8002452:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002454:	320c      	adds	r2, #12
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	440a      	add	r2, r1
 800245a:	3204      	adds	r2, #4
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 8002460:	4b72      	ldr	r3, [pc, #456]	; (800262c <HandleMSG+0x670>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2234      	movs	r2, #52	; 0x34
 8002466:	fb02 f303 	mul.w	r3, r2, r3
 800246a:	3310      	adds	r3, #16
 800246c:	4a70      	ldr	r2, [pc, #448]	; (8002630 <HandleMSG+0x674>)
 800246e:	4413      	add	r3, r2
 8002470:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002472:	3210      	adds	r2, #16
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	440a      	add	r2, r1
 8002478:	3204      	adds	r2, #4
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 800247e:	4b6b      	ldr	r3, [pc, #428]	; (800262c <HandleMSG+0x670>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2234      	movs	r2, #52	; 0x34
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	3310      	adds	r3, #16
 800248a:	4a69      	ldr	r2, [pc, #420]	; (8002630 <HandleMSG+0x674>)
 800248c:	4413      	add	r3, r2
 800248e:	3304      	adds	r3, #4
 8002490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002492:	3214      	adds	r2, #20
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	440a      	add	r2, r1
 8002498:	3204      	adds	r2, #4
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <HandleMSG+0x670>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2234      	movs	r2, #52	; 0x34
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	3318      	adds	r3, #24
 80024aa:	4a61      	ldr	r2, [pc, #388]	; (8002630 <HandleMSG+0x674>)
 80024ac:	4413      	add	r3, r2
 80024ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024b0:	3218      	adds	r2, #24
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	440a      	add	r2, r1
 80024b6:	3204      	adds	r2, #4
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 80024bc:	4b5b      	ldr	r3, [pc, #364]	; (800262c <HandleMSG+0x670>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2234      	movs	r2, #52	; 0x34
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	3318      	adds	r3, #24
 80024c8:	4a59      	ldr	r2, [pc, #356]	; (8002630 <HandleMSG+0x674>)
 80024ca:	4413      	add	r3, r2
 80024cc:	3304      	adds	r3, #4
 80024ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024d0:	321c      	adds	r2, #28
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	440a      	add	r2, r1
 80024d6:	3204      	adds	r2, #4
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 80024dc:	4b53      	ldr	r3, [pc, #332]	; (800262c <HandleMSG+0x670>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2234      	movs	r2, #52	; 0x34
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	3320      	adds	r3, #32
 80024e8:	4a51      	ldr	r2, [pc, #324]	; (8002630 <HandleMSG+0x674>)
 80024ea:	4413      	add	r3, r2
 80024ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024ee:	3220      	adds	r2, #32
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	440a      	add	r2, r1
 80024f4:	3204      	adds	r2, #4
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 80024fa:	4b4c      	ldr	r3, [pc, #304]	; (800262c <HandleMSG+0x670>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2234      	movs	r2, #52	; 0x34
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	3320      	adds	r3, #32
 8002506:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <HandleMSG+0x674>)
 8002508:	4413      	add	r3, r2
 800250a:	3304      	adds	r3, #4
 800250c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800250e:	3224      	adds	r2, #36	; 0x24
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	440a      	add	r2, r1
 8002514:	3204      	adds	r2, #4
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 800251a:	4b44      	ldr	r3, [pc, #272]	; (800262c <HandleMSG+0x670>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2234      	movs	r2, #52	; 0x34
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	3328      	adds	r3, #40	; 0x28
 8002526:	4a42      	ldr	r2, [pc, #264]	; (8002630 <HandleMSG+0x674>)
 8002528:	4413      	add	r3, r2
 800252a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800252c:	3228      	adds	r2, #40	; 0x28
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	440a      	add	r2, r1
 8002532:	3204      	adds	r2, #4
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 8002538:	4b3c      	ldr	r3, [pc, #240]	; (800262c <HandleMSG+0x670>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2234      	movs	r2, #52	; 0x34
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	3328      	adds	r3, #40	; 0x28
 8002544:	4a3a      	ldr	r2, [pc, #232]	; (8002630 <HandleMSG+0x674>)
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800254c:	322c      	adds	r2, #44	; 0x2c
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	440a      	add	r2, r1
 8002552:	3204      	adds	r2, #4
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 8002558:	4b34      	ldr	r3, [pc, #208]	; (800262c <HandleMSG+0x670>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2234      	movs	r2, #52	; 0x34
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	3330      	adds	r3, #48	; 0x30
 8002564:	4a32      	ldr	r2, [pc, #200]	; (8002630 <HandleMSG+0x674>)
 8002566:	4413      	add	r3, r2
 8002568:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800256a:	3230      	adds	r2, #48	; 0x30
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	440a      	add	r2, r1
 8002570:	3204      	adds	r2, #4
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 8002576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002578:	3334      	adds	r3, #52	; 0x34
 800257a:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HandleMSG+0x678>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	4a2c      	ldr	r2, [pc, #176]	; (8002634 <HandleMSG+0x678>)
 8002584:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 8002586:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HandleMSG+0x678>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b08      	cmp	r3, #8
 800258c:	dd02      	ble.n	8002594 <HandleMSG+0x5d8>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 800258e:	4b29      	ldr	r3, [pc, #164]	; (8002634 <HandleMSG+0x678>)
 8002590:	2208      	movs	r2, #8
 8002592:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HandleMSG+0x670>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	4a24      	ldr	r2, [pc, #144]	; (800262c <HandleMSG+0x670>)
 800259c:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 800259e:	4b23      	ldr	r3, [pc, #140]	; (800262c <HandleMSG+0x670>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b07      	cmp	r3, #7
 80025a4:	dd02      	ble.n	80025ac <HandleMSG+0x5f0>
        {
          OfflineDataWriteIndex = 0;
 80025a6:	4b21      	ldr	r3, [pc, #132]	; (800262c <HandleMSG+0x670>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 80025ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ae:	3301      	adds	r3, #1
 80025b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80025b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b6:	429a      	cmp	r2, r3
 80025b8:	f4ff aeea 	bcc.w	8002390 <HandleMSG+0x3d4>
        }
      }

      SensorReadRequest = 1;
 80025bc:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HandleMSG+0x67c>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fcc8 	bl	8001f58 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2203      	movs	r2, #3
 80025cc:	601a      	str	r2, [r3, #0]
      break;
 80025ce:	e05a      	b.n	8002686 <HandleMSG+0x6ca>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d801      	bhi.n	80025dc <HandleMSG+0x620>
      {
        return 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	e055      	b.n	8002688 <HandleMSG+0x6cc>
      }

      if (Msg->Data[3] == 1U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	79db      	ldrb	r3, [r3, #7]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d10e      	bne.n	8002602 <HandleMSG+0x646>
      {
        UseOfflineData = 1U;
 80025e4:	4b15      	ldr	r3, [pc, #84]	; (800263c <HandleMSG+0x680>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HandleMSG+0x684>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a15      	ldr	r2, [pc, #84]	; (8002644 <HandleMSG+0x688>)
 80025f0:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <HandleMSG+0x684>)
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 80025fa:	4813      	ldr	r0, [pc, #76]	; (8002648 <HandleMSG+0x68c>)
 80025fc:	f005 fa28 	bl	8007a50 <HAL_TIM_Base_Stop_IT>
 8002600:	e006      	b.n	8002610 <HandleMSG+0x654>
      }
      else
      {
        UseOfflineData = 0U;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <HandleMSG+0x680>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HandleMSG+0x688>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0c      	ldr	r2, [pc, #48]	; (8002640 <HandleMSG+0x684>)
 800260e:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff fca1 	bl	8001f58 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe fe80 	bl	800131c <UART_SendMsg>
      break;
 800261c:	e033      	b.n	8002686 <HandleMSG+0x6ca>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d812      	bhi.n	800264c <HandleMSG+0x690>
      {
        return 0;
 8002626:	2300      	movs	r3, #0
 8002628:	e02e      	b.n	8002688 <HandleMSG+0x6cc>
 800262a:	bf00      	nop
 800262c:	200002cc 	.word	0x200002cc
 8002630:	20000128 	.word	0x20000128
 8002634:	200002d0 	.word	0x200002d0
 8002638:	20000124 	.word	0x20000124
 800263c:	20000125 	.word	0x20000125
 8002640:	200000f8 	.word	0x200000f8
 8002644:	20000950 	.word	0x20000950
 8002648:	20000a10 	.word	0x20000a10
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3307      	adds	r3, #7
 8002650:	4a0f      	ldr	r2, [pc, #60]	; (8002690 <HandleMSG+0x6d4>)
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	4611      	mov	r1, r2
 8002656:	2204      	movs	r2, #4
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fd4e 	bl	80030fa <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	330b      	adds	r3, #11
 8002662:	2201      	movs	r2, #1
 8002664:	2102      	movs	r1, #2
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fd47 	bl	80030fa <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff fc73 	bl	8001f58 <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2208      	movs	r2, #8
 8002676:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7fe fe4f 	bl	800131c <UART_SendMsg>
      break;
 800267e:	e002      	b.n	8002686 <HandleMSG+0x6ca>

    default:
      ret = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8002684:	bf00      	nop
  }

  return ret;
 8002686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8002688:	4618      	mov	r0, r3
 800268a:	3760      	adds	r7, #96	; 0x60
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000000 	.word	0x20000000

08002694 <RTC_DateRegulate>:
  * @param  d the day value to be set
  * @param  dw the day-week value to be set
  * @retval None
  */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	4604      	mov	r4, r0
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4623      	mov	r3, r4
 80026a4:	71fb      	strb	r3, [r7, #7]
 80026a6:	4603      	mov	r3, r0
 80026a8:	71bb      	strb	r3, [r7, #6]
 80026aa:	460b      	mov	r3, r1
 80026ac:	717b      	strb	r3, [r7, #5]
 80026ae:	4613      	mov	r3, r2
 80026b0:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 80026b6:	79bb      	ldrb	r3, [r7, #6]
 80026b8:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 80026ba:	797b      	ldrb	r3, [r7, #5]
 80026bc:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 80026be:	793b      	ldrb	r3, [r7, #4]
 80026c0:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 80026c2:	f107 030c 	add.w	r3, r7, #12
 80026c6:	2200      	movs	r2, #0
 80026c8:	4619      	mov	r1, r3
 80026ca:	4806      	ldr	r0, [pc, #24]	; (80026e4 <RTC_DateRegulate+0x50>)
 80026cc:	f004 ff7e 	bl	80075cc <HAL_RTC_SetDate>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 80026d6:	f000 fc11 	bl	8002efc <Error_Handler>
  }
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd90      	pop	{r4, r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200009a8 	.word	0x200009a8

080026e8 <RTC_TimeRegulate>:
  * @param  mm the minute value to be set
  * @param  ss the second value to be set
  * @retval None
  */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
 80026f2:	460b      	mov	r3, r1
 80026f4:	71bb      	strb	r3, [r7, #6]
 80026f6:	4613      	mov	r3, r2
 80026f8:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 80026fe:	79bb      	ldrb	r3, [r7, #6]
 8002700:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 8002702:	797b      	ldrb	r3, [r7, #5]
 8002704:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 8002716:	f107 030c 	add.w	r3, r7, #12
 800271a:	2200      	movs	r2, #0
 800271c:	4619      	mov	r1, r3
 800271e:	4806      	ldr	r0, [pc, #24]	; (8002738 <RTC_TimeRegulate+0x50>)
 8002720:	f004 fe5c 	bl	80073dc <HAL_RTC_SetTime>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 800272a:	f000 fbe7 	bl	8002efc <Error_Handler>
  }
}
 800272e:	bf00      	nop
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200009a8 	.word	0x200009a8

0800273c <Get_PresentationString>:
  * @param  PresentationString the Presentation string
  * @param  Length the length of Presentation string
  * @retval None
  */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 800273c:	b5b0      	push	{r4, r5, r7, lr}
 800273e:	b0a0      	sub	sp, #128	; 0x80
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST InfraredXX v"); /* Shift string pointer by this amount */
 8002746:	230f      	movs	r3, #15
 8002748:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
  const char ps[] = {"MEMS shield demo,29,"FW_VERSION",%s,"BOARD_NAME};
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <Get_PresentationString+0x7c>)
 8002752:	f107 040c 	add.w	r4, r7, #12
 8002756:	461d      	mov	r5, r3
 8002758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002760:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002764:	6020      	str	r0, [r4, #0]
 8002766:	3404      	adds	r4, #4
 8002768:	7021      	strb	r1, [r4, #0]

  InfraredPD_manager_get_version(lib_version_string, &lib_version_len);
 800276a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800276e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f000 f86f 	bl	8002858 <InfraredPD_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0 resp. ST InfraredXX v1.0.0 resp. ST EnvXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 800277a:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	429a      	cmp	r2, r3
 8002782:	da06      	bge.n	8002792 <Get_PresentationString+0x56>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 8002784:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002788:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800278c:	4413      	add	r3, r2
 800278e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002790:	e002      	b.n	8002798 <Get_PresentationString+0x5c>
  }
  else
  {
    lib_version_num = lib_version_string;
 8002792:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002796:	67fb      	str	r3, [r7, #124]	; 0x7c
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 8002798:	f107 020c 	add.w	r2, r7, #12
 800279c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800279e:	2140      	movs	r1, #64	; 0x40
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f007 fdb3 	bl	800a30c <sniprintf>
 80027a6:	4603      	mov	r3, r0
 80027a8:	461a      	mov	r2, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	601a      	str	r2, [r3, #0]
}
 80027ae:	bf00      	nop
 80027b0:	3780      	adds	r7, #128	; 0x80
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bdb0      	pop	{r4, r5, r7, pc}
 80027b6:	bf00      	nop
 80027b8:	0800ae28 	.word	0x0800ae28

080027bc <InfraredPD_manager_init>:
  * @brief  Initialize the InfraredPD engine
  * @param  None
  * @retval None
  */
void InfraredPD_manager_init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
  IPD_device_conf_t device_conf;
  IPD_algo_conf_t algo_conf;

  InfraredPD_Initialize(IPD_MCU_STM32);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f006 fecc 	bl	8009560 <InfraredPD_Initialize>

  device_conf.odr = Odr;
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <InfraredPD_manager_init+0x60>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	733b      	strb	r3, [r7, #12]
  device_conf.avg_tmos = AvgTmos;
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <InfraredPD_manager_init+0x64>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	81fb      	strh	r3, [r7, #14]
  device_conf.avg_t = AvgT;
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <InfraredPD_manager_init+0x68>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	743b      	strb	r3, [r7, #16]
  device_conf.gain_factor = GainFactor;
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <InfraredPD_manager_init+0x6c>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	747b      	strb	r3, [r7, #17]
  device_conf.sens_data = Sensitivity;
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <InfraredPD_manager_init+0x70>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	827b      	strh	r3, [r7, #18]
  device_conf.transmittance = 1.0f; /* 1.0f if no optical system is used */
 80027e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80027ea:	617b      	str	r3, [r7, #20]

  IPD_Instance = InfraredPD_CreateInstance(&algo_conf);
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	4618      	mov	r0, r3
 80027f0:	f006 ff52 	bl	8009698 <InfraredPD_CreateInstance>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <InfraredPD_manager_init+0x74>)
 80027f8:	6013      	str	r3, [r2, #0]

  /* User can modify the algo_conf settings here */

  if (InfraredPD_Start(IPD_Instance, &device_conf, &algo_conf) != IPD_INIT_OK)
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <InfraredPD_manager_init+0x74>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	1d3a      	adds	r2, r7, #4
 8002800:	f107 010c 	add.w	r1, r7, #12
 8002804:	4618      	mov	r0, r3
 8002806:	f006 ff61 	bl	80096cc <InfraredPD_Start>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d000      	beq.n	8002812 <InfraredPD_manager_init+0x56>
  {
    for (;;)
 8002810:	e7fe      	b.n	8002810 <InfraredPD_manager_init+0x54>
    {
      /* The library was not correctly started */
    }
  }
}
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200002d4 	.word	0x200002d4
 8002820:	200002d6 	.word	0x200002d6
 8002824:	200002d8 	.word	0x200002d8
 8002828:	200002d9 	.word	0x200002d9
 800282c:	200002da 	.word	0x200002da
 8002830:	20000954 	.word	0x20000954

08002834 <InfraredPD_manager_run>:
  * @param  data_in  Structure containing input data
  * @param  data_out Structure containing output data
  * @retval None
  */
void InfraredPD_manager_run(IPD_input_t *data_in, IPD_output_t *data_out)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  InfraredPD_Update(IPD_Instance, data_in, data_out);
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <InfraredPD_manager_run+0x20>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4618      	mov	r0, r3
 8002848:	f007 f932 	bl	8009ab0 <InfraredPD_Update>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000954 	.word	0x20000954

08002858 <InfraredPD_manager_get_version>:
  * @param  version Library version string (must be array of 35 char)
  * @param  length  Library version string length
  * @retval None
  */
void InfraredPD_manager_get_version(char *version, int *length)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  *length = (int)InfraredPD_GetLibVersion(version);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f007 fc6c 	bl	800a140 <InfraredPD_GetLibVersion>
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	601a      	str	r2, [r3, #0]
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800287c:	f001 ffa0 	bl	80047c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002880:	f000 f834 	bl	80028ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002884:	f000 fa34 	bl	8002cf0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002888:	f000 fa12 	bl	8002cb0 <MX_DMA_Init>
  MX_CRC_Init();
 800288c:	f000 f8de 	bl	8002a4c <MX_CRC_Init>
  MX_RTC_Init();
 8002890:	f000 f8f0 	bl	8002a74 <MX_RTC_Init>
  MX_TIM2_Init();
 8002894:	f000 f948 	bl	8002b28 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002898:	f000 f896 	bl	80029c8 <MX_ADC1_Init>
  MX_MEMS_Init();
 800289c:	f7fe fa05 	bl	8000caa <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 80028a0:	f7fe fa0a 	bl	8000cb8 <MX_MEMS_Process>
    /* USER CODE BEGIN 3 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80028a4:	2100      	movs	r1, #0
 80028a6:	480d      	ldr	r0, [pc, #52]	; (80028dc <main+0x64>)
 80028a8:	f005 f95a 	bl	8007b60 <HAL_TIM_PWM_Start>

  pulseYellowLED();
 80028ac:	f000 fac6 	bl	8002e3c <pulseYellowLED>

  if (personFlag == 1){
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <main+0x68>)
 80028b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d10a      	bne.n	80028d0 <main+0x58>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80028ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028be:	4809      	ldr	r0, [pc, #36]	; (80028e4 <main+0x6c>)
 80028c0:	f002 ff33 	bl	800572a <HAL_GPIO_TogglePin>
	  HAL_Delay(0.001); // might be able to remove depending on time of execution of other code.
 80028c4:	2000      	movs	r0, #0
 80028c6:	f001 ffed 	bl	80048a4 <HAL_Delay>
	  blinkRed();
 80028ca:	f000 fafd 	bl	8002ec8 <blinkRed>
 80028ce:	e7e7      	b.n	80028a0 <main+0x28>
  } else {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80028d0:	2200      	movs	r2, #0
 80028d2:	2120      	movs	r1, #32
 80028d4:	4804      	ldr	r0, [pc, #16]	; (80028e8 <main+0x70>)
 80028d6:	f002 ff0f 	bl	80056f8 <HAL_GPIO_WritePin>
  {
 80028da:	e7e1      	b.n	80028a0 <main+0x28>
 80028dc:	20000a10 	.word	0x20000a10
 80028e0:	20000a58 	.word	0x20000a58
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40020400 	.word	0x40020400

080028ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b094      	sub	sp, #80	; 0x50
 80028f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028f2:	f107 0320 	add.w	r3, r7, #32
 80028f6:	2230      	movs	r2, #48	; 0x30
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f007 fd3a 	bl	800a374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <SystemClock_Config+0xd4>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	4a29      	ldr	r2, [pc, #164]	; (80029c0 <SystemClock_Config+0xd4>)
 800291a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291e:	6413      	str	r3, [r2, #64]	; 0x40
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <SystemClock_Config+0xd4>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800292c:	2300      	movs	r3, #0
 800292e:	607b      	str	r3, [r7, #4]
 8002930:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <SystemClock_Config+0xd8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002938:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <SystemClock_Config+0xd8>)
 800293a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <SystemClock_Config+0xd8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800294c:	230a      	movs	r3, #10
 800294e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002950:	2301      	movs	r3, #1
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002954:	2310      	movs	r3, #16
 8002956:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002958:	2301      	movs	r3, #1
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800295c:	2302      	movs	r3, #2
 800295e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002960:	2300      	movs	r3, #0
 8002962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002964:	2310      	movs	r3, #16
 8002966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002968:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800296c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800296e:	2304      	movs	r3, #4
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002972:	2307      	movs	r3, #7
 8002974:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002976:	f107 0320 	add.w	r3, r7, #32
 800297a:	4618      	mov	r0, r3
 800297c:	f003 ff32 	bl	80067e4 <HAL_RCC_OscConfig>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002986:	f000 fab9 	bl	8002efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800298a:	230f      	movs	r3, #15
 800298c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800298e:	2302      	movs	r3, #2
 8002990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	2102      	movs	r1, #2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f004 f994 	bl	8006cd4 <HAL_RCC_ClockConfig>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80029b2:	f000 faa3 	bl	8002efc <Error_Handler>
  }
}
 80029b6:	bf00      	nop
 80029b8:	3750      	adds	r7, #80	; 0x50
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40007000 	.word	0x40007000

080029c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029ce:	463b      	mov	r3, r7
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <MX_ADC1_Init+0x78>)
 80029dc:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <MX_ADC1_Init+0x7c>)
 80029de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029e0:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <MX_ADC1_Init+0x78>)
 80029e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029e8:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <MX_ADC1_Init+0x78>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <MX_ADC1_Init+0x78>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <MX_ADC1_Init+0x78>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <MX_ADC1_Init+0x78>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a02:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <MX_ADC1_Init+0x78>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <MX_ADC1_Init+0x78>)
 8002a0a:	4a0f      	ldr	r2, [pc, #60]	; (8002a48 <MX_ADC1_Init+0x80>)
 8002a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <MX_ADC1_Init+0x78>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <MX_ADC1_Init+0x78>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <MX_ADC1_Init+0x78>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a22:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <MX_ADC1_Init+0x78>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	615a      	str	r2, [r3, #20]
//    Error_Handler();
//  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	20000958 	.word	0x20000958
 8002a44:	40012000 	.word	0x40012000
 8002a48:	0f000001 	.word	0x0f000001

08002a4c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <MX_CRC_Init+0x20>)
 8002a52:	4a07      	ldr	r2, [pc, #28]	; (8002a70 <MX_CRC_Init+0x24>)
 8002a54:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <MX_CRC_Init+0x20>)
 8002a58:	f002 f859 	bl	8004b0e <HAL_CRC_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002a62:	f000 fa4b 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200009a0 	.word	0x200009a0
 8002a70:	40023000 	.word	0x40023000

08002a74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002a88:	2300      	movs	r3, #0
 8002a8a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a8c:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <MX_RTC_Init+0xac>)
 8002a8e:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <MX_RTC_Init+0xb0>)
 8002a90:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <MX_RTC_Init+0xac>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <MX_RTC_Init+0xac>)
 8002a9a:	227f      	movs	r2, #127	; 0x7f
 8002a9c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <MX_RTC_Init+0xac>)
 8002aa0:	22ff      	movs	r2, #255	; 0xff
 8002aa2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <MX_RTC_Init+0xac>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <MX_RTC_Init+0xac>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <MX_RTC_Init+0xac>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ab6:	481a      	ldr	r0, [pc, #104]	; (8002b20 <MX_RTC_Init+0xac>)
 8002ab8:	f004 fc1a 	bl	80072f0 <HAL_RTC_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002ac2:	f000 fa1b 	bl	8002efc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	2201      	movs	r2, #1
 8002ade:	4619      	mov	r1, r3
 8002ae0:	480f      	ldr	r0, [pc, #60]	; (8002b20 <MX_RTC_Init+0xac>)
 8002ae2:	f004 fc7b 	bl	80073dc <HAL_RTC_SetTime>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002aec:	f000 fa06 	bl	8002efc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002af0:	2301      	movs	r3, #1
 8002af2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002af4:	2301      	movs	r3, #1
 8002af6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002af8:	2301      	movs	r3, #1
 8002afa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b00:	463b      	mov	r3, r7
 8002b02:	2201      	movs	r2, #1
 8002b04:	4619      	mov	r1, r3
 8002b06:	4806      	ldr	r0, [pc, #24]	; (8002b20 <MX_RTC_Init+0xac>)
 8002b08:	f004 fd60 	bl	80075cc <HAL_RTC_SetDate>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002b12:	f000 f9f3 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b16:	bf00      	nop
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200009a8 	.word	0x200009a8
 8002b24:	40002800 	.word	0x40002800

08002b28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3c:	463b      	mov	r3, r7
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <MX_TIM2_Init+0x94>)
 8002b46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <MX_TIM2_Init+0x94>)
 8002b4e:	220f      	movs	r2, #15
 8002b50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <MX_TIM2_Init+0x94>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <MX_TIM2_Init+0x94>)
 8002b5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b60:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <MX_TIM2_Init+0x94>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <MX_TIM2_Init+0x94>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b6c:	4813      	ldr	r0, [pc, #76]	; (8002bbc <MX_TIM2_Init+0x94>)
 8002b6e:	f004 febd 	bl	80078ec <HAL_TIM_Base_Init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b78:	f000 f9c0 	bl	8002efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b82:	f107 0308 	add.w	r3, r7, #8
 8002b86:	4619      	mov	r1, r3
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <MX_TIM2_Init+0x94>)
 8002b8a:	f005 fa63 	bl	8008054 <HAL_TIM_ConfigClockSource>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002b94:	f000 f9b2 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ba0:	463b      	mov	r3, r7
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4805      	ldr	r0, [pc, #20]	; (8002bbc <MX_TIM2_Init+0x94>)
 8002ba6:	f005 fe11 	bl	80087cc <HAL_TIMEx_MasterConfigSynchronization>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002bb0:	f000 f9a4 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bb4:	bf00      	nop
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	200009c8 	.word	0x200009c8

08002bc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08e      	sub	sp, #56	; 0x38
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd4:	f107 0320 	add.w	r3, r7, #32
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
 8002bec:	615a      	str	r2, [r3, #20]
 8002bee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <MX_TIM3_Init+0xe8>)
 8002bf2:	4a2e      	ldr	r2, [pc, #184]	; (8002cac <MX_TIM3_Init+0xec>)
 8002bf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <MX_TIM3_Init+0xe8>)
 8002bf8:	f240 3247 	movw	r2, #839	; 0x347
 8002bfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <MX_TIM3_Init+0xe8>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8002c04:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <MX_TIM3_Init+0xe8>)
 8002c06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0c:	4b26      	ldr	r3, [pc, #152]	; (8002ca8 <MX_TIM3_Init+0xe8>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c12:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <MX_TIM3_Init+0xe8>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c18:	4823      	ldr	r0, [pc, #140]	; (8002ca8 <MX_TIM3_Init+0xe8>)
 8002c1a:	f004 fe67 	bl	80078ec <HAL_TIM_Base_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002c24:	f000 f96a 	bl	8002efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c32:	4619      	mov	r1, r3
 8002c34:	481c      	ldr	r0, [pc, #112]	; (8002ca8 <MX_TIM3_Init+0xe8>)
 8002c36:	f005 fa0d 	bl	8008054 <HAL_TIM_ConfigClockSource>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002c40:	f000 f95c 	bl	8002efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c44:	4818      	ldr	r0, [pc, #96]	; (8002ca8 <MX_TIM3_Init+0xe8>)
 8002c46:	f004 ff32 	bl	8007aae <HAL_TIM_PWM_Init>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002c50:	f000 f954 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c54:	2300      	movs	r3, #0
 8002c56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c5c:	f107 0320 	add.w	r3, r7, #32
 8002c60:	4619      	mov	r1, r3
 8002c62:	4811      	ldr	r0, [pc, #68]	; (8002ca8 <MX_TIM3_Init+0xe8>)
 8002c64:	f005 fdb2 	bl	80087cc <HAL_TIMEx_MasterConfigSynchronization>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002c6e:	f000 f945 	bl	8002efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c72:	2360      	movs	r3, #96	; 0x60
 8002c74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	4619      	mov	r1, r3
 8002c88:	4807      	ldr	r0, [pc, #28]	; (8002ca8 <MX_TIM3_Init+0xe8>)
 8002c8a:	f005 f921 	bl	8007ed0 <HAL_TIM_PWM_ConfigChannel>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002c94:	f000 f932 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c98:	4803      	ldr	r0, [pc, #12]	; (8002ca8 <MX_TIM3_Init+0xe8>)
 8002c9a:	f000 fb0d 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8002c9e:	bf00      	nop
 8002ca0:	3738      	adds	r7, #56	; 0x38
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000a10 	.word	0x20000a10
 8002cac:	40000400 	.word	0x40000400

08002cb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <MX_DMA_Init+0x3c>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <MX_DMA_Init+0x3c>)
 8002cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <MX_DMA_Init+0x3c>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	2010      	movs	r0, #16
 8002cd8:	f001 fee3 	bl	8004aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002cdc:	2010      	movs	r0, #16
 8002cde:	f001 fefc 	bl	8004ada <HAL_NVIC_EnableIRQ>

}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800

08002cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf6:	f107 0314 	add.w	r3, r7, #20
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	4b48      	ldr	r3, [pc, #288]	; (8002e2c <MX_GPIO_Init+0x13c>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a47      	ldr	r2, [pc, #284]	; (8002e2c <MX_GPIO_Init+0x13c>)
 8002d10:	f043 0304 	orr.w	r3, r3, #4
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b45      	ldr	r3, [pc, #276]	; (8002e2c <MX_GPIO_Init+0x13c>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <MX_GPIO_Init+0x13c>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a40      	ldr	r2, [pc, #256]	; (8002e2c <MX_GPIO_Init+0x13c>)
 8002d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b3e      	ldr	r3, [pc, #248]	; (8002e2c <MX_GPIO_Init+0x13c>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <MX_GPIO_Init+0x13c>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a39      	ldr	r2, [pc, #228]	; (8002e2c <MX_GPIO_Init+0x13c>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <MX_GPIO_Init+0x13c>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <MX_GPIO_Init+0x13c>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a32      	ldr	r2, [pc, #200]	; (8002e2c <MX_GPIO_Init+0x13c>)
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <MX_GPIO_Init+0x13c>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002d76:	2200      	movs	r2, #0
 8002d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d7c:	482c      	ldr	r0, [pc, #176]	; (8002e30 <MX_GPIO_Init+0x140>)
 8002d7e:	f002 fcbb 	bl	80056f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2120      	movs	r1, #32
 8002d86:	482b      	ldr	r0, [pc, #172]	; (8002e34 <MX_GPIO_Init+0x144>)
 8002d88:	f002 fcb6 	bl	80056f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	4619      	mov	r1, r3
 8002da2:	4825      	ldr	r0, [pc, #148]	; (8002e38 <MX_GPIO_Init+0x148>)
 8002da4:	f002 fa40 	bl	8005228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002da8:	2301      	movs	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	4619      	mov	r1, r3
 8002dba:	481d      	ldr	r0, [pc, #116]	; (8002e30 <MX_GPIO_Init+0x140>)
 8002dbc:	f002 fa34 	bl	8005228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4815      	ldr	r0, [pc, #84]	; (8002e30 <MX_GPIO_Init+0x140>)
 8002dda:	f002 fa25 	bl	8005228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002dde:	2320      	movs	r3, #32
 8002de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de2:	2301      	movs	r3, #1
 8002de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dea:	2300      	movs	r3, #0
 8002dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	4619      	mov	r1, r3
 8002df4:	480f      	ldr	r0, [pc, #60]	; (8002e34 <MX_GPIO_Init+0x144>)
 8002df6:	f002 fa17 	bl	8005228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dfa:	2340      	movs	r3, #64	; 0x40
 8002dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e06:	f107 0314 	add.w	r3, r7, #20
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4809      	ldr	r0, [pc, #36]	; (8002e34 <MX_GPIO_Init+0x144>)
 8002e0e:	f002 fa0b 	bl	8005228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2100      	movs	r1, #0
 8002e16:	2028      	movs	r0, #40	; 0x28
 8002e18:	f001 fe43 	bl	8004aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e1c:	2028      	movs	r0, #40	; 0x28
 8002e1e:	f001 fe5c 	bl	8004ada <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e22:	bf00      	nop
 8002e24:	3728      	adds	r7, #40	; 0x28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40020000 	.word	0x40020000
 8002e34:	40020400 	.word	0x40020400
 8002e38:	40020800 	.word	0x40020800

08002e3c <pulseYellowLED>:
/* USER CODE BEGIN 4 */
// Increase PWM duty cycle (fade in)
int direction = 1;
int brightness = 50;
int counter = 0;
void pulseYellowLED() {
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
	counter++;
 8002e40:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <pulseYellowLED+0x78>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3301      	adds	r3, #1
 8002e46:	4a1b      	ldr	r2, [pc, #108]	; (8002eb4 <pulseYellowLED+0x78>)
 8002e48:	6013      	str	r3, [r2, #0]
	if (counter > 10000) {
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <pulseYellowLED+0x78>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e52:	4293      	cmp	r3, r2
 8002e54:	dd28      	ble.n	8002ea8 <pulseYellowLED+0x6c>
		  if (direction > 0) {
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <pulseYellowLED+0x7c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	dd0a      	ble.n	8002e74 <pulseYellowLED+0x38>
			  brightness++;
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <pulseYellowLED+0x80>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	4a15      	ldr	r2, [pc, #84]	; (8002ebc <pulseYellowLED+0x80>)
 8002e66:	6013      	str	r3, [r2, #0]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, brightness);
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <pulseYellowLED+0x80>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <pulseYellowLED+0x84>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34
 8002e72:	e009      	b.n	8002e88 <pulseYellowLED+0x4c>
		  } else {
			  brightness--;
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <pulseYellowLED+0x80>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	4a10      	ldr	r2, [pc, #64]	; (8002ebc <pulseYellowLED+0x80>)
 8002e7c:	6013      	str	r3, [r2, #0]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, brightness);
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <pulseYellowLED+0x80>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <pulseYellowLED+0x84>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	635a      	str	r2, [r3, #52]	; 0x34
		  }
		  if ((brightness == 255) || (brightness == 0)) {
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <pulseYellowLED+0x80>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2bff      	cmp	r3, #255	; 0xff
 8002e8e:	d003      	beq.n	8002e98 <pulseYellowLED+0x5c>
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <pulseYellowLED+0x80>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d104      	bne.n	8002ea2 <pulseYellowLED+0x66>
			  direction = -direction;
 8002e98:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <pulseYellowLED+0x7c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	425b      	negs	r3, r3
 8002e9e:	4a06      	ldr	r2, [pc, #24]	; (8002eb8 <pulseYellowLED+0x7c>)
 8002ea0:	6013      	str	r3, [r2, #0]
		  }
		  ledPhase = 0;
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <pulseYellowLED+0x88>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
	}

}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000a64 	.word	0x20000a64
 8002eb8:	20000048 	.word	0x20000048
 8002ebc:	2000004c 	.word	0x2000004c
 8002ec0:	20000a10 	.word	0x20000a10
 8002ec4:	20000a60 	.word	0x20000a60

08002ec8 <blinkRed>:

void blinkRed() {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
	redBlink++;
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <blinkRed+0x2c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <blinkRed+0x2c>)
 8002ed4:	6013      	str	r3, [r2, #0]
	if (redBlink > 300) {
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <blinkRed+0x2c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002ede:	dd06      	ble.n	8002eee <blinkRed+0x26>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8002ee0:	2120      	movs	r1, #32
 8002ee2:	4805      	ldr	r0, [pc, #20]	; (8002ef8 <blinkRed+0x30>)
 8002ee4:	f002 fc21 	bl	800572a <HAL_GPIO_TogglePin>
		  redBlink = 0;
 8002ee8:	4b02      	ldr	r3, [pc, #8]	; (8002ef4 <blinkRed+0x2c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
	  }
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000a5c 	.word	0x20000a5c
 8002ef8:	40020400 	.word	0x40020400

08002efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f00:	b672      	cpsid	i
}
 8002f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f04:	e7fe      	b.n	8002f04 <Error_Handler+0x8>

08002f06 <ByteStuffCopyByte>:
  * @param  Dest destination
  * @param  Source source
  * @retval Total number of bytes processed
  */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b085      	sub	sp, #20
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 8002f12:	2302      	movs	r3, #2
 8002f14:	60fb      	str	r3, [r7, #12]

  switch (Source)
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	2bf0      	cmp	r3, #240	; 0xf0
 8002f1a:	d002      	beq.n	8002f22 <ByteStuffCopyByte+0x1c>
 8002f1c:	2bf1      	cmp	r3, #241	; 0xf1
 8002f1e:	d008      	beq.n	8002f32 <ByteStuffCopyByte+0x2c>
 8002f20:	e00f      	b.n	8002f42 <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	22f1      	movs	r2, #241	; 0xf1
 8002f26:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	22f2      	movs	r2, #242	; 0xf2
 8002f2e:	701a      	strb	r2, [r3, #0]
      break;
 8002f30:	e00d      	b.n	8002f4e <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	22f1      	movs	r2, #241	; 0xf1
 8002f36:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	22f1      	movs	r2, #241	; 0xf1
 8002f3e:	701a      	strb	r2, [r3, #0]
      break;
 8002f40:	e005      	b.n	8002f4e <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	701a      	strb	r2, [r3, #0]
      ret = 1;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
      break;
 8002f4c:	bf00      	nop
  }

  return ret;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <ByteStuffCopy>:
  * @param  Dest destination
  * @param  Source source
  * @retval Total number of bytes processed
  */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e011      	b.n	8002f94 <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	18d0      	adds	r0, r2, r3
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7ff ffc0 	bl	8002f06 <ByteStuffCopyByte>
 8002f86:	4602      	mov	r2, r0
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3301      	adds	r3, #1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d3e8      	bcc.n	8002f70 <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	22f0      	movs	r2, #240	; 0xf0
 8002fa6:	701a      	strb	r2, [r3, #0]
  count++;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
  return count;
 8002fae:	68bb      	ldr	r3, [r7, #8]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <ReverseByteStuffCopyByte2>:
  * @param  Source1 input data
  * @param  Dest the destination data
  * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
  */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	603a      	str	r2, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2bf1      	cmp	r3, #241	; 0xf1
 8002fcc:	d111      	bne.n	8002ff2 <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 8002fce:	79bb      	ldrb	r3, [r7, #6]
 8002fd0:	2bf1      	cmp	r3, #241	; 0xf1
 8002fd2:	d104      	bne.n	8002fde <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	22f1      	movs	r2, #241	; 0xf1
 8002fd8:	701a      	strb	r2, [r3, #0]
      return 2;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e00d      	b.n	8002ffa <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 8002fde:	79bb      	ldrb	r3, [r7, #6]
 8002fe0:	2bf2      	cmp	r3, #242	; 0xf2
 8002fe2:	d104      	bne.n	8002fee <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	22f0      	movs	r2, #240	; 0xf0
 8002fe8:	701a      	strb	r2, [r3, #0]
      return 2;
 8002fea:	2302      	movs	r3, #2
 8002fec:	e005      	b.n	8002ffa <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e003      	b.n	8002ffa <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	79fa      	ldrb	r2, [r7, #7]
 8002ff6:	701a      	strb	r2, [r3, #0]
    return 1;
 8002ff8:	2301      	movs	r3, #1
  }
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <CHK_ComputeAndAdd>:
  * @brief  Compute and add checksum
  * @param  Msg pointer to the message
  * @retval None
  */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	e00a      	b.n	800302e <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4413      	add	r3, r2
 800301e:	3304      	adds	r3, #4
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	7bfa      	ldrb	r2, [r7, #15]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	3301      	adds	r3, #1
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	429a      	cmp	r2, r3
 8003036:	d3ef      	bcc.n	8003018 <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4413      	add	r3, r2
 800303e:	3304      	adds	r3, #4
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	601a      	str	r2, [r3, #0]
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <CHK_CheckAndRemove>:
  * @brief  Compute and remove checksum
  * @param  Msg pointer to the message
  * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
  */
int CHK_CheckAndRemove(TMsg *Msg)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	e00a      	b.n	8003082 <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4413      	add	r3, r2
 8003072:	3304      	adds	r3, #4
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	4413      	add	r3, r2
 800307a:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	3301      	adds	r3, #1
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	429a      	cmp	r2, r3
 800308a:	d3ef      	bcc.n	800306c <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	1e5a      	subs	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <Deserialize>:
  * @param  Source source
  * @param  Len number of bytes
  * @retval Rebuild unsigned int variable
  */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4413      	add	r3, r2
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 80030c8:	e00d      	b.n	80030e6 <Deserialize+0x38>
  {
    app <<= 8;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ee      	bne.n	80030ca <Deserialize+0x1c>
  }

  return app;
 80030ec:	68fb      	ldr	r3, [r7, #12]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <Serialize_s32>:
  * @param  Source source
  * @param  Len number of bytes
  * @retval None
  */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b087      	sub	sp, #28
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e00f      	b.n	800312c <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	4413      	add	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3301      	adds	r3, #1
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	d3eb      	bcc.n	800310c <Serialize_s32+0x12>
  }
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_MspInit+0x4c>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	4a0f      	ldr	r2, [pc, #60]	; (8003190 <HAL_MspInit+0x4c>)
 8003154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003158:	6453      	str	r3, [r2, #68]	; 0x44
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <HAL_MspInit+0x4c>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_MspInit+0x4c>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a08      	ldr	r2, [pc, #32]	; (8003190 <HAL_MspInit+0x4c>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_MspInit+0x4c>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003182:	2007      	movs	r0, #7
 8003184:	f001 fc82 	bl	8004a8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800

08003194 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <HAL_CRC_MspInit+0x3c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d10d      	bne.n	80031c2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <HAL_CRC_MspInit+0x40>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <HAL_CRC_MspInit+0x40>)
 80031b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <HAL_CRC_MspInit+0x40>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023000 	.word	0x40023000
 80031d4:	40023800 	.word	0x40023800

080031d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031e0:	f107 030c 	add.w	r3, r7, #12
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0c      	ldr	r2, [pc, #48]	; (8003228 <HAL_RTC_MspInit+0x50>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d111      	bne.n	800321e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80031fa:	2302      	movs	r3, #2
 80031fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80031fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003202:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	4618      	mov	r0, r3
 800320a:	f003 ff83 	bl	8007114 <HAL_RCCEx_PeriphCLKConfig>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003214:	f7ff fe72 	bl	8002efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <HAL_RTC_MspInit+0x54>)
 800321a:	2201      	movs	r2, #1
 800321c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800321e:	bf00      	nop
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40002800 	.word	0x40002800
 800322c:	42470e3c 	.word	0x42470e3c

08003230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003240:	d116      	bne.n	8003270 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_TIM_Base_MspInit+0x80>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <HAL_TIM_Base_MspInit+0x80>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <HAL_TIM_Base_MspInit+0x80>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800325e:	2200      	movs	r2, #0
 8003260:	2100      	movs	r1, #0
 8003262:	201c      	movs	r0, #28
 8003264:	f001 fc1d 	bl	8004aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003268:	201c      	movs	r0, #28
 800326a:	f001 fc36 	bl	8004ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800326e:	e01a      	b.n	80032a6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0f      	ldr	r2, [pc, #60]	; (80032b4 <HAL_TIM_Base_MspInit+0x84>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d115      	bne.n	80032a6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <HAL_TIM_Base_MspInit+0x80>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <HAL_TIM_Base_MspInit+0x80>)
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	6413      	str	r3, [r2, #64]	; 0x40
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_TIM_Base_MspInit+0x80>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003296:	2200      	movs	r2, #0
 8003298:	2100      	movs	r1, #0
 800329a:	201d      	movs	r0, #29
 800329c:	f001 fc01 	bl	8004aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032a0:	201d      	movs	r0, #29
 80032a2:	f001 fc1a 	bl	8004ada <HAL_NVIC_EnableIRQ>
}
 80032a6:	bf00      	nop
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40000400 	.word	0x40000400

080032b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a12      	ldr	r2, [pc, #72]	; (8003320 <HAL_TIM_MspPostInit+0x68>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d11d      	bne.n	8003316 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_TIM_MspPostInit+0x6c>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	4a10      	ldr	r2, [pc, #64]	; (8003324 <HAL_TIM_MspPostInit+0x6c>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ea:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HAL_TIM_MspPostInit+0x6c>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032f6:	2340      	movs	r3, #64	; 0x40
 80032f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	2302      	movs	r3, #2
 80032fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003306:	2302      	movs	r3, #2
 8003308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330a:	f107 030c 	add.w	r3, r7, #12
 800330e:	4619      	mov	r1, r3
 8003310:	4805      	ldr	r0, [pc, #20]	; (8003328 <HAL_TIM_MspPostInit+0x70>)
 8003312:	f001 ff89 	bl	8005228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003316:	bf00      	nop
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40000400 	.word	0x40000400
 8003324:	40023800 	.word	0x40023800
 8003328:	40020000 	.word	0x40020000

0800332c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003330:	e7fe      	b.n	8003330 <NMI_Handler+0x4>

08003332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003336:	e7fe      	b.n	8003336 <HardFault_Handler+0x4>

08003338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800333c:	e7fe      	b.n	800333c <MemManage_Handler+0x4>

0800333e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800333e:	b480      	push	{r7}
 8003340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003342:	e7fe      	b.n	8003342 <BusFault_Handler+0x4>

08003344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003348:	e7fe      	b.n	8003348 <UsageFault_Handler+0x4>

0800334a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003378:	f001 fa74 	bl	8004864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800337c:	bf00      	nop
 800337e:	bd80      	pop	{r7, pc}

08003380 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003384:	4802      	ldr	r0, [pc, #8]	; (8003390 <DMA1_Stream5_IRQHandler+0x10>)
 8003386:	f001 fce5 	bl	8004d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000aac 	.word	0x20000aac

08003394 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	ledPhase++;
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <TIM2_IRQHandler+0x18>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3301      	adds	r3, #1
 800339e:	4a03      	ldr	r2, [pc, #12]	; (80033ac <TIM2_IRQHandler+0x18>)
 80033a0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033a2:	4803      	ldr	r0, [pc, #12]	; (80033b0 <TIM2_IRQHandler+0x1c>)
 80033a4:	f004 fc8c 	bl	8007cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000a60 	.word	0x20000a60
 80033b0:	200009c8 	.word	0x200009c8

080033b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033b8:	4802      	ldr	r0, [pc, #8]	; (80033c4 <TIM3_IRQHandler+0x10>)
 80033ba:	f004 fc81 	bl	8007cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000a10 	.word	0x20000a10

080033c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80033cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033d0:	f002 f9c6 	bl	8005760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033d4:	bf00      	nop
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	4a04      	ldr	r2, [pc, #16]	; (80033f8 <BSP_LED_Init+0x20>)
 80033e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ea:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	0800ae7c 	.word	0x0800ae7c

080033fc <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	4a06      	ldr	r2, [pc, #24]	; (8003424 <BSP_LED_On+0x28>)
 800340a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340e:	2120      	movs	r1, #32
 8003410:	2201      	movs	r2, #1
 8003412:	4618      	mov	r0, r3
 8003414:	f002 f970 	bl	80056f8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000050 	.word	0x20000050

08003428 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	4a06      	ldr	r2, [pc, #24]	; (8003450 <BSP_LED_Off+0x28>)
 8003436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343a:	2120      	movs	r1, #32
 800343c:	2200      	movs	r2, #0
 800343e:	4618      	mov	r0, r3
 8003440:	f002 f95a 	bl	80056f8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000050 	.word	0x20000050

08003454 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <LED_USER_GPIO_Init+0x7c>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	4a1b      	ldr	r2, [pc, #108]	; (80034d0 <LED_USER_GPIO_Init+0x7c>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6313      	str	r3, [r2, #48]	; 0x30
 800346a:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <LED_USER_GPIO_Init+0x7c>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003476:	f107 030c 	add.w	r3, r7, #12
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <LED_USER_GPIO_Init+0x7c>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a10      	ldr	r2, [pc, #64]	; (80034d0 <LED_USER_GPIO_Init+0x7c>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <LED_USER_GPIO_Init+0x7c>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80034a2:	2200      	movs	r2, #0
 80034a4:	2120      	movs	r1, #32
 80034a6:	480b      	ldr	r0, [pc, #44]	; (80034d4 <LED_USER_GPIO_Init+0x80>)
 80034a8:	f002 f926 	bl	80056f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80034ac:	2320      	movs	r3, #32
 80034ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b0:	2301      	movs	r3, #1
 80034b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80034bc:	f107 030c 	add.w	r3, r7, #12
 80034c0:	4619      	mov	r1, r3
 80034c2:	4804      	ldr	r0, [pc, #16]	; (80034d4 <LED_USER_GPIO_Init+0x80>)
 80034c4:	f001 feb0 	bl	8005228 <HAL_GPIO_Init>

}
 80034c8:	bf00      	nop
 80034ca:	3720      	adds	r7, #32
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40020000 	.word	0x40020000

080034d8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d903      	bls.n	80034f4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80034ec:	f06f 0301 	mvn.w	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e025      	b.n	8003540 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	79fa      	ldrb	r2, [r7, #7]
 80034f8:	4914      	ldr	r1, [pc, #80]	; (800354c <BSP_COM_Init+0x74>)
 80034fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80034fe:	4814      	ldr	r0, [pc, #80]	; (8003550 <BSP_COM_Init+0x78>)
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4403      	add	r3, r0
 800350a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800350c:	79fa      	ldrb	r2, [r7, #7]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4a0e      	ldr	r2, [pc, #56]	; (8003550 <BSP_COM_Init+0x78>)
 8003518:	4413      	add	r3, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f848 	bl	80035b0 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8003520:	79fa      	ldrb	r2, [r7, #7]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4a09      	ldr	r2, [pc, #36]	; (8003550 <BSP_COM_Init+0x78>)
 800352c:	4413      	add	r3, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f810 	bl	8003554 <MX_USART2_UART_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800353a:	f06f 0303 	mvn.w	r3, #3
 800353e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003540:	68fb      	ldr	r3, [r7, #12]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000054 	.word	0x20000054
 8003550:	20000a68 	.word	0x20000a68

08003554 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a12      	ldr	r2, [pc, #72]	; (80035ac <MX_USART2_UART_Init+0x58>)
 8003564:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800356c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	220c      	movs	r2, #12
 8003584:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f005 f99c 	bl	80088d0 <HAL_UART_Init>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40004400 	.word	0x40004400

080035b0 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	4b33      	ldr	r3, [pc, #204]	; (800368c <USART2_MspInit+0xdc>)
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	4a32      	ldr	r2, [pc, #200]	; (800368c <USART2_MspInit+0xdc>)
 80035c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c6:	6413      	str	r3, [r2, #64]	; 0x40
 80035c8:	4b30      	ldr	r3, [pc, #192]	; (800368c <USART2_MspInit+0xdc>)
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	4b2c      	ldr	r3, [pc, #176]	; (800368c <USART2_MspInit+0xdc>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	4a2b      	ldr	r2, [pc, #172]	; (800368c <USART2_MspInit+0xdc>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6313      	str	r3, [r2, #48]	; 0x30
 80035e4:	4b29      	ldr	r3, [pc, #164]	; (800368c <USART2_MspInit+0xdc>)
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80035f0:	2304      	movs	r3, #4
 80035f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	2302      	movs	r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fc:	2300      	movs	r3, #0
 80035fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8003600:	2307      	movs	r3, #7
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4619      	mov	r1, r3
 800360a:	4821      	ldr	r0, [pc, #132]	; (8003690 <USART2_MspInit+0xe0>)
 800360c:	f001 fe0c 	bl	8005228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8003610:	2308      	movs	r3, #8
 8003612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003614:	2302      	movs	r3, #2
 8003616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8003620:	2307      	movs	r3, #7
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	4619      	mov	r1, r3
 800362a:	4819      	ldr	r0, [pc, #100]	; (8003690 <USART2_MspInit+0xe0>)
 800362c:	f001 fdfc 	bl	8005228 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003630:	4b18      	ldr	r3, [pc, #96]	; (8003694 <USART2_MspInit+0xe4>)
 8003632:	4a19      	ldr	r2, [pc, #100]	; (8003698 <USART2_MspInit+0xe8>)
 8003634:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <USART2_MspInit+0xe4>)
 8003638:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800363c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <USART2_MspInit+0xe4>)
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <USART2_MspInit+0xe4>)
 8003646:	2200      	movs	r2, #0
 8003648:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <USART2_MspInit+0xe4>)
 800364c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003650:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <USART2_MspInit+0xe4>)
 8003654:	2200      	movs	r2, #0
 8003656:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003658:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <USART2_MspInit+0xe4>)
 800365a:	2200      	movs	r2, #0
 800365c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <USART2_MspInit+0xe4>)
 8003660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003664:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <USART2_MspInit+0xe4>)
 8003668:	2200      	movs	r2, #0
 800366a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <USART2_MspInit+0xe4>)
 800366e:	2200      	movs	r2, #0
 8003670:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_DMA_Init(&hdma_usart2_rx);
 8003672:	4808      	ldr	r0, [pc, #32]	; (8003694 <USART2_MspInit+0xe4>)
 8003674:	f001 fa68 	bl	8004b48 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a06      	ldr	r2, [pc, #24]	; (8003694 <USART2_MspInit+0xe4>)
 800367c:	639a      	str	r2, [r3, #56]	; 0x38
 800367e:	4a05      	ldr	r2, [pc, #20]	; (8003694 <USART2_MspInit+0xe4>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8003684:	bf00      	nop
 8003686:	3728      	adds	r7, #40	; 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40023800 	.word	0x40023800
 8003690:	40020000 	.word	0x40020000
 8003694:	20000aac 	.word	0x20000aac
 8003698:	40026088 	.word	0x40026088

0800369c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80036a6:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <BSP_I2C1_Init+0x58>)
 80036a8:	4a13      	ldr	r2, [pc, #76]	; (80036f8 <BSP_I2C1_Init+0x5c>)
 80036aa:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80036ac:	4b13      	ldr	r3, [pc, #76]	; (80036fc <BSP_I2C1_Init+0x60>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	4912      	ldr	r1, [pc, #72]	; (80036fc <BSP_I2C1_Init+0x60>)
 80036b4:	600a      	str	r2, [r1, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d117      	bne.n	80036ea <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80036ba:	480e      	ldr	r0, [pc, #56]	; (80036f4 <BSP_I2C1_Init+0x58>)
 80036bc:	f002 fd1c 	bl	80060f8 <HAL_I2C_GetState>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d111      	bne.n	80036ea <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80036c6:	480b      	ldr	r0, [pc, #44]	; (80036f4 <BSP_I2C1_Init+0x58>)
 80036c8:	f000 f8e2 	bl	8003890 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10b      	bne.n	80036ea <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80036d2:	4808      	ldr	r0, [pc, #32]	; (80036f4 <BSP_I2C1_Init+0x58>)
 80036d4:	f000 f8a8 	bl	8003828 <MX_I2C1_Init>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80036de:	f06f 0307 	mvn.w	r3, #7
 80036e2:	607b      	str	r3, [r7, #4]
 80036e4:	e001      	b.n	80036ea <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80036ea:	687b      	ldr	r3, [r7, #4]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000b0c 	.word	0x20000b0c
 80036f8:	40005400 	.word	0x40005400
 80036fc:	20000b60 	.word	0x20000b60

08003700 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003706:	2300      	movs	r3, #0
 8003708:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <BSP_I2C1_DeInit+0x48>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d014      	beq.n	800373c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <BSP_I2C1_DeInit+0x48>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3b01      	subs	r3, #1
 8003718:	4a0b      	ldr	r2, [pc, #44]	; (8003748 <BSP_I2C1_DeInit+0x48>)
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <BSP_I2C1_DeInit+0x48>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8003724:	4809      	ldr	r0, [pc, #36]	; (800374c <BSP_I2C1_DeInit+0x4c>)
 8003726:	f000 f8fd 	bl	8003924 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800372a:	4808      	ldr	r0, [pc, #32]	; (800374c <BSP_I2C1_DeInit+0x4c>)
 800372c:	f002 f980 	bl	8005a30 <HAL_I2C_DeInit>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8003736:	f06f 0307 	mvn.w	r3, #7
 800373a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800373c:	687b      	ldr	r3, [r7, #4]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000b60 	.word	0x20000b60
 800374c:	20000b0c 	.word	0x20000b0c

08003750 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	; 0x28
 8003754:	af04      	add	r7, sp, #16
 8003756:	60ba      	str	r2, [r7, #8]
 8003758:	461a      	mov	r2, r3
 800375a:	4603      	mov	r3, r0
 800375c:	81fb      	strh	r3, [r7, #14]
 800375e:	460b      	mov	r3, r1
 8003760:	81bb      	strh	r3, [r7, #12]
 8003762:	4613      	mov	r3, r2
 8003764:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800376a:	89ba      	ldrh	r2, [r7, #12]
 800376c:	89f9      	ldrh	r1, [r7, #14]
 800376e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003772:	9302      	str	r3, [sp, #8]
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2301      	movs	r3, #1
 800377e:	480c      	ldr	r0, [pc, #48]	; (80037b0 <BSP_I2C1_WriteReg+0x60>)
 8003780:	f002 f99a 	bl	8005ab8 <HAL_I2C_Mem_Write>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00c      	beq.n	80037a4 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800378a:	4809      	ldr	r0, [pc, #36]	; (80037b0 <BSP_I2C1_WriteReg+0x60>)
 800378c:	f002 fcc2 	bl	8006114 <HAL_I2C_GetError>
 8003790:	4603      	mov	r3, r0
 8003792:	2b04      	cmp	r3, #4
 8003794:	d103      	bne.n	800379e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003796:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	e002      	b.n	80037a4 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800379e:	f06f 0303 	mvn.w	r3, #3
 80037a2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80037a4:	697b      	ldr	r3, [r7, #20]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000b0c 	.word	0x20000b0c

080037b4 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af04      	add	r7, sp, #16
 80037ba:	60ba      	str	r2, [r7, #8]
 80037bc:	461a      	mov	r2, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	81fb      	strh	r3, [r7, #14]
 80037c2:	460b      	mov	r3, r1
 80037c4:	81bb      	strh	r3, [r7, #12]
 80037c6:	4613      	mov	r3, r2
 80037c8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80037ce:	89ba      	ldrh	r2, [r7, #12]
 80037d0:	89f9      	ldrh	r1, [r7, #14]
 80037d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d6:	9302      	str	r3, [sp, #8]
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	2301      	movs	r3, #1
 80037e2:	480c      	ldr	r0, [pc, #48]	; (8003814 <BSP_I2C1_ReadReg+0x60>)
 80037e4:	f002 fa62 	bl	8005cac <HAL_I2C_Mem_Read>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80037ee:	4809      	ldr	r0, [pc, #36]	; (8003814 <BSP_I2C1_ReadReg+0x60>)
 80037f0:	f002 fc90 	bl	8006114 <HAL_I2C_GetError>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d103      	bne.n	8003802 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80037fa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	e002      	b.n	8003808 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003802:	f06f 0303 	mvn.w	r3, #3
 8003806:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003808:	697b      	ldr	r3, [r7, #20]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000b0c 	.word	0x20000b0c

08003818 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800381c:	f001 f836 	bl	800488c <HAL_GetTick>
 8003820:	4603      	mov	r3, r0
}
 8003822:	4618      	mov	r0, r3
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a14      	ldr	r2, [pc, #80]	; (8003888 <MX_I2C1_Init+0x60>)
 8003838:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a13      	ldr	r2, [pc, #76]	; (800388c <MX_I2C1_Init+0x64>)
 800383e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003852:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f001 ff9b 	bl	80057a8 <HAL_I2C_Init>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800387c:	7bfb      	ldrb	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40005400 	.word	0x40005400
 800388c:	00061a80 	.word	0x00061a80

08003890 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	; 0x28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	4b1f      	ldr	r3, [pc, #124]	; (800391c <I2C1_MspInit+0x8c>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	4a1e      	ldr	r2, [pc, #120]	; (800391c <I2C1_MspInit+0x8c>)
 80038a2:	f043 0302 	orr.w	r3, r3, #2
 80038a6:	6313      	str	r3, [r2, #48]	; 0x30
 80038a8:	4b1c      	ldr	r3, [pc, #112]	; (800391c <I2C1_MspInit+0x8c>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80038b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ba:	2312      	movs	r3, #18
 80038bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c2:	2303      	movs	r3, #3
 80038c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80038c6:	2304      	movs	r3, #4
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80038ca:	f107 0314 	add.w	r3, r7, #20
 80038ce:	4619      	mov	r1, r3
 80038d0:	4813      	ldr	r0, [pc, #76]	; (8003920 <I2C1_MspInit+0x90>)
 80038d2:	f001 fca9 	bl	8005228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80038d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038dc:	2312      	movs	r3, #18
 80038de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e4:	2303      	movs	r3, #3
 80038e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80038e8:	2304      	movs	r3, #4
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	4619      	mov	r1, r3
 80038f2:	480b      	ldr	r0, [pc, #44]	; (8003920 <I2C1_MspInit+0x90>)
 80038f4:	f001 fc98 	bl	8005228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	4b07      	ldr	r3, [pc, #28]	; (800391c <I2C1_MspInit+0x8c>)
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	4a06      	ldr	r2, [pc, #24]	; (800391c <I2C1_MspInit+0x8c>)
 8003902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003906:	6413      	str	r3, [r2, #64]	; 0x40
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <I2C1_MspInit+0x8c>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8003914:	bf00      	nop
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	40020400 	.word	0x40020400

08003924 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <I2C1_MspDeInit+0x30>)
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	4a08      	ldr	r2, [pc, #32]	; (8003954 <I2C1_MspDeInit+0x30>)
 8003932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003936:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8003938:	f44f 7180 	mov.w	r1, #256	; 0x100
 800393c:	4806      	ldr	r0, [pc, #24]	; (8003958 <I2C1_MspDeInit+0x34>)
 800393e:	f001 fdf7 	bl	8005530 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8003942:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003946:	4804      	ldr	r0, [pc, #16]	; (8003958 <I2C1_MspDeInit+0x34>)
 8003948:	f001 fdf2 	bl	8005530 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40023800 	.word	0x40023800
 8003958:	40020400 	.word	0x40020400

0800395c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <_sbrk+0x5c>)
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <_sbrk+0x60>)
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <_sbrk+0x64>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <_sbrk+0x64>)
 800397a:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <_sbrk+0x68>)
 800397c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <_sbrk+0x64>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	429a      	cmp	r2, r3
 800398a:	d207      	bcs.n	800399c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800398c:	f006 fd0a 	bl	800a3a4 <__errno>
 8003990:	4603      	mov	r3, r0
 8003992:	220c      	movs	r2, #12
 8003994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295
 800399a:	e009      	b.n	80039b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800399c:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <_sbrk+0x64>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <_sbrk+0x64>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	4a05      	ldr	r2, [pc, #20]	; (80039c0 <_sbrk+0x64>)
 80039ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ae:	68fb      	ldr	r3, [r7, #12]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20018000 	.word	0x20018000
 80039bc:	00008000 	.word	0x00008000
 80039c0:	20000b64 	.word	0x20000b64
 80039c4:	20000cb8 	.word	0x20000cb8

080039c8 <STHS34PF80_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_RegisterBusIO(STHS34PF80_Object_t *pObj, STHS34PF80_IO_t *pIO)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <STHS34PF80_RegisterBusIO+0x18>
  {
    ret = STHS34PF80_ERROR;
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e034      	b.n	8003a4a <STHS34PF80_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	7b1a      	ldrb	r2, [r3, #12]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a0e      	ldr	r2, [pc, #56]	; (8003a54 <STHS34PF80_RegisterBusIO+0x8c>)
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a0d      	ldr	r2, [pc, #52]	; (8003a58 <STHS34PF80_RegisterBusIO+0x90>)
 8003a22:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <STHS34PF80_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4798      	blx	r3
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	e002      	b.n	8003a4a <STHS34PF80_RegisterBusIO+0x82>
    }
    else
    {
      ret = STHS34PF80_ERROR;
 8003a44:	f04f 33ff 	mov.w	r3, #4294967295
 8003a48:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	080040c5 	.word	0x080040c5
 8003a58:	080040fb 	.word	0x080040fb

08003a5c <STHS34PF80_Init>:
  * @brief  Initialize the STHS34PF80 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_Init(STHS34PF80_Object_t *pObj)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d11b      	bne.n	8003aa6 <STHS34PF80_Init+0x4a>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable BDU */
    if (sths34pf80_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STHS34PF80_OK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3320      	adds	r3, #32
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fd59 	bl	8004534 <sths34pf80_block_data_update_set>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <STHS34PF80_Init+0x32>
    {
      return STHS34PF80_ERROR;
 8003a88:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8c:	e010      	b.n	8003ab0 <STHS34PF80_Init+0x54>
    }

    /* Put the component in standby mode. */
    if (sths34pf80_tmos_odr_set(&(pObj->Ctx), STHS34PF80_TMOS_ODR_OFF) != STHS34PF80_OK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3320      	adds	r3, #32
 8003a92:	2100      	movs	r1, #0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fc7d 	bl	8004394 <sths34pf80_tmos_odr_set>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <STHS34PF80_Init+0x4a>
    {
      return STHS34PF80_ERROR;
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa4:	e004      	b.n	8003ab0 <STHS34PF80_Init+0x54>
    }
  }

  pObj->is_initialized = 1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STHS34PF80_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <STHS34PF80_DeInit>:
  * @brief  Deinitialize the STHS34PF80 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_DeInit(STHS34PF80_Object_t *pObj)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d108      	bne.n	8003adc <STHS34PF80_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STHS34PF80_TEMP_Disable(pObj) != STHS34PF80_OK)
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f878 	bl	8003bc0 <STHS34PF80_TEMP_Disable>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <STHS34PF80_DeInit+0x24>
    {
      return STHS34PF80_ERROR;
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	e004      	b.n	8003ae6 <STHS34PF80_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STHS34PF80_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <STHS34PF80_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_ReadID(STHS34PF80_Object_t *pObj, uint8_t *Id)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (sths34pf80_device_id_get(&(pObj->Ctx), &buf) != STHS34PF80_OK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3320      	adds	r3, #32
 8003afc:	f107 020f 	add.w	r2, r7, #15
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fb44 	bl	8004190 <sths34pf80_device_id_get>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <STHS34PF80_ReadID+0x26>
  {
    return STHS34PF80_ERROR;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	e003      	b.n	8003b1c <STHS34PF80_ReadID+0x2e>
  }

  *Id = buf;
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	701a      	strb	r2, [r3, #0]

  return STHS34PF80_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <STHS34PF80_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STHS34PF80 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetCapabilities(STHS34PF80_Object_t *pObj, STHS34PF80_Capabilities_t *Capabilities)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2200      	movs	r2, #0
 8003b32:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2200      	movs	r2, #0
 8003b38:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 30.0f;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	4a08      	ldr	r2, [pc, #32]	; (8003b78 <STHS34PF80_GetCapabilities+0x54>)
 8003b58:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	615a      	str	r2, [r3, #20]
  return STHS34PF80_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	41f00000 	.word	0x41f00000

08003b7c <STHS34PF80_TEMP_Enable>:
  * @brief  Enable the STHS34PF80 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_Enable(STHS34PF80_Object_t *pObj)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <STHS34PF80_TEMP_Enable+0x16>
  {
    return STHS34PF80_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e012      	b.n	8003bb8 <STHS34PF80_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STHS34PF80_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STHS34PF80_OK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003b98:	eeb0 0a67 	vmov.f32	s0, s15
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f8a1 	bl	8003ce4 <STHS34PF80_TEMP_SetOutputDataRate>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <STHS34PF80_TEMP_Enable+0x32>
  {
    return STHS34PF80_ERROR;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	e004      	b.n	8003bb8 <STHS34PF80_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STHS34PF80_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <STHS34PF80_TEMP_Disable>:
  * @brief  Disable the STHS34PF80 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_Disable(STHS34PF80_Object_t *pObj)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <STHS34PF80_TEMP_Disable+0x16>
  {
    return STHS34PF80_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e01c      	b.n	8003c10 <STHS34PF80_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STHS34PF80_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STHS34PF80_OK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3334      	adds	r3, #52	; 0x34
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f81b 	bl	8003c18 <STHS34PF80_TEMP_GetOutputDataRate>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <STHS34PF80_TEMP_Disable+0x2e>
  {
    return STHS34PF80_ERROR;
 8003be8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bec:	e010      	b.n	8003c10 <STHS34PF80_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (sths34pf80_tmos_odr_set(&(pObj->Ctx), STHS34PF80_TMOS_ODR_OFF) != STHS34PF80_OK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3320      	adds	r3, #32
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fbcd 	bl	8004394 <sths34pf80_tmos_odr_set>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <STHS34PF80_TEMP_Disable+0x46>
  {
    return STHS34PF80_ERROR;
 8003c00:	f04f 33ff 	mov.w	r3, #4294967295
 8003c04:	e004      	b.n	8003c10 <STHS34PF80_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STHS34PF80_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <STHS34PF80_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_GetOutputDataRate(STHS34PF80_Object_t *pObj, float_t *Odr)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  int32_t ret = STHS34PF80_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
  sths34pf80_tmos_odr_t odr_low_level;

  if (sths34pf80_tmos_odr_get(&(pObj->Ctx), &odr_low_level) != STHS34PF80_OK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3320      	adds	r3, #32
 8003c2a:	f107 020b 	add.w	r2, r7, #11
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fc29 	bl	8004488 <sths34pf80_tmos_odr_get>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <STHS34PF80_TEMP_GetOutputDataRate+0x2a>
  {
    return STHS34PF80_ERROR;
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c40:	e048      	b.n	8003cd4 <STHS34PF80_TEMP_GetOutputDataRate+0xbc>
  }

  switch (odr_low_level)
 8003c42:	7afb      	ldrb	r3, [r7, #11]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d840      	bhi.n	8003cca <STHS34PF80_TEMP_GetOutputDataRate+0xb2>
 8003c48:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <STHS34PF80_TEMP_GetOutputDataRate+0x38>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c75 	.word	0x08003c75
 8003c54:	08003c7f 	.word	0x08003c7f
 8003c58:	08003c89 	.word	0x08003c89
 8003c5c:	08003c93 	.word	0x08003c93
 8003c60:	08003c9d 	.word	0x08003c9d
 8003c64:	08003ca7 	.word	0x08003ca7
 8003c68:	08003cb1 	.word	0x08003cb1
 8003c6c:	08003cbb 	.word	0x08003cbb
 8003c70:	08003cc3 	.word	0x08003cc3
  {
    case STHS34PF80_TMOS_ODR_OFF:
      *Odr = 0.0f;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
      break;
 8003c7c:	e029      	b.n	8003cd2 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_0Hz25:
      *Odr = 0.25f;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8003c84:	601a      	str	r2, [r3, #0]
      break;
 8003c86:	e024      	b.n	8003cd2 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_0Hz50:
      *Odr = 0.5f;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003c8e:	601a      	str	r2, [r3, #0]
      break;
 8003c90:	e01f      	b.n	8003cd2 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_1Hz:
      *Odr = 1.0f;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c98:	601a      	str	r2, [r3, #0]
      break;
 8003c9a:	e01a      	b.n	8003cd2 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_2Hz:
      *Odr = 2.0f;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ca2:	601a      	str	r2, [r3, #0]
      break;
 8003ca4:	e015      	b.n	8003cd2 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_4Hz:
      *Odr = 4.0f;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003cac:	601a      	str	r2, [r3, #0]
      break;
 8003cae:	e010      	b.n	8003cd2 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_8Hz:
      *Odr = 8.0f;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8003cb6:	601a      	str	r2, [r3, #0]
      break;
 8003cb8:	e00b      	b.n	8003cd2 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_15Hz:
      *Odr = 15.0f;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	4a07      	ldr	r2, [pc, #28]	; (8003cdc <STHS34PF80_TEMP_GetOutputDataRate+0xc4>)
 8003cbe:	601a      	str	r2, [r3, #0]
      break;
 8003cc0:	e007      	b.n	8003cd2 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_30Hz:
      *Odr = 30.0f;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	4a06      	ldr	r2, [pc, #24]	; (8003ce0 <STHS34PF80_TEMP_GetOutputDataRate+0xc8>)
 8003cc6:	601a      	str	r2, [r3, #0]
      break;
 8003cc8:	e003      	b.n	8003cd2 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    default:
      ret = STHS34PF80_ERROR;
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295
 8003cce:	60fb      	str	r3, [r7, #12]
      break;
 8003cd0:	bf00      	nop
  }

  return ret;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	41700000 	.word	0x41700000
 8003ce0:	41f00000 	.word	0x41f00000

08003ce4 <STHS34PF80_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_SetOutputDataRate(STHS34PF80_Object_t *pObj, float_t Odr)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	ed87 0a00 	vstr	s0, [r7]
  sths34pf80_tmos_odr_t new_odr;

  new_odr = (Odr <= 0.25f) ? STHS34PF80_TMOS_ODR_AT_0Hz25
            : (Odr <= 0.5f) ? STHS34PF80_TMOS_ODR_AT_0Hz50
 8003cf0:	edd7 7a00 	vldr	s15, [r7]
 8003cf4:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d00:	d801      	bhi.n	8003d06 <STHS34PF80_TEMP_SetOutputDataRate+0x22>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e042      	b.n	8003d8c <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8003d06:	edd7 7a00 	vldr	s15, [r7]
 8003d0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d16:	d801      	bhi.n	8003d1c <STHS34PF80_TEMP_SetOutputDataRate+0x38>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e037      	b.n	8003d8c <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8003d1c:	edd7 7a00 	vldr	s15, [r7]
 8003d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2c:	d801      	bhi.n	8003d32 <STHS34PF80_TEMP_SetOutputDataRate+0x4e>
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e02c      	b.n	8003d8c <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8003d32:	edd7 7a00 	vldr	s15, [r7]
 8003d36:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d42:	d801      	bhi.n	8003d48 <STHS34PF80_TEMP_SetOutputDataRate+0x64>
 8003d44:	2304      	movs	r3, #4
 8003d46:	e021      	b.n	8003d8c <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8003d48:	edd7 7a00 	vldr	s15, [r7]
 8003d4c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d58:	d801      	bhi.n	8003d5e <STHS34PF80_TEMP_SetOutputDataRate+0x7a>
 8003d5a:	2305      	movs	r3, #5
 8003d5c:	e016      	b.n	8003d8c <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8003d5e:	edd7 7a00 	vldr	s15, [r7]
 8003d62:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6e:	d801      	bhi.n	8003d74 <STHS34PF80_TEMP_SetOutputDataRate+0x90>
 8003d70:	2306      	movs	r3, #6
 8003d72:	e00b      	b.n	8003d8c <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8003d74:	edd7 7a00 	vldr	s15, [r7]
 8003d78:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d84:	d801      	bhi.n	8003d8a <STHS34PF80_TEMP_SetOutputDataRate+0xa6>
 8003d86:	2307      	movs	r3, #7
 8003d88:	e000      	b.n	8003d8c <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8003d8a:	2308      	movs	r3, #8
  new_odr = (Odr <= 0.25f) ? STHS34PF80_TMOS_ODR_AT_0Hz25
 8003d8c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STHS34PF80_TMOS_ODR_AT_4Hz
            : (Odr <= 8.0f) ? STHS34PF80_TMOS_ODR_AT_8Hz
            : (Odr <= 15.0f) ? STHS34PF80_TMOS_ODR_AT_15Hz
            :                  STHS34PF80_TMOS_ODR_AT_30Hz;

  if (sths34pf80_tmos_odr_set(&(pObj->Ctx), new_odr) != STHS34PF80_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3320      	adds	r3, #32
 8003d92:	7bfa      	ldrb	r2, [r7, #15]
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fafc 	bl	8004394 <sths34pf80_tmos_odr_set>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <STHS34PF80_TEMP_SetOutputDataRate+0xc4>
  {
    return STHS34PF80_ERROR;
 8003da2:	f04f 33ff 	mov.w	r3, #4294967295
 8003da6:	e000      	b.n	8003daa <STHS34PF80_TEMP_SetOutputDataRate+0xc6>
  }

  return STHS34PF80_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <STHS34PF80_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_GetTemperature(STHS34PF80_Object_t *pObj, float_t *Value)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]
  /* Get the ambient temperature */
  if (STHS34PF80_GetAmbientTemperature(pObj, Value) != STHS34PF80_OK)
 8003dbc:	6839      	ldr	r1, [r7, #0]
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f838 	bl	8003e34 <STHS34PF80_GetAmbientTemperature>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <STHS34PF80_TEMP_GetTemperature+0x1e>
  {
    return STHS34PF80_ERROR;
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295
 8003dce:	e000      	b.n	8003dd2 <STHS34PF80_TEMP_GetTemperature+0x20>
  }

  return STHS34PF80_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <STHS34PF80_GetObjectTemperatureRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetObjectTemperatureRaw(STHS34PF80_Object_t *pObj, int16_t *Value)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
  /* Get the object temperature */
  if (sths34pf80_tobject_raw_get(&(pObj->Ctx), Value) != STHS34PF80_OK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3320      	adds	r3, #32
 8003de8:	6839      	ldr	r1, [r7, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fbee 	bl	80045cc <sths34pf80_tobject_raw_get>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <STHS34PF80_GetObjectTemperatureRaw+0x22>
  {
    return STHS34PF80_ERROR;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfa:	e000      	b.n	8003dfe <STHS34PF80_GetObjectTemperatureRaw+0x24>
  }

  return STHS34PF80_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <STHS34PF80_GetAmbientTemperatureRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetAmbientTemperatureRaw(STHS34PF80_Object_t *pObj, int16_t *Value)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
  /* Get the ambient temperature */
  if (sths34pf80_tambient_raw_get(&(pObj->Ctx), Value) != STHS34PF80_OK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3320      	adds	r3, #32
 8003e14:	6839      	ldr	r1, [r7, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fbfb 	bl	8004612 <sths34pf80_tambient_raw_get>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <STHS34PF80_GetAmbientTemperatureRaw+0x22>
  {
    return STHS34PF80_ERROR;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	e000      	b.n	8003e2a <STHS34PF80_GetAmbientTemperatureRaw+0x24>
  }

  return STHS34PF80_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <STHS34PF80_GetAmbientTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetAmbientTemperature(STHS34PF80_Object_t *pObj, float_t *Value)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  int16_t raw_value;
  int16_t int16_value;

  /* Get the ambient temperature */
  if (sths34pf80_tambient_raw_get(&(pObj->Ctx), &raw_value) != STHS34PF80_OK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3320      	adds	r3, #32
 8003e42:	f107 020c 	add.w	r2, r7, #12
 8003e46:	4611      	mov	r1, r2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fbe2 	bl	8004612 <sths34pf80_tambient_raw_get>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <STHS34PF80_GetAmbientTemperature+0x26>
  {
    return STHS34PF80_ERROR;
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295
 8003e58:	e012      	b.n	8003e80 <STHS34PF80_GetAmbientTemperature+0x4c>
  }

  int16_value = raw_value / 100;
 8003e5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e5e:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <STHS34PF80_GetAmbientTemperature+0x54>)
 8003e60:	fb82 1203 	smull	r1, r2, r2, r3
 8003e64:	1152      	asrs	r2, r2, #5
 8003e66:	17db      	asrs	r3, r3, #31
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	81fb      	strh	r3, [r7, #14]
  *Value = (float_t)int16_value;
 8003e6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e70:	ee07 3a90 	vmov	s15, r3
 8003e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	edc3 7a00 	vstr	s15, [r3]

  return STHS34PF80_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	51eb851f 	.word	0x51eb851f

08003e8c <STHS34PF80_GetAvgTmos>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetAvgTmos(STHS34PF80_Object_t *pObj, uint16_t *Value)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  int32_t ret = STHS34PF80_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
  sths34pf80_avg_tobject_num_t raw_value;

  /* Get the raw value */
  if (sths34pf80_avg_tobject_num_get(&(pObj->Ctx), &raw_value) != STHS34PF80_OK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3320      	adds	r3, #32
 8003e9e:	f107 020b 	add.w	r2, r7, #11
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 f9ab 	bl	8004200 <sths34pf80_avg_tobject_num_get>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <STHS34PF80_GetAvgTmos+0x2a>
  {
    return STHS34PF80_ERROR;
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb4:	e03f      	b.n	8003f36 <STHS34PF80_GetAvgTmos+0xaa>
  }

  switch (raw_value)
 8003eb6:	7afb      	ldrb	r3, [r7, #11]
 8003eb8:	2b07      	cmp	r3, #7
 8003eba:	d837      	bhi.n	8003f2c <STHS34PF80_GetAvgTmos+0xa0>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <STHS34PF80_GetAvgTmos+0x38>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003ee5 	.word	0x08003ee5
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	08003ef5 	.word	0x08003ef5
 8003ed0:	08003efd 	.word	0x08003efd
 8003ed4:	08003f05 	.word	0x08003f05
 8003ed8:	08003f0f 	.word	0x08003f0f
 8003edc:	08003f19 	.word	0x08003f19
 8003ee0:	08003f23 	.word	0x08003f23
  {
    case STHS34PF80_AVG_TMOS_2:
      *Value = 2;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	801a      	strh	r2, [r3, #0]
      break;
 8003eea:	e023      	b.n	8003f34 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_8:
      *Value = 8;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2208      	movs	r2, #8
 8003ef0:	801a      	strh	r2, [r3, #0]
      break;
 8003ef2:	e01f      	b.n	8003f34 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_32:
      *Value = 32;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	801a      	strh	r2, [r3, #0]
      break;
 8003efa:	e01b      	b.n	8003f34 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_128:
      *Value = 128;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	801a      	strh	r2, [r3, #0]
      break;
 8003f02:	e017      	b.n	8003f34 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_256:
      *Value = 256;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f0a:	801a      	strh	r2, [r3, #0]
      break;
 8003f0c:	e012      	b.n	8003f34 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_512:
      *Value = 512;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f14:	801a      	strh	r2, [r3, #0]
      break;
 8003f16:	e00d      	b.n	8003f34 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_1024:
      *Value = 1024;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f1e:	801a      	strh	r2, [r3, #0]
      break;
 8003f20:	e008      	b.n	8003f34 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_2048:
      *Value = 2048;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f28:	801a      	strh	r2, [r3, #0]
      break;
 8003f2a:	e003      	b.n	8003f34 <STHS34PF80_GetAvgTmos+0xa8>

    default:
      ret = STHS34PF80_ERROR;
 8003f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f30:	60fb      	str	r3, [r7, #12]
      break;
 8003f32:	bf00      	nop
  }

  return ret;
 8003f34:	68fb      	ldr	r3, [r7, #12]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop

08003f40 <STHS34PF80_SetAvgTmos>:
  * @param  pObj the device pObj
  * @param  Value the value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_SetAvgTmos(STHS34PF80_Object_t *pObj, uint16_t Value)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	807b      	strh	r3, [r7, #2]
  int32_t ret = STHS34PF80_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
  sths34pf80_avg_tobject_num_t raw_value;

  raw_value = (Value <= 2U) ? STHS34PF80_AVG_TMOS_2
            : (Value <= 8U) ? STHS34PF80_AVG_TMOS_8
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d922      	bls.n	8003f9c <STHS34PF80_SetAvgTmos+0x5c>
 8003f56:	887b      	ldrh	r3, [r7, #2]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d91d      	bls.n	8003f98 <STHS34PF80_SetAvgTmos+0x58>
 8003f5c:	887b      	ldrh	r3, [r7, #2]
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d918      	bls.n	8003f94 <STHS34PF80_SetAvgTmos+0x54>
 8003f62:	887b      	ldrh	r3, [r7, #2]
 8003f64:	2b80      	cmp	r3, #128	; 0x80
 8003f66:	d913      	bls.n	8003f90 <STHS34PF80_SetAvgTmos+0x50>
 8003f68:	887b      	ldrh	r3, [r7, #2]
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6e:	d90d      	bls.n	8003f8c <STHS34PF80_SetAvgTmos+0x4c>
 8003f70:	887b      	ldrh	r3, [r7, #2]
 8003f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f76:	d907      	bls.n	8003f88 <STHS34PF80_SetAvgTmos+0x48>
 8003f78:	887b      	ldrh	r3, [r7, #2]
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7e:	d801      	bhi.n	8003f84 <STHS34PF80_SetAvgTmos+0x44>
 8003f80:	2306      	movs	r3, #6
 8003f82:	e00c      	b.n	8003f9e <STHS34PF80_SetAvgTmos+0x5e>
 8003f84:	2307      	movs	r3, #7
 8003f86:	e00a      	b.n	8003f9e <STHS34PF80_SetAvgTmos+0x5e>
 8003f88:	2305      	movs	r3, #5
 8003f8a:	e008      	b.n	8003f9e <STHS34PF80_SetAvgTmos+0x5e>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	e006      	b.n	8003f9e <STHS34PF80_SetAvgTmos+0x5e>
 8003f90:	2303      	movs	r3, #3
 8003f92:	e004      	b.n	8003f9e <STHS34PF80_SetAvgTmos+0x5e>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e002      	b.n	8003f9e <STHS34PF80_SetAvgTmos+0x5e>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <STHS34PF80_SetAvgTmos+0x5e>
 8003f9c:	2300      	movs	r3, #0
  raw_value = (Value <= 2U) ? STHS34PF80_AVG_TMOS_2
 8003f9e:	72fb      	strb	r3, [r7, #11]
            : (Value <= 256U) ? STHS34PF80_AVG_TMOS_256
            : (Value <= 512U) ? STHS34PF80_AVG_TMOS_512
            : (Value <= 1024U) ? STHS34PF80_AVG_TMOS_1024
            :                    STHS34PF80_AVG_TMOS_2048;

  if (sths34pf80_avg_tobject_num_set(&(pObj->Ctx), raw_value) != STHS34PF80_OK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3320      	adds	r3, #32
 8003fa4:	7afa      	ldrb	r2, [r7, #11]
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f902 	bl	80041b2 <sths34pf80_avg_tobject_num_set>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <STHS34PF80_SetAvgTmos+0x7a>
  {
    return STHS34PF80_ERROR;
 8003fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb8:	e000      	b.n	8003fbc <STHS34PF80_SetAvgTmos+0x7c>
  }

  return ret;
 8003fba:	68fb      	ldr	r3, [r7, #12]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <STHS34PF80_GetAvgT>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetAvgT(STHS34PF80_Object_t *pObj, uint8_t *Value)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  int32_t ret = STHS34PF80_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
  sths34pf80_avg_tambient_num_t raw_value;

  /* Get the raw value */
  if (sths34pf80_avg_tambient_num_get(&(pObj->Ctx), &raw_value) != STHS34PF80_OK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3320      	adds	r3, #32
 8003fd6:	f107 020b 	add.w	r2, r7, #11
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 f95f 	bl	80042a0 <sths34pf80_avg_tambient_num_get>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <STHS34PF80_GetAvgT+0x2a>
  {
    return STHS34PF80_ERROR;
 8003fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fec:	e023      	b.n	8004036 <STHS34PF80_GetAvgT+0x72>
  }

  switch (raw_value)
 8003fee:	7afb      	ldrb	r3, [r7, #11]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d81b      	bhi.n	800402c <STHS34PF80_GetAvgT+0x68>
 8003ff4:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <STHS34PF80_GetAvgT+0x38>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	0800400d 	.word	0x0800400d
 8004000:	08004015 	.word	0x08004015
 8004004:	0800401d 	.word	0x0800401d
 8004008:	08004025 	.word	0x08004025
  {
    case STHS34PF80_AVG_T_8:
      *Value = 8;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2208      	movs	r2, #8
 8004010:	701a      	strb	r2, [r3, #0]
      break;
 8004012:	e00f      	b.n	8004034 <STHS34PF80_GetAvgT+0x70>

    case STHS34PF80_AVG_T_4:
      *Value = 4;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2204      	movs	r2, #4
 8004018:	701a      	strb	r2, [r3, #0]
      break;
 800401a:	e00b      	b.n	8004034 <STHS34PF80_GetAvgT+0x70>

    case STHS34PF80_AVG_T_2:
      *Value = 2;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2202      	movs	r2, #2
 8004020:	701a      	strb	r2, [r3, #0]
      break;
 8004022:	e007      	b.n	8004034 <STHS34PF80_GetAvgT+0x70>

    case STHS34PF80_AVG_T_1:
      *Value = 1;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
      break;
 800402a:	e003      	b.n	8004034 <STHS34PF80_GetAvgT+0x70>

    default:
      ret = STHS34PF80_ERROR;
 800402c:	f04f 33ff 	mov.w	r3, #4294967295
 8004030:	60fb      	str	r3, [r7, #12]
      break;
 8004032:	bf00      	nop
  }

  return ret;
 8004034:	68fb      	ldr	r3, [r7, #12]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop

08004040 <STHS34PF80_GetGainFactor>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetGainFactor(STHS34PF80_Object_t *pObj, uint8_t *Value)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  int32_t ret = STHS34PF80_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
  sths34pf80_gain_mode_t raw_value;

  /* Get the raw value */
  if (sths34pf80_gain_mode_get(&(pObj->Ctx), &raw_value) != STHS34PF80_OK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3320      	adds	r3, #32
 8004052:	f107 020b 	add.w	r2, r7, #11
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f959 	bl	8004310 <sths34pf80_gain_mode_get>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <STHS34PF80_GetGainFactor+0x2a>
  {
    return STHS34PF80_ERROR;
 8004064:	f04f 33ff 	mov.w	r3, #4294967295
 8004068:	e012      	b.n	8004090 <STHS34PF80_GetGainFactor+0x50>
  }

  switch (raw_value)
 800406a:	7afb      	ldrb	r3, [r7, #11]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <STHS34PF80_GetGainFactor+0x36>
 8004070:	2b07      	cmp	r3, #7
 8004072:	d004      	beq.n	800407e <STHS34PF80_GetGainFactor+0x3e>
 8004074:	e007      	b.n	8004086 <STHS34PF80_GetGainFactor+0x46>
  {
    case STHS34PF80_GAIN_WIDE_MODE:
      *Value = 8;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2208      	movs	r2, #8
 800407a:	701a      	strb	r2, [r3, #0]
      break;
 800407c:	e007      	b.n	800408e <STHS34PF80_GetGainFactor+0x4e>

    case STHS34PF80_GAIN_DEFAULT_MODE:
      *Value = 1;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2201      	movs	r2, #1
 8004082:	701a      	strb	r2, [r3, #0]
      break;
 8004084:	e003      	b.n	800408e <STHS34PF80_GetGainFactor+0x4e>

    default:
      ret = STHS34PF80_ERROR;
 8004086:	f04f 33ff 	mov.w	r3, #4294967295
 800408a:	60fb      	str	r3, [r7, #12]
      break;
 800408c:	bf00      	nop
  }

  return ret;
 800408e:	68fb      	ldr	r3, [r7, #12]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <STHS34PF80_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the sensitivity is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetSensitivity(STHS34PF80_Object_t *pObj, uint16_t *Value)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  if (sths34pf80_tmos_sensitivity_get(&(pObj->Ctx), Value) != STHS34PF80_OK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3320      	adds	r3, #32
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 f958 	bl	800435e <sths34pf80_tmos_sensitivity_get>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <STHS34PF80_GetSensitivity+0x22>
  {
    return STHS34PF80_ERROR;
 80040b4:	f04f 33ff 	mov.w	r3, #4294967295
 80040b8:	e000      	b.n	80040bc <STHS34PF80_GetSensitivity+0x24>
  }

  return STHS34PF80_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80040c4:	b590      	push	{r4, r7, lr}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	461a      	mov	r2, r3
 80040d0:	460b      	mov	r3, r1
 80040d2:	72fb      	strb	r3, [r7, #11]
 80040d4:	4613      	mov	r3, r2
 80040d6:	813b      	strh	r3, [r7, #8]
  STHS34PF80_Object_t *pObj = (STHS34PF80_Object_t *)Handle;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	695c      	ldr	r4, [r3, #20]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	7b1b      	ldrb	r3, [r3, #12]
 80040e4:	b298      	uxth	r0, r3
 80040e6:	7afb      	ldrb	r3, [r7, #11]
 80040e8:	b299      	uxth	r1, r3
 80040ea:	893b      	ldrh	r3, [r7, #8]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	47a0      	blx	r4
 80040f0:	4603      	mov	r3, r0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd90      	pop	{r4, r7, pc}

080040fa <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80040fa:	b590      	push	{r4, r7, lr}
 80040fc:	b087      	sub	sp, #28
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	461a      	mov	r2, r3
 8004106:	460b      	mov	r3, r1
 8004108:	72fb      	strb	r3, [r7, #11]
 800410a:	4613      	mov	r3, r2
 800410c:	813b      	strh	r3, [r7, #8]
  STHS34PF80_Object_t *pObj = (STHS34PF80_Object_t *)Handle;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	691c      	ldr	r4, [r3, #16]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	7b1b      	ldrb	r3, [r3, #12]
 800411a:	b298      	uxth	r0, r3
 800411c:	7afb      	ldrb	r3, [r7, #11]
 800411e:	b299      	uxth	r1, r3
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	47a0      	blx	r4
 8004126:	4603      	mov	r3, r0
}
 8004128:	4618      	mov	r0, r3
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd90      	pop	{r4, r7, pc}

08004130 <sths34pf80_read_reg>:
  *
  */
int32_t __weak sths34pf80_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	461a      	mov	r2, r3
 800413c:	460b      	mov	r3, r1
 800413e:	72fb      	strb	r3, [r7, #11]
 8004140:	4613      	mov	r3, r2
 8004142:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685c      	ldr	r4, [r3, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	68d8      	ldr	r0, [r3, #12]
 800414c:	893b      	ldrh	r3, [r7, #8]
 800414e:	7af9      	ldrb	r1, [r7, #11]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	47a0      	blx	r4
 8004154:	6178      	str	r0, [r7, #20]

  return ret;
 8004156:	697b      	ldr	r3, [r7, #20]
}
 8004158:	4618      	mov	r0, r3
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd90      	pop	{r4, r7, pc}

08004160 <sths34pf80_write_reg>:
  *
  */
int32_t __weak sths34pf80_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	461a      	mov	r2, r3
 800416c:	460b      	mov	r3, r1
 800416e:	72fb      	strb	r3, [r7, #11]
 8004170:	4613      	mov	r3, r2
 8004172:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681c      	ldr	r4, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	68d8      	ldr	r0, [r3, #12]
 800417c:	893b      	ldrh	r3, [r7, #8]
 800417e:	7af9      	ldrb	r1, [r7, #11]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	47a0      	blx	r4
 8004184:	6178      	str	r0, [r7, #20]

  return ret;
 8004186:	697b      	ldr	r3, [r7, #20]
}
 8004188:	4618      	mov	r0, r3
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	bd90      	pop	{r4, r7, pc}

08004190 <sths34pf80_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_WHO_AM_I, val, 1);
 800419a:	2301      	movs	r3, #1
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	210f      	movs	r1, #15
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ffc5 	bl	8004130 <sths34pf80_read_reg>
 80041a6:	60f8      	str	r0, [r7, #12]

  return ret;
 80041a8:	68fb      	ldr	r3, [r7, #12]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <sths34pf80_avg_tobject_num_set>:
  * @param  val      AVG_TMOS_2, AVG_TMOS_8, AVG_TMOS_32, AVG_TMOS_128, AVG_TMOS_256, AVG_TMOS_512, AVG_TMOS_1024, AVG_TMOS_2048,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_avg_tobject_num_set(stmdev_ctx_t *ctx, sths34pf80_avg_tobject_num_t val)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	70fb      	strb	r3, [r7, #3]
  sths34pf80_avg_trim_t avg_trim;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 80041be:	f107 0208 	add.w	r2, r7, #8
 80041c2:	2301      	movs	r3, #1
 80041c4:	2110      	movs	r1, #16
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff ffb2 	bl	8004130 <sths34pf80_read_reg>
 80041cc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10f      	bne.n	80041f4 <sths34pf80_avg_tobject_num_set+0x42>
  {
    avg_trim.avg_tmos = ((uint8_t)val & 0x7);
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	7a3b      	ldrb	r3, [r7, #8]
 80041de:	f362 0302 	bfi	r3, r2, #0, #3
 80041e2:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 80041e4:	f107 0208 	add.w	r2, r7, #8
 80041e8:	2301      	movs	r3, #1
 80041ea:	2110      	movs	r1, #16
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ffb7 	bl	8004160 <sths34pf80_write_reg>
 80041f2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041f4:	68fb      	ldr	r3, [r7, #12]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <sths34pf80_avg_tobject_num_get>:
  * @param  val      AVG_TMOS_2, AVG_TMOS_8, AVG_TMOS_32, AVG_TMOS_128, AVG_TMOS_256, AVG_TMOS_512, AVG_TMOS_1024, AVG_TMOS_2048,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_avg_tobject_num_get(stmdev_ctx_t *ctx, sths34pf80_avg_tobject_num_t *val)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  sths34pf80_avg_trim_t avg_trim;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 800420a:	f107 0208 	add.w	r2, r7, #8
 800420e:	2301      	movs	r3, #1
 8004210:	2110      	movs	r1, #16
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff ff8c 	bl	8004130 <sths34pf80_read_reg>
 8004218:	60f8      	str	r0, [r7, #12]

  switch (avg_trim.avg_tmos)
 800421a:	7a3b      	ldrb	r3, [r7, #8]
 800421c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b07      	cmp	r3, #7
 8004224:	d832      	bhi.n	800428c <sths34pf80_avg_tobject_num_get+0x8c>
 8004226:	a201      	add	r2, pc, #4	; (adr r2, 800422c <sths34pf80_avg_tobject_num_get+0x2c>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	0800424d 	.word	0x0800424d
 8004230:	08004255 	.word	0x08004255
 8004234:	0800425d 	.word	0x0800425d
 8004238:	08004265 	.word	0x08004265
 800423c:	0800426d 	.word	0x0800426d
 8004240:	08004275 	.word	0x08004275
 8004244:	0800427d 	.word	0x0800427d
 8004248:	08004285 	.word	0x08004285
  {
    case STHS34PF80_AVG_TMOS_2:
      *val = STHS34PF80_AVG_TMOS_2;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]
      break;
 8004252:	e01f      	b.n	8004294 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_8:
      *val = STHS34PF80_AVG_TMOS_8;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2201      	movs	r2, #1
 8004258:	701a      	strb	r2, [r3, #0]
      break;
 800425a:	e01b      	b.n	8004294 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_32:
      *val = STHS34PF80_AVG_TMOS_32;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2202      	movs	r2, #2
 8004260:	701a      	strb	r2, [r3, #0]
      break;
 8004262:	e017      	b.n	8004294 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_128:
      *val = STHS34PF80_AVG_TMOS_128;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2203      	movs	r2, #3
 8004268:	701a      	strb	r2, [r3, #0]
      break;
 800426a:	e013      	b.n	8004294 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_256:
      *val = STHS34PF80_AVG_TMOS_256;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2204      	movs	r2, #4
 8004270:	701a      	strb	r2, [r3, #0]
      break;
 8004272:	e00f      	b.n	8004294 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_512:
      *val = STHS34PF80_AVG_TMOS_512;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2205      	movs	r2, #5
 8004278:	701a      	strb	r2, [r3, #0]
      break;
 800427a:	e00b      	b.n	8004294 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_1024:
      *val = STHS34PF80_AVG_TMOS_1024;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2206      	movs	r2, #6
 8004280:	701a      	strb	r2, [r3, #0]
      break;
 8004282:	e007      	b.n	8004294 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_2048:
      *val = STHS34PF80_AVG_TMOS_2048;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2207      	movs	r2, #7
 8004288:	701a      	strb	r2, [r3, #0]
      break;
 800428a:	e003      	b.n	8004294 <sths34pf80_avg_tobject_num_get+0x94>

    default:
      *val = STHS34PF80_AVG_TMOS_2;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
      break;
 8004292:	bf00      	nop
  }
  return ret;
 8004294:	68fb      	ldr	r3, [r7, #12]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop

080042a0 <sths34pf80_avg_tambient_num_get>:
  * @param  val      AVG_T_8, AVG_T_4, AVG_T_2, AVG_T_1,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_avg_tambient_num_get(stmdev_ctx_t *ctx, sths34pf80_avg_tambient_num_t *val)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  sths34pf80_avg_trim_t avg_trim;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 80042aa:	f107 0208 	add.w	r2, r7, #8
 80042ae:	2301      	movs	r3, #1
 80042b0:	2110      	movs	r1, #16
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff ff3c 	bl	8004130 <sths34pf80_read_reg>
 80042b8:	60f8      	str	r0, [r7, #12]

  switch (avg_trim.avg_t)
 80042ba:	7a3b      	ldrb	r3, [r7, #8]
 80042bc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d81a      	bhi.n	80042fc <sths34pf80_avg_tambient_num_get+0x5c>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <sths34pf80_avg_tambient_num_get+0x2c>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	080042dd 	.word	0x080042dd
 80042d0:	080042e5 	.word	0x080042e5
 80042d4:	080042ed 	.word	0x080042ed
 80042d8:	080042f5 	.word	0x080042f5
  {
    case STHS34PF80_AVG_T_8:
      *val = STHS34PF80_AVG_T_8;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
      break;
 80042e2:	e00f      	b.n	8004304 <sths34pf80_avg_tambient_num_get+0x64>

    case STHS34PF80_AVG_T_4:
      *val = STHS34PF80_AVG_T_4;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
      break;
 80042ea:	e00b      	b.n	8004304 <sths34pf80_avg_tambient_num_get+0x64>

    case STHS34PF80_AVG_T_2:
      *val = STHS34PF80_AVG_T_2;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2202      	movs	r2, #2
 80042f0:	701a      	strb	r2, [r3, #0]
      break;
 80042f2:	e007      	b.n	8004304 <sths34pf80_avg_tambient_num_get+0x64>

    case STHS34PF80_AVG_T_1:
      *val = STHS34PF80_AVG_T_1;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2203      	movs	r2, #3
 80042f8:	701a      	strb	r2, [r3, #0]
      break;
 80042fa:	e003      	b.n	8004304 <sths34pf80_avg_tambient_num_get+0x64>

    default:
      *val = STHS34PF80_AVG_T_8;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
      break;
 8004302:	bf00      	nop
  }
  return ret;
 8004304:	68fb      	ldr	r3, [r7, #12]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop

08004310 <sths34pf80_gain_mode_get>:
  * @param  val      range: GAIN_WIDE_MODE, GAIN_DEFAULT_MODE
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_gain_mode_get(stmdev_ctx_t *ctx, sths34pf80_gain_mode_t *val)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  sths34pf80_ctrl0_t ctrl0;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL0, (uint8_t *)&ctrl0, 1);
 800431a:	f107 0208 	add.w	r2, r7, #8
 800431e:	2301      	movs	r3, #1
 8004320:	2117      	movs	r1, #23
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff ff04 	bl	8004130 <sths34pf80_read_reg>
 8004328:	60f8      	str	r0, [r7, #12]

  switch (ctrl0.gain)
 800432a:	7a3b      	ldrb	r3, [r7, #8]
 800432c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <sths34pf80_gain_mode_get+0x2c>
 8004336:	2b07      	cmp	r3, #7
 8004338:	d004      	beq.n	8004344 <sths34pf80_gain_mode_get+0x34>
 800433a:	e007      	b.n	800434c <sths34pf80_gain_mode_get+0x3c>
  {
    case STHS34PF80_GAIN_WIDE_MODE:
      *val = STHS34PF80_GAIN_WIDE_MODE;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]
      break;
 8004342:	e007      	b.n	8004354 <sths34pf80_gain_mode_get+0x44>

    case STHS34PF80_GAIN_DEFAULT_MODE:
      *val = STHS34PF80_GAIN_DEFAULT_MODE;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2207      	movs	r2, #7
 8004348:	701a      	strb	r2, [r3, #0]
      break;
 800434a:	e003      	b.n	8004354 <sths34pf80_gain_mode_get+0x44>

    default:
      *val = STHS34PF80_GAIN_DEFAULT_MODE;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2207      	movs	r2, #7
 8004350:	701a      	strb	r2, [r3, #0]
      break;
 8004352:	bf00      	nop
  }

  return ret;
 8004354:	68fb      	ldr	r3, [r7, #12]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <sths34pf80_tmos_sensitivity_get>:
  * @param  val      rounded sensitivity value
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tmos_sensitivity_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  sths34pf80_sens_data_t data;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_SENS_DATA, (uint8_t *)&data, 1);
 8004368:	f107 0208 	add.w	r2, r7, #8
 800436c:	2301      	movs	r3, #1
 800436e:	211d      	movs	r1, #29
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff fedd 	bl	8004130 <sths34pf80_read_reg>
 8004376:	60f8      	str	r0, [r7, #12]
  *val = (int8_t)data.sens * 16 + 2048;
 8004378:	7a3b      	ldrb	r3, [r7, #8]
 800437a:	b25b      	sxtb	r3, r3
 800437c:	3380      	adds	r3, #128	; 0x80
 800437e:	b29b      	uxth	r3, r3
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	b29a      	uxth	r2, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	801a      	strh	r2, [r3, #0]

  return ret;
 8004388:	68fb      	ldr	r3, [r7, #12]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <sths34pf80_tmos_odr_set>:
  * @param  val      TMOS_ODR_OFF, TMOS_ODR_AT_0Hz25, TMOS_ODR_AT_0Hz50, TMOS_ODR_1Hz, TMOS_ODR_2Hz, TMOS_ODR_4Hz, TMOS_ODR_8Hz, TMOS_ODR_15Hz, TMOS_ODR_30Hz,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tmos_odr_set(stmdev_ctx_t *ctx, sths34pf80_tmos_odr_t val)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl1_t ctrl1;
  sths34pf80_avg_trim_t avg_trim;
  sths34pf80_tmos_odr_t max_odr = STHS34PF80_TMOS_ODR_AT_30Hz;
 80043a0:	2308      	movs	r3, #8
 80043a2:	75fb      	strb	r3, [r7, #23]
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 80043a4:	f107 020c 	add.w	r2, r7, #12
 80043a8:	2301      	movs	r3, #1
 80043aa:	2120      	movs	r1, #32
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff febf 	bl	8004130 <sths34pf80_read_reg>
 80043b2:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d12e      	bne.n	8004418 <sths34pf80_tmos_odr_set+0x84>
  {
    ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 80043ba:	f107 0208 	add.w	r2, r7, #8
 80043be:	2301      	movs	r3, #1
 80043c0:	2110      	movs	r1, #16
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff feb4 	bl	8004130 <sths34pf80_read_reg>
 80043c8:	6138      	str	r0, [r7, #16]

    switch (avg_trim.avg_tmos)
 80043ca:	7a3b      	ldrb	r3, [r7, #8]
 80043cc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	3b03      	subs	r3, #3
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d80d      	bhi.n	80043f4 <sths34pf80_tmos_odr_set+0x60>
 80043d8:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <sths34pf80_tmos_odr_set+0x4c>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	080043fb 	.word	0x080043fb
 80043e4:	08004401 	.word	0x08004401
 80043e8:	08004407 	.word	0x08004407
 80043ec:	0800440d 	.word	0x0800440d
 80043f0:	08004413 	.word	0x08004413
    {
      case STHS34PF80_AVG_TMOS_2:
      case STHS34PF80_AVG_TMOS_8:
      case STHS34PF80_AVG_TMOS_32:
        max_odr = STHS34PF80_TMOS_ODR_AT_30Hz;
 80043f4:	2308      	movs	r3, #8
 80043f6:	75fb      	strb	r3, [r7, #23]
        break;
 80043f8:	e00e      	b.n	8004418 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_128:
        max_odr = STHS34PF80_TMOS_ODR_AT_8Hz;
 80043fa:	2306      	movs	r3, #6
 80043fc:	75fb      	strb	r3, [r7, #23]
        break;
 80043fe:	e00b      	b.n	8004418 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_256:
        max_odr = STHS34PF80_TMOS_ODR_AT_4Hz;
 8004400:	2305      	movs	r3, #5
 8004402:	75fb      	strb	r3, [r7, #23]
        break;
 8004404:	e008      	b.n	8004418 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_512:
        max_odr = STHS34PF80_TMOS_ODR_AT_2Hz;
 8004406:	2304      	movs	r3, #4
 8004408:	75fb      	strb	r3, [r7, #23]
        break;
 800440a:	e005      	b.n	8004418 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_1024:
        max_odr = STHS34PF80_TMOS_ODR_AT_1Hz;
 800440c:	2303      	movs	r3, #3
 800440e:	75fb      	strb	r3, [r7, #23]
        break;
 8004410:	e002      	b.n	8004418 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_2048:
        max_odr = STHS34PF80_TMOS_ODR_AT_0Hz50;
 8004412:	2302      	movs	r3, #2
 8004414:	75fb      	strb	r3, [r7, #23]
        break;
 8004416:	bf00      	nop
    }
  }

  if (ret == 0)
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d12f      	bne.n	800447e <sths34pf80_tmos_odr_set+0xea>
  {
    if (val > max_odr)
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	7dfb      	ldrb	r3, [r7, #23]
 8004422:	429a      	cmp	r2, r3
 8004424:	d902      	bls.n	800442c <sths34pf80_tmos_odr_set+0x98>
    {
      return -1;
 8004426:	f04f 33ff 	mov.w	r3, #4294967295
 800442a:	e029      	b.n	8004480 <sths34pf80_tmos_odr_set+0xec>
    }

    if (val > 0)
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d012      	beq.n	8004458 <sths34pf80_tmos_odr_set+0xc4>
    {
      /*
       * Do a clean reset algo procedure everytime odr is changed to an
       * operative state.
       */
      ctrl1.odr = 0;
 8004432:	7b3b      	ldrb	r3, [r7, #12]
 8004434:	f36f 0303 	bfc	r3, #0, #4
 8004438:	733b      	strb	r3, [r7, #12]
      ret = sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 800443a:	f107 020c 	add.w	r2, r7, #12
 800443e:	2301      	movs	r3, #1
 8004440:	2120      	movs	r1, #32
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff fe8c 	bl	8004160 <sths34pf80_write_reg>
 8004448:	6138      	str	r0, [r7, #16]

      ret += sths34pf80_reset_algo(ctx);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f993 	bl	8004776 <sths34pf80_reset_algo>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4413      	add	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
    }

    ctrl1.odr = ((uint8_t)val & 0xf);
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	b2da      	uxtb	r2, r3
 8004460:	7b3b      	ldrb	r3, [r7, #12]
 8004462:	f362 0303 	bfi	r3, r2, #0, #4
 8004466:	733b      	strb	r3, [r7, #12]
    ret += sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8004468:	f107 020c 	add.w	r2, r7, #12
 800446c:	2301      	movs	r3, #1
 800446e:	2120      	movs	r1, #32
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff fe75 	bl	8004160 <sths34pf80_write_reg>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4413      	add	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
  }

  return ret;
 800447e:	693b      	ldr	r3, [r7, #16]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <sths34pf80_tmos_odr_get>:
  * @param  val      TMOS_ODR_OFF, TMOS_ODR_AT_0Hz25, TMOS_ODR_AT_0Hz50, TMOS_ODR_1Hz, TMOS_ODR_2Hz, TMOS_ODR_4Hz, TMOS_ODR_8Hz, TMOS_ODR_15Hz, TMOS_ODR_30Hz,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tmos_odr_get(stmdev_ctx_t *ctx, sths34pf80_tmos_odr_t *val)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  sths34pf80_ctrl1_t ctrl1;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8004492:	f107 0208 	add.w	r2, r7, #8
 8004496:	2301      	movs	r3, #1
 8004498:	2120      	movs	r1, #32
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff fe48 	bl	8004130 <sths34pf80_read_reg>
 80044a0:	60f8      	str	r0, [r7, #12]

  switch (ctrl1.odr)
 80044a2:	7a3b      	ldrb	r3, [r7, #8]
 80044a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d838      	bhi.n	8004520 <sths34pf80_tmos_odr_get+0x98>
 80044ae:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <sths34pf80_tmos_odr_get+0x2c>)
 80044b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b4:	080044d9 	.word	0x080044d9
 80044b8:	080044e1 	.word	0x080044e1
 80044bc:	080044e9 	.word	0x080044e9
 80044c0:	080044f1 	.word	0x080044f1
 80044c4:	080044f9 	.word	0x080044f9
 80044c8:	08004501 	.word	0x08004501
 80044cc:	08004509 	.word	0x08004509
 80044d0:	08004511 	.word	0x08004511
 80044d4:	08004519 	.word	0x08004519
  {
    case STHS34PF80_TMOS_ODR_OFF:
      *val = STHS34PF80_TMOS_ODR_OFF;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]
      break;
 80044de:	e023      	b.n	8004528 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_0Hz25:
      *val = STHS34PF80_TMOS_ODR_AT_0Hz25;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
      break;
 80044e6:	e01f      	b.n	8004528 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_0Hz50:
      *val = STHS34PF80_TMOS_ODR_AT_0Hz50;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2202      	movs	r2, #2
 80044ec:	701a      	strb	r2, [r3, #0]
      break;
 80044ee:	e01b      	b.n	8004528 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_1Hz:
      *val = STHS34PF80_TMOS_ODR_AT_1Hz;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2203      	movs	r2, #3
 80044f4:	701a      	strb	r2, [r3, #0]
      break;
 80044f6:	e017      	b.n	8004528 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_2Hz:
      *val = STHS34PF80_TMOS_ODR_AT_2Hz;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2204      	movs	r2, #4
 80044fc:	701a      	strb	r2, [r3, #0]
      break;
 80044fe:	e013      	b.n	8004528 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_4Hz:
      *val = STHS34PF80_TMOS_ODR_AT_4Hz;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2205      	movs	r2, #5
 8004504:	701a      	strb	r2, [r3, #0]
      break;
 8004506:	e00f      	b.n	8004528 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_8Hz:
      *val = STHS34PF80_TMOS_ODR_AT_8Hz;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2206      	movs	r2, #6
 800450c:	701a      	strb	r2, [r3, #0]
      break;
 800450e:	e00b      	b.n	8004528 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_15Hz:
      *val = STHS34PF80_TMOS_ODR_AT_15Hz;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2207      	movs	r2, #7
 8004514:	701a      	strb	r2, [r3, #0]
      break;
 8004516:	e007      	b.n	8004528 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_30Hz:
      *val = STHS34PF80_TMOS_ODR_AT_30Hz;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2208      	movs	r2, #8
 800451c:	701a      	strb	r2, [r3, #0]
      break;
 800451e:	e003      	b.n	8004528 <sths34pf80_tmos_odr_get+0xa0>

    default:
      *val = STHS34PF80_TMOS_ODR_OFF;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
      break;
 8004526:	bf00      	nop
  }
  return ret;
 8004528:	68fb      	ldr	r3, [r7, #12]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop

08004534 <sths34pf80_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl1_t ctrl1;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8004540:	f107 0208 	add.w	r2, r7, #8
 8004544:	2301      	movs	r3, #1
 8004546:	2120      	movs	r1, #32
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff fdf1 	bl	8004130 <sths34pf80_read_reg>
 800454e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10f      	bne.n	8004576 <sths34pf80_block_data_update_set+0x42>
  {
    ctrl1.bdu = val;
 8004556:	78fb      	ldrb	r3, [r7, #3]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	b2da      	uxtb	r2, r3
 800455e:	7a3b      	ldrb	r3, [r7, #8]
 8004560:	f362 1304 	bfi	r3, r2, #4, #1
 8004564:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8004566:	f107 0208 	add.w	r2, r7, #8
 800456a:	2301      	movs	r3, #1
 800456c:	2120      	movs	r1, #32
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff fdf6 	bl	8004160 <sths34pf80_write_reg>
 8004574:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004576:	68fb      	ldr	r3, [r7, #12]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <sths34pf80_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_mem_bank_set(stmdev_ctx_t *ctx, sths34pf80_mem_bank_t val)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl2_t ctrl2;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL2, (uint8_t *)&ctrl2, 1);
 800458c:	f107 0208 	add.w	r2, r7, #8
 8004590:	2301      	movs	r3, #1
 8004592:	2121      	movs	r1, #33	; 0x21
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fdcb 	bl	8004130 <sths34pf80_read_reg>
 800459a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10f      	bne.n	80045c2 <sths34pf80_mem_bank_set+0x42>
  {
    ctrl2.func_cfg_access = ((uint8_t)val & 0x1);
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	7a3b      	ldrb	r3, [r7, #8]
 80045ac:	f362 1304 	bfi	r3, r2, #4, #1
 80045b0:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_CTRL2, (uint8_t *)&ctrl2, 1);
 80045b2:	f107 0208 	add.w	r2, r7, #8
 80045b6:	2301      	movs	r3, #1
 80045b8:	2121      	movs	r1, #33	; 0x21
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff fdd0 	bl	8004160 <sths34pf80_write_reg>
 80045c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <sths34pf80_tobject_raw_get>:
  * @param  val      Object temperature output register.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tobject_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_TOBJECT_L, &buff[0], 2);
 80045d6:	f107 0208 	add.w	r2, r7, #8
 80045da:	2302      	movs	r3, #2
 80045dc:	2126      	movs	r1, #38	; 0x26
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fda6 	bl	8004130 <sths34pf80_read_reg>
 80045e4:	60f8      	str	r0, [r7, #12]

  *val = (int16_t)buff[1];
 80045e6:	7a7b      	ldrb	r3, [r7, #9]
 80045e8:	b21a      	sxth	r2, r3
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	7a3b      	ldrb	r3, [r7, #8]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	4413      	add	r3, r2
 8004600:	b29b      	uxth	r3, r3
 8004602:	b21a      	sxth	r2, r3
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	801a      	strh	r2, [r3, #0]

  return ret;
 8004608:	68fb      	ldr	r3, [r7, #12]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <sths34pf80_tambient_raw_get>:
  * @param  val      Ambient temperature output register.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tambient_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_TAMBIENT_L, &buff[0], 2);
 800461c:	f107 0208 	add.w	r2, r7, #8
 8004620:	2302      	movs	r3, #2
 8004622:	2128      	movs	r1, #40	; 0x28
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff fd83 	bl	8004130 <sths34pf80_read_reg>
 800462a:	60f8      	str	r0, [r7, #12]

  *val = (int16_t)buff[1];
 800462c:	7a7b      	ldrb	r3, [r7, #9]
 800462e:	b21a      	sxth	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800463a:	b29b      	uxth	r3, r3
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	b29a      	uxth	r2, r3
 8004640:	7a3b      	ldrb	r3, [r7, #8]
 8004642:	b29b      	uxth	r3, r3
 8004644:	4413      	add	r3, r2
 8004646:	b29b      	uxth	r3, r3
 8004648:	b21a      	sxth	r2, r3
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	801a      	strh	r2, [r3, #0]

  return ret;
 800464e:	68fb      	ldr	r3, [r7, #12]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <sths34pf80_func_cfg_write>:
  * @param  len      embedded register data len
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_func_cfg_write(stmdev_ctx_t *ctx, uint8_t addr, uint8_t *data, uint8_t len)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	461a      	mov	r2, r3
 8004664:	460b      	mov	r3, r1
 8004666:	72fb      	strb	r3, [r7, #11]
 8004668:	4613      	mov	r3, r2
 800466a:	72bb      	strb	r3, [r7, #10]
  sths34pf80_ctrl1_t ctrl1;
  uint8_t odr;
  sths34pf80_page_rw_t page_rw = {0};
 800466c:	2300      	movs	r3, #0
 800466e:	753b      	strb	r3, [r7, #20]
  int32_t ret;
  uint8_t i;

  /* Save current odr and enter PD mode */
  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8004670:	f107 0218 	add.w	r2, r7, #24
 8004674:	2301      	movs	r3, #1
 8004676:	2120      	movs	r1, #32
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff fd59 	bl	8004130 <sths34pf80_read_reg>
 800467e:	61f8      	str	r0, [r7, #28]
  odr = ctrl1.odr;
 8004680:	7e3b      	ldrb	r3, [r7, #24]
 8004682:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004686:	b2db      	uxtb	r3, r3
 8004688:	76bb      	strb	r3, [r7, #26]
  ctrl1.odr = 0;
 800468a:	7e3b      	ldrb	r3, [r7, #24]
 800468c:	f36f 0303 	bfc	r3, #0, #4
 8004690:	763b      	strb	r3, [r7, #24]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8004692:	f107 0218 	add.w	r2, r7, #24
 8004696:	2301      	movs	r3, #1
 8004698:	2120      	movs	r1, #32
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7ff fd60 	bl	8004160 <sths34pf80_write_reg>
 80046a0:	4602      	mov	r2, r0
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	4413      	add	r3, r2
 80046a6:	61fb      	str	r3, [r7, #28]

  /* Enable access to embedded functions register */
  ret += sths34pf80_mem_bank_set(ctx, STHS34PF80_EMBED_FUNC_MEM_BANK);
 80046a8:	2101      	movs	r1, #1
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff ff68 	bl	8004580 <sths34pf80_mem_bank_set>
 80046b0:	4602      	mov	r2, r0
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	61fb      	str	r3, [r7, #28]

  /* Enable write mode */
  page_rw.func_cfg_write = 1;
 80046b8:	7d3b      	ldrb	r3, [r7, #20]
 80046ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046be:	753b      	strb	r3, [r7, #20]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_PAGE_RW, (uint8_t *)&page_rw, 1);
 80046c0:	f107 0214 	add.w	r2, r7, #20
 80046c4:	2301      	movs	r3, #1
 80046c6:	2111      	movs	r1, #17
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f7ff fd49 	bl	8004160 <sths34pf80_write_reg>
 80046ce:	4602      	mov	r2, r0
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	4413      	add	r3, r2
 80046d4:	61fb      	str	r3, [r7, #28]

  /* Select register address (it will autoincrement when writing) */
  ret += sths34pf80_write_reg(ctx, STHS34PF80_FUNC_CFG_ADDR, &addr, 1);
 80046d6:	f107 020b 	add.w	r2, r7, #11
 80046da:	2301      	movs	r3, #1
 80046dc:	2108      	movs	r1, #8
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7ff fd3e 	bl	8004160 <sths34pf80_write_reg>
 80046e4:	4602      	mov	r2, r0
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	61fb      	str	r3, [r7, #28]

  for (i = 0; i < len; i++)
 80046ec:	2300      	movs	r3, #0
 80046ee:	76fb      	strb	r3, [r7, #27]
 80046f0:	e00e      	b.n	8004710 <sths34pf80_func_cfg_write+0xb8>
  {
    /* Write data */
    ret += sths34pf80_write_reg(ctx, STHS34PF80_FUNC_CFG_DATA, &data[i], 1);
 80046f2:	7efb      	ldrb	r3, [r7, #27]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	441a      	add	r2, r3
 80046f8:	2301      	movs	r3, #1
 80046fa:	2109      	movs	r1, #9
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7ff fd2f 	bl	8004160 <sths34pf80_write_reg>
 8004702:	4602      	mov	r2, r0
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4413      	add	r3, r2
 8004708:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < len; i++)
 800470a:	7efb      	ldrb	r3, [r7, #27]
 800470c:	3301      	adds	r3, #1
 800470e:	76fb      	strb	r3, [r7, #27]
 8004710:	7efa      	ldrb	r2, [r7, #27]
 8004712:	7abb      	ldrb	r3, [r7, #10]
 8004714:	429a      	cmp	r2, r3
 8004716:	d3ec      	bcc.n	80046f2 <sths34pf80_func_cfg_write+0x9a>
  }

  /* Disable write mode */
  page_rw.func_cfg_write = 0;
 8004718:	7d3b      	ldrb	r3, [r7, #20]
 800471a:	f36f 1386 	bfc	r3, #6, #1
 800471e:	753b      	strb	r3, [r7, #20]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_PAGE_RW, (uint8_t *)&page_rw, 1);
 8004720:	f107 0214 	add.w	r2, r7, #20
 8004724:	2301      	movs	r3, #1
 8004726:	2111      	movs	r1, #17
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f7ff fd19 	bl	8004160 <sths34pf80_write_reg>
 800472e:	4602      	mov	r2, r0
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	4413      	add	r3, r2
 8004734:	61fb      	str	r3, [r7, #28]

  /* Disable access to embedded functions register */
  ret += sths34pf80_mem_bank_set(ctx, STHS34PF80_MAIN_MEM_BANK);
 8004736:	2100      	movs	r1, #0
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7ff ff21 	bl	8004580 <sths34pf80_mem_bank_set>
 800473e:	4602      	mov	r2, r0
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	4413      	add	r3, r2
 8004744:	61fb      	str	r3, [r7, #28]

  /* Set saved odr back */
  ctrl1.odr = odr;
 8004746:	7ebb      	ldrb	r3, [r7, #26]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	b2da      	uxtb	r2, r3
 800474e:	7e3b      	ldrb	r3, [r7, #24]
 8004750:	f362 0303 	bfi	r3, r2, #0, #4
 8004754:	763b      	strb	r3, [r7, #24]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8004756:	f107 0218 	add.w	r2, r7, #24
 800475a:	2301      	movs	r3, #1
 800475c:	2120      	movs	r1, #32
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7ff fcfe 	bl	8004160 <sths34pf80_write_reg>
 8004764:	4602      	mov	r2, r0
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4413      	add	r3, r2
 800476a:	61fb      	str	r3, [r7, #28]

  return ret;
 800476c:	69fb      	ldr	r3, [r7, #28]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <sths34pf80_reset_algo>:
  * @param  val      reset algo structure
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_reset_algo(stmdev_ctx_t *ctx)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  tmp = 1;
 800477e:	2301      	movs	r3, #1
 8004780:	72fb      	strb	r3, [r7, #11]
  ret = sths34pf80_func_cfg_write(ctx, STHS34PF80_RESET_ALGO, &tmp, 1);
 8004782:	f107 020b 	add.w	r2, r7, #11
 8004786:	2301      	movs	r3, #1
 8004788:	212a      	movs	r1, #42	; 0x2a
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff ff64 	bl	8004658 <sths34pf80_func_cfg_write>
 8004790:	60f8      	str	r0, [r7, #12]

  return ret;
 8004792:	68fb      	ldr	r3, [r7, #12]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <SystemInit+0x20>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	4a05      	ldr	r2, [pc, #20]	; (80047bc <SystemInit+0x20>)
 80047a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047b0:	bf00      	nop
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	e000ed00 	.word	0xe000ed00

080047c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047c4:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <HAL_Init+0x40>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a0d      	ldr	r2, [pc, #52]	; (8004800 <HAL_Init+0x40>)
 80047ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_Init+0x40>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a0a      	ldr	r2, [pc, #40]	; (8004800 <HAL_Init+0x40>)
 80047d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_Init+0x40>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a07      	ldr	r2, [pc, #28]	; (8004800 <HAL_Init+0x40>)
 80047e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047e8:	2003      	movs	r0, #3
 80047ea:	f000 f94f 	bl	8004a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047ee:	2000      	movs	r0, #0
 80047f0:	f000 f808 	bl	8004804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047f4:	f7fe fca6 	bl	8003144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40023c00 	.word	0x40023c00

08004804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800480c:	4b12      	ldr	r3, [pc, #72]	; (8004858 <HAL_InitTick+0x54>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b12      	ldr	r3, [pc, #72]	; (800485c <HAL_InitTick+0x58>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	4619      	mov	r1, r3
 8004816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800481a:	fbb3 f3f1 	udiv	r3, r3, r1
 800481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f967 	bl	8004af6 <HAL_SYSTICK_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e00e      	b.n	8004850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b0f      	cmp	r3, #15
 8004836:	d80a      	bhi.n	800484e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004838:	2200      	movs	r2, #0
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	f000 f92f 	bl	8004aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004844:	4a06      	ldr	r2, [pc, #24]	; (8004860 <HAL_InitTick+0x5c>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	2000007c 	.word	0x2000007c
 800485c:	20000084 	.word	0x20000084
 8004860:	20000080 	.word	0x20000080

08004864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_IncTick+0x20>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	4b06      	ldr	r3, [pc, #24]	; (8004888 <HAL_IncTick+0x24>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4413      	add	r3, r2
 8004874:	4a04      	ldr	r2, [pc, #16]	; (8004888 <HAL_IncTick+0x24>)
 8004876:	6013      	str	r3, [r2, #0]
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000084 	.word	0x20000084
 8004888:	20000b68 	.word	0x20000b68

0800488c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return uwTick;
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <HAL_GetTick+0x14>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000b68 	.word	0x20000b68

080048a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048ac:	f7ff ffee 	bl	800488c <HAL_GetTick>
 80048b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d005      	beq.n	80048ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048be:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <HAL_Delay+0x44>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048ca:	bf00      	nop
 80048cc:	f7ff ffde 	bl	800488c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d8f7      	bhi.n	80048cc <HAL_Delay+0x28>
  {
  }
}
 80048dc:	bf00      	nop
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000084 	.word	0x20000084

080048ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <__NVIC_SetPriorityGrouping+0x44>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004908:	4013      	ands	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800491c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800491e:	4a04      	ldr	r2, [pc, #16]	; (8004930 <__NVIC_SetPriorityGrouping+0x44>)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	60d3      	str	r3, [r2, #12]
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004938:	4b04      	ldr	r3, [pc, #16]	; (800494c <__NVIC_GetPriorityGrouping+0x18>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	0a1b      	lsrs	r3, r3, #8
 800493e:	f003 0307 	and.w	r3, r3, #7
}
 8004942:	4618      	mov	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	e000ed00 	.word	0xe000ed00

08004950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800495a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495e:	2b00      	cmp	r3, #0
 8004960:	db0b      	blt.n	800497a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	f003 021f 	and.w	r2, r3, #31
 8004968:	4907      	ldr	r1, [pc, #28]	; (8004988 <__NVIC_EnableIRQ+0x38>)
 800496a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	2001      	movs	r0, #1
 8004972:	fa00 f202 	lsl.w	r2, r0, r2
 8004976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	e000e100 	.word	0xe000e100

0800498c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	6039      	str	r1, [r7, #0]
 8004996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499c:	2b00      	cmp	r3, #0
 800499e:	db0a      	blt.n	80049b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	490c      	ldr	r1, [pc, #48]	; (80049d8 <__NVIC_SetPriority+0x4c>)
 80049a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049aa:	0112      	lsls	r2, r2, #4
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	440b      	add	r3, r1
 80049b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049b4:	e00a      	b.n	80049cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	4908      	ldr	r1, [pc, #32]	; (80049dc <__NVIC_SetPriority+0x50>)
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	3b04      	subs	r3, #4
 80049c4:	0112      	lsls	r2, r2, #4
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	440b      	add	r3, r1
 80049ca:	761a      	strb	r2, [r3, #24]
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	e000e100 	.word	0xe000e100
 80049dc:	e000ed00 	.word	0xe000ed00

080049e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f1c3 0307 	rsb	r3, r3, #7
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	bf28      	it	cs
 80049fe:	2304      	movcs	r3, #4
 8004a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	3304      	adds	r3, #4
 8004a06:	2b06      	cmp	r3, #6
 8004a08:	d902      	bls.n	8004a10 <NVIC_EncodePriority+0x30>
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3b03      	subs	r3, #3
 8004a0e:	e000      	b.n	8004a12 <NVIC_EncodePriority+0x32>
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a14:	f04f 32ff 	mov.w	r2, #4294967295
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	401a      	ands	r2, r3
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a28:	f04f 31ff 	mov.w	r1, #4294967295
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a32:	43d9      	mvns	r1, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a38:	4313      	orrs	r3, r2
         );
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3724      	adds	r7, #36	; 0x24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a58:	d301      	bcc.n	8004a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e00f      	b.n	8004a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a5e:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <SysTick_Config+0x40>)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a66:	210f      	movs	r1, #15
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6c:	f7ff ff8e 	bl	800498c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <SysTick_Config+0x40>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a76:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <SysTick_Config+0x40>)
 8004a78:	2207      	movs	r2, #7
 8004a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	e000e010 	.word	0xe000e010

08004a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ff29 	bl	80048ec <__NVIC_SetPriorityGrouping>
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b086      	sub	sp, #24
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ab4:	f7ff ff3e 	bl	8004934 <__NVIC_GetPriorityGrouping>
 8004ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	6978      	ldr	r0, [r7, #20]
 8004ac0:	f7ff ff8e 	bl	80049e0 <NVIC_EncodePriority>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aca:	4611      	mov	r1, r2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff ff5d 	bl	800498c <__NVIC_SetPriority>
}
 8004ad2:	bf00      	nop
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ff31 	bl	8004950 <__NVIC_EnableIRQ>
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff ffa2 	bl	8004a48 <SysTick_Config>
 8004b04:	4603      	mov	r3, r0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e00e      	b.n	8004b3e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	795b      	ldrb	r3, [r3, #5]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7fe fb2f 	bl	8003194 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b54:	f7ff fe9a 	bl	800488c <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e099      	b.n	8004c98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b84:	e00f      	b.n	8004ba6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b86:	f7ff fe81 	bl	800488c <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b05      	cmp	r3, #5
 8004b92:	d908      	bls.n	8004ba6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2203      	movs	r2, #3
 8004b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e078      	b.n	8004c98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e8      	bne.n	8004b86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4b38      	ldr	r3, [pc, #224]	; (8004ca0 <HAL_DMA_Init+0x158>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d107      	bne.n	8004c10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 0307 	bic.w	r3, r3, #7
 8004c26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d117      	bne.n	8004c6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00e      	beq.n	8004c6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fa6f 	bl	8005130 <DMA_CheckFifoParam>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2240      	movs	r2, #64	; 0x40
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c66:	2301      	movs	r3, #1
 8004c68:	e016      	b.n	8004c98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa26 	bl	80050c4 <DMA_CalcBaseAndBitshift>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c80:	223f      	movs	r2, #63	; 0x3f
 8004c82:	409a      	lsls	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	f010803f 	.word	0xf010803f

08004ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_DMA_Start_IT+0x26>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e040      	b.n	8004d4c <HAL_DMA_Start_IT+0xa8>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d12f      	bne.n	8004d3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f9b8 	bl	8005068 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfc:	223f      	movs	r2, #63	; 0x3f
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0216 	orr.w	r2, r2, #22
 8004d12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0208 	orr.w	r2, r2, #8
 8004d2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e005      	b.n	8004d4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d46:	2302      	movs	r3, #2
 8004d48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d60:	4b8e      	ldr	r3, [pc, #568]	; (8004f9c <HAL_DMA_IRQHandler+0x248>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a8e      	ldr	r2, [pc, #568]	; (8004fa0 <HAL_DMA_IRQHandler+0x24c>)
 8004d66:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6a:	0a9b      	lsrs	r3, r3, #10
 8004d6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	2208      	movs	r2, #8
 8004d80:	409a      	lsls	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01a      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d013      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0204 	bic.w	r2, r2, #4
 8004da6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dac:	2208      	movs	r2, #8
 8004dae:	409a      	lsls	r2, r3
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	f043 0201 	orr.w	r2, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d012      	beq.n	8004df6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00b      	beq.n	8004df6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de2:	2201      	movs	r2, #1
 8004de4:	409a      	lsls	r2, r3
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	f043 0202 	orr.w	r2, r3, #2
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	409a      	lsls	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4013      	ands	r3, r2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d012      	beq.n	8004e2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00b      	beq.n	8004e2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e18:	2204      	movs	r2, #4
 8004e1a:	409a      	lsls	r2, r3
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	f043 0204 	orr.w	r2, r3, #4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e30:	2210      	movs	r2, #16
 8004e32:	409a      	lsls	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d043      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d03c      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4e:	2210      	movs	r2, #16
 8004e50:	409a      	lsls	r2, r3
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d018      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d108      	bne.n	8004e84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d024      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
 8004e82:	e01f      	b.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01b      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
 8004e94:	e016      	b.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d107      	bne.n	8004eb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0208 	bic.w	r2, r2, #8
 8004eb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec8:	2220      	movs	r2, #32
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 808f 	beq.w	8004ff4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8087 	beq.w	8004ff4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eea:	2220      	movs	r2, #32
 8004eec:	409a      	lsls	r2, r3
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b05      	cmp	r3, #5
 8004efc:	d136      	bne.n	8004f6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0216 	bic.w	r2, r2, #22
 8004f0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d103      	bne.n	8004f2e <HAL_DMA_IRQHandler+0x1da>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0208 	bic.w	r2, r2, #8
 8004f3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f42:	223f      	movs	r2, #63	; 0x3f
 8004f44:	409a      	lsls	r2, r3
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d07e      	beq.n	8005060 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	4798      	blx	r3
        }
        return;
 8004f6a:	e079      	b.n	8005060 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d01d      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10d      	bne.n	8004fa4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d031      	beq.n	8004ff4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
 8004f98:	e02c      	b.n	8004ff4 <HAL_DMA_IRQHandler+0x2a0>
 8004f9a:	bf00      	nop
 8004f9c:	2000007c 	.word	0x2000007c
 8004fa0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d023      	beq.n	8004ff4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
 8004fb4:	e01e      	b.n	8004ff4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10f      	bne.n	8004fe4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0210 	bic.w	r2, r2, #16
 8004fd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d032      	beq.n	8005062 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d022      	beq.n	800504e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2205      	movs	r2, #5
 800500c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	3301      	adds	r3, #1
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	429a      	cmp	r2, r3
 800502a:	d307      	bcc.n	800503c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f2      	bne.n	8005020 <HAL_DMA_IRQHandler+0x2cc>
 800503a:	e000      	b.n	800503e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800503c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
 800505e:	e000      	b.n	8005062 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005060:	bf00      	nop
    }
  }
}
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005084:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b40      	cmp	r3, #64	; 0x40
 8005094:	d108      	bne.n	80050a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80050a6:	e007      	b.n	80050b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]
}
 80050b8:	bf00      	nop
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	3b10      	subs	r3, #16
 80050d4:	4a14      	ldr	r2, [pc, #80]	; (8005128 <DMA_CalcBaseAndBitshift+0x64>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	091b      	lsrs	r3, r3, #4
 80050dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050de:	4a13      	ldr	r2, [pc, #76]	; (800512c <DMA_CalcBaseAndBitshift+0x68>)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d909      	bls.n	8005106 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	1d1a      	adds	r2, r3, #4
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	659a      	str	r2, [r3, #88]	; 0x58
 8005104:	e007      	b.n	8005116 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800510e:	f023 0303 	bic.w	r3, r3, #3
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	aaaaaaab 	.word	0xaaaaaaab
 800512c:	0800ae98 	.word	0x0800ae98

08005130 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d11f      	bne.n	800518a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b03      	cmp	r3, #3
 800514e:	d856      	bhi.n	80051fe <DMA_CheckFifoParam+0xce>
 8005150:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <DMA_CheckFifoParam+0x28>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	08005169 	.word	0x08005169
 800515c:	0800517b 	.word	0x0800517b
 8005160:	08005169 	.word	0x08005169
 8005164:	080051ff 	.word	0x080051ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d046      	beq.n	8005202 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005178:	e043      	b.n	8005202 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005182:	d140      	bne.n	8005206 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005188:	e03d      	b.n	8005206 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005192:	d121      	bne.n	80051d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b03      	cmp	r3, #3
 8005198:	d837      	bhi.n	800520a <DMA_CheckFifoParam+0xda>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <DMA_CheckFifoParam+0x70>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051b1 	.word	0x080051b1
 80051a4:	080051b7 	.word	0x080051b7
 80051a8:	080051b1 	.word	0x080051b1
 80051ac:	080051c9 	.word	0x080051c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      break;
 80051b4:	e030      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d025      	beq.n	800520e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051c6:	e022      	b.n	800520e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051d0:	d11f      	bne.n	8005212 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051d6:	e01c      	b.n	8005212 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d903      	bls.n	80051e6 <DMA_CheckFifoParam+0xb6>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d003      	beq.n	80051ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051e4:	e018      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	73fb      	strb	r3, [r7, #15]
      break;
 80051ea:	e015      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00e      	beq.n	8005216 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
      break;
 80051fc:	e00b      	b.n	8005216 <DMA_CheckFifoParam+0xe6>
      break;
 80051fe:	bf00      	nop
 8005200:	e00a      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
      break;
 8005202:	bf00      	nop
 8005204:	e008      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
      break;
 8005206:	bf00      	nop
 8005208:	e006      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
      break;
 800520a:	bf00      	nop
 800520c:	e004      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
      break;
 800520e:	bf00      	nop
 8005210:	e002      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
      break;   
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <DMA_CheckFifoParam+0xe8>
      break;
 8005216:	bf00      	nop
    }
  } 
  
  return status; 
 8005218:	7bfb      	ldrb	r3, [r7, #15]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop

08005228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005228:	b480      	push	{r7}
 800522a:	b089      	sub	sp, #36	; 0x24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800523a:	2300      	movs	r3, #0
 800523c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	e159      	b.n	80054f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005244:	2201      	movs	r2, #1
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4013      	ands	r3, r2
 8005256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	429a      	cmp	r2, r3
 800525e:	f040 8148 	bne.w	80054f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d005      	beq.n	800527a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005276:	2b02      	cmp	r3, #2
 8005278:	d130      	bne.n	80052dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	2203      	movs	r2, #3
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4013      	ands	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052b0:	2201      	movs	r2, #1
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4013      	ands	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	f003 0201 	and.w	r2, r3, #1
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d017      	beq.n	8005318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	2203      	movs	r2, #3
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	43db      	mvns	r3, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4013      	ands	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d123      	bne.n	800536c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	08da      	lsrs	r2, r3, #3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3208      	adds	r2, #8
 800532c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	220f      	movs	r2, #15
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	43db      	mvns	r3, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	4013      	ands	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4313      	orrs	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	08da      	lsrs	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3208      	adds	r2, #8
 8005366:	69b9      	ldr	r1, [r7, #24]
 8005368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	2203      	movs	r2, #3
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	43db      	mvns	r3, r3
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4013      	ands	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 0203 	and.w	r2, r3, #3
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4313      	orrs	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80a2 	beq.w	80054f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	4b57      	ldr	r3, [pc, #348]	; (8005510 <HAL_GPIO_Init+0x2e8>)
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	4a56      	ldr	r2, [pc, #344]	; (8005510 <HAL_GPIO_Init+0x2e8>)
 80053b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053bc:	6453      	str	r3, [r2, #68]	; 0x44
 80053be:	4b54      	ldr	r3, [pc, #336]	; (8005510 <HAL_GPIO_Init+0x2e8>)
 80053c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053ca:	4a52      	ldr	r2, [pc, #328]	; (8005514 <HAL_GPIO_Init+0x2ec>)
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	089b      	lsrs	r3, r3, #2
 80053d0:	3302      	adds	r3, #2
 80053d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	220f      	movs	r2, #15
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	43db      	mvns	r3, r3
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	4013      	ands	r3, r2
 80053ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a49      	ldr	r2, [pc, #292]	; (8005518 <HAL_GPIO_Init+0x2f0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d019      	beq.n	800542a <HAL_GPIO_Init+0x202>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a48      	ldr	r2, [pc, #288]	; (800551c <HAL_GPIO_Init+0x2f4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <HAL_GPIO_Init+0x1fe>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a47      	ldr	r2, [pc, #284]	; (8005520 <HAL_GPIO_Init+0x2f8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00d      	beq.n	8005422 <HAL_GPIO_Init+0x1fa>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a46      	ldr	r2, [pc, #280]	; (8005524 <HAL_GPIO_Init+0x2fc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d007      	beq.n	800541e <HAL_GPIO_Init+0x1f6>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a45      	ldr	r2, [pc, #276]	; (8005528 <HAL_GPIO_Init+0x300>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d101      	bne.n	800541a <HAL_GPIO_Init+0x1f2>
 8005416:	2304      	movs	r3, #4
 8005418:	e008      	b.n	800542c <HAL_GPIO_Init+0x204>
 800541a:	2307      	movs	r3, #7
 800541c:	e006      	b.n	800542c <HAL_GPIO_Init+0x204>
 800541e:	2303      	movs	r3, #3
 8005420:	e004      	b.n	800542c <HAL_GPIO_Init+0x204>
 8005422:	2302      	movs	r3, #2
 8005424:	e002      	b.n	800542c <HAL_GPIO_Init+0x204>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <HAL_GPIO_Init+0x204>
 800542a:	2300      	movs	r3, #0
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	f002 0203 	and.w	r2, r2, #3
 8005432:	0092      	lsls	r2, r2, #2
 8005434:	4093      	lsls	r3, r2
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	4313      	orrs	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800543c:	4935      	ldr	r1, [pc, #212]	; (8005514 <HAL_GPIO_Init+0x2ec>)
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	089b      	lsrs	r3, r3, #2
 8005442:	3302      	adds	r3, #2
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800544a:	4b38      	ldr	r3, [pc, #224]	; (800552c <HAL_GPIO_Init+0x304>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	43db      	mvns	r3, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4013      	ands	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800546e:	4a2f      	ldr	r2, [pc, #188]	; (800552c <HAL_GPIO_Init+0x304>)
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005474:	4b2d      	ldr	r3, [pc, #180]	; (800552c <HAL_GPIO_Init+0x304>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	43db      	mvns	r3, r3
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	4013      	ands	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005498:	4a24      	ldr	r2, [pc, #144]	; (800552c <HAL_GPIO_Init+0x304>)
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800549e:	4b23      	ldr	r3, [pc, #140]	; (800552c <HAL_GPIO_Init+0x304>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	43db      	mvns	r3, r3
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	4013      	ands	r3, r2
 80054ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054c2:	4a1a      	ldr	r2, [pc, #104]	; (800552c <HAL_GPIO_Init+0x304>)
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054c8:	4b18      	ldr	r3, [pc, #96]	; (800552c <HAL_GPIO_Init+0x304>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	43db      	mvns	r3, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4013      	ands	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054ec:	4a0f      	ldr	r2, [pc, #60]	; (800552c <HAL_GPIO_Init+0x304>)
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	3301      	adds	r3, #1
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2b0f      	cmp	r3, #15
 80054fc:	f67f aea2 	bls.w	8005244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	3724      	adds	r7, #36	; 0x24
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40023800 	.word	0x40023800
 8005514:	40013800 	.word	0x40013800
 8005518:	40020000 	.word	0x40020000
 800551c:	40020400 	.word	0x40020400
 8005520:	40020800 	.word	0x40020800
 8005524:	40020c00 	.word	0x40020c00
 8005528:	40021000 	.word	0x40021000
 800552c:	40013c00 	.word	0x40013c00

08005530 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800553a:	2300      	movs	r3, #0
 800553c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e0bb      	b.n	80056c4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800554c:	2201      	movs	r2, #1
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4013      	ands	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	429a      	cmp	r2, r3
 8005564:	f040 80ab 	bne.w	80056be <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005568:	4a5c      	ldr	r2, [pc, #368]	; (80056dc <HAL_GPIO_DeInit+0x1ac>)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	089b      	lsrs	r3, r3, #2
 800556e:	3302      	adds	r3, #2
 8005570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005574:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	220f      	movs	r2, #15
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	4013      	ands	r3, r2
 8005588:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a54      	ldr	r2, [pc, #336]	; (80056e0 <HAL_GPIO_DeInit+0x1b0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d019      	beq.n	80055c6 <HAL_GPIO_DeInit+0x96>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a53      	ldr	r2, [pc, #332]	; (80056e4 <HAL_GPIO_DeInit+0x1b4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <HAL_GPIO_DeInit+0x92>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a52      	ldr	r2, [pc, #328]	; (80056e8 <HAL_GPIO_DeInit+0x1b8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00d      	beq.n	80055be <HAL_GPIO_DeInit+0x8e>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a51      	ldr	r2, [pc, #324]	; (80056ec <HAL_GPIO_DeInit+0x1bc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d007      	beq.n	80055ba <HAL_GPIO_DeInit+0x8a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a50      	ldr	r2, [pc, #320]	; (80056f0 <HAL_GPIO_DeInit+0x1c0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d101      	bne.n	80055b6 <HAL_GPIO_DeInit+0x86>
 80055b2:	2304      	movs	r3, #4
 80055b4:	e008      	b.n	80055c8 <HAL_GPIO_DeInit+0x98>
 80055b6:	2307      	movs	r3, #7
 80055b8:	e006      	b.n	80055c8 <HAL_GPIO_DeInit+0x98>
 80055ba:	2303      	movs	r3, #3
 80055bc:	e004      	b.n	80055c8 <HAL_GPIO_DeInit+0x98>
 80055be:	2302      	movs	r3, #2
 80055c0:	e002      	b.n	80055c8 <HAL_GPIO_DeInit+0x98>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <HAL_GPIO_DeInit+0x98>
 80055c6:	2300      	movs	r3, #0
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	f002 0203 	and.w	r2, r2, #3
 80055ce:	0092      	lsls	r2, r2, #2
 80055d0:	4093      	lsls	r3, r2
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d132      	bne.n	800563e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80055d8:	4b46      	ldr	r3, [pc, #280]	; (80056f4 <HAL_GPIO_DeInit+0x1c4>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	43db      	mvns	r3, r3
 80055e0:	4944      	ldr	r1, [pc, #272]	; (80056f4 <HAL_GPIO_DeInit+0x1c4>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80055e6:	4b43      	ldr	r3, [pc, #268]	; (80056f4 <HAL_GPIO_DeInit+0x1c4>)
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	43db      	mvns	r3, r3
 80055ee:	4941      	ldr	r1, [pc, #260]	; (80056f4 <HAL_GPIO_DeInit+0x1c4>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80055f4:	4b3f      	ldr	r3, [pc, #252]	; (80056f4 <HAL_GPIO_DeInit+0x1c4>)
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	43db      	mvns	r3, r3
 80055fc:	493d      	ldr	r1, [pc, #244]	; (80056f4 <HAL_GPIO_DeInit+0x1c4>)
 80055fe:	4013      	ands	r3, r2
 8005600:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005602:	4b3c      	ldr	r3, [pc, #240]	; (80056f4 <HAL_GPIO_DeInit+0x1c4>)
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	43db      	mvns	r3, r3
 800560a:	493a      	ldr	r1, [pc, #232]	; (80056f4 <HAL_GPIO_DeInit+0x1c4>)
 800560c:	4013      	ands	r3, r2
 800560e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	220f      	movs	r2, #15
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005620:	4a2e      	ldr	r2, [pc, #184]	; (80056dc <HAL_GPIO_DeInit+0x1ac>)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	089b      	lsrs	r3, r3, #2
 8005626:	3302      	adds	r3, #2
 8005628:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	43da      	mvns	r2, r3
 8005630:	482a      	ldr	r0, [pc, #168]	; (80056dc <HAL_GPIO_DeInit+0x1ac>)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	089b      	lsrs	r3, r3, #2
 8005636:	400a      	ands	r2, r1
 8005638:	3302      	adds	r3, #2
 800563a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	2103      	movs	r1, #3
 8005648:	fa01 f303 	lsl.w	r3, r1, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	401a      	ands	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	08da      	lsrs	r2, r3, #3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3208      	adds	r2, #8
 800565c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	220f      	movs	r2, #15
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	43db      	mvns	r3, r3
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	08d2      	lsrs	r2, r2, #3
 8005674:	4019      	ands	r1, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3208      	adds	r2, #8
 800567a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	2103      	movs	r1, #3
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	43db      	mvns	r3, r3
 800568e:	401a      	ands	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	2101      	movs	r1, #1
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	fa01 f303 	lsl.w	r3, r1, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	401a      	ands	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	2103      	movs	r1, #3
 80056b2:	fa01 f303 	lsl.w	r3, r1, r3
 80056b6:	43db      	mvns	r3, r3
 80056b8:	401a      	ands	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	3301      	adds	r3, #1
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2b0f      	cmp	r3, #15
 80056c8:	f67f af40 	bls.w	800554c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80056cc:	bf00      	nop
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40013800 	.word	0x40013800
 80056e0:	40020000 	.word	0x40020000
 80056e4:	40020400 	.word	0x40020400
 80056e8:	40020800 	.word	0x40020800
 80056ec:	40020c00 	.word	0x40020c00
 80056f0:	40021000 	.word	0x40021000
 80056f4:	40013c00 	.word	0x40013c00

080056f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	807b      	strh	r3, [r7, #2]
 8005704:	4613      	mov	r3, r2
 8005706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005708:	787b      	ldrb	r3, [r7, #1]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005714:	e003      	b.n	800571e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005716:	887b      	ldrh	r3, [r7, #2]
 8005718:	041a      	lsls	r2, r3, #16
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	619a      	str	r2, [r3, #24]
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800573c:	887a      	ldrh	r2, [r7, #2]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4013      	ands	r3, r2
 8005742:	041a      	lsls	r2, r3, #16
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	43d9      	mvns	r1, r3
 8005748:	887b      	ldrh	r3, [r7, #2]
 800574a:	400b      	ands	r3, r1
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	619a      	str	r2, [r3, #24]
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
	...

08005760 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800576a:	4b08      	ldr	r3, [pc, #32]	; (800578c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	4013      	ands	r3, r2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d006      	beq.n	8005784 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005776:	4a05      	ldr	r2, [pc, #20]	; (800578c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800577c:	88fb      	ldrh	r3, [r7, #6]
 800577e:	4618      	mov	r0, r3
 8005780:	f000 f806 	bl	8005790 <HAL_GPIO_EXTI_Callback>
  }
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40013c00 	.word	0x40013c00

08005790 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
	...

080057a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e12b      	b.n	8005a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f95d 	bl	8005a8e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2224      	movs	r2, #36	; 0x24
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0201 	bic.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800580a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800580c:	f001 fc5a 	bl	80070c4 <HAL_RCC_GetPCLK1Freq>
 8005810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	4a81      	ldr	r2, [pc, #516]	; (8005a1c <HAL_I2C_Init+0x274>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d807      	bhi.n	800582c <HAL_I2C_Init+0x84>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4a80      	ldr	r2, [pc, #512]	; (8005a20 <HAL_I2C_Init+0x278>)
 8005820:	4293      	cmp	r3, r2
 8005822:	bf94      	ite	ls
 8005824:	2301      	movls	r3, #1
 8005826:	2300      	movhi	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	e006      	b.n	800583a <HAL_I2C_Init+0x92>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4a7d      	ldr	r2, [pc, #500]	; (8005a24 <HAL_I2C_Init+0x27c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	bf94      	ite	ls
 8005834:	2301      	movls	r3, #1
 8005836:	2300      	movhi	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e0e7      	b.n	8005a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4a78      	ldr	r2, [pc, #480]	; (8005a28 <HAL_I2C_Init+0x280>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	0c9b      	lsrs	r3, r3, #18
 800584c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	4a6a      	ldr	r2, [pc, #424]	; (8005a1c <HAL_I2C_Init+0x274>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d802      	bhi.n	800587c <HAL_I2C_Init+0xd4>
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	3301      	adds	r3, #1
 800587a:	e009      	b.n	8005890 <HAL_I2C_Init+0xe8>
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	4a69      	ldr	r2, [pc, #420]	; (8005a2c <HAL_I2C_Init+0x284>)
 8005888:	fba2 2303 	umull	r2, r3, r2, r3
 800588c:	099b      	lsrs	r3, r3, #6
 800588e:	3301      	adds	r3, #1
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	430b      	orrs	r3, r1
 8005896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	495c      	ldr	r1, [pc, #368]	; (8005a1c <HAL_I2C_Init+0x274>)
 80058ac:	428b      	cmp	r3, r1
 80058ae:	d819      	bhi.n	80058e4 <HAL_I2C_Init+0x13c>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	1e59      	subs	r1, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80058be:	1c59      	adds	r1, r3, #1
 80058c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058c4:	400b      	ands	r3, r1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_I2C_Init+0x138>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1e59      	subs	r1, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80058d8:	3301      	adds	r3, #1
 80058da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058de:	e051      	b.n	8005984 <HAL_I2C_Init+0x1dc>
 80058e0:	2304      	movs	r3, #4
 80058e2:	e04f      	b.n	8005984 <HAL_I2C_Init+0x1dc>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d111      	bne.n	8005910 <HAL_I2C_Init+0x168>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	1e58      	subs	r0, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6859      	ldr	r1, [r3, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	440b      	add	r3, r1
 80058fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80058fe:	3301      	adds	r3, #1
 8005900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005904:	2b00      	cmp	r3, #0
 8005906:	bf0c      	ite	eq
 8005908:	2301      	moveq	r3, #1
 800590a:	2300      	movne	r3, #0
 800590c:	b2db      	uxtb	r3, r3
 800590e:	e012      	b.n	8005936 <HAL_I2C_Init+0x18e>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	1e58      	subs	r0, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6859      	ldr	r1, [r3, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	0099      	lsls	r1, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	fbb0 f3f3 	udiv	r3, r0, r3
 8005926:	3301      	adds	r3, #1
 8005928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800592c:	2b00      	cmp	r3, #0
 800592e:	bf0c      	ite	eq
 8005930:	2301      	moveq	r3, #1
 8005932:	2300      	movne	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_I2C_Init+0x196>
 800593a:	2301      	movs	r3, #1
 800593c:	e022      	b.n	8005984 <HAL_I2C_Init+0x1dc>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10e      	bne.n	8005964 <HAL_I2C_Init+0x1bc>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1e58      	subs	r0, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6859      	ldr	r1, [r3, #4]
 800594e:	460b      	mov	r3, r1
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	440b      	add	r3, r1
 8005954:	fbb0 f3f3 	udiv	r3, r0, r3
 8005958:	3301      	adds	r3, #1
 800595a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800595e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005962:	e00f      	b.n	8005984 <HAL_I2C_Init+0x1dc>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	1e58      	subs	r0, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6859      	ldr	r1, [r3, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	0099      	lsls	r1, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	fbb0 f3f3 	udiv	r3, r0, r3
 800597a:	3301      	adds	r3, #1
 800597c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	6809      	ldr	r1, [r1, #0]
 8005988:	4313      	orrs	r3, r2
 800598a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69da      	ldr	r2, [r3, #28]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6911      	ldr	r1, [r2, #16]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68d2      	ldr	r2, [r2, #12]
 80059be:	4311      	orrs	r1, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	430b      	orrs	r3, r1
 80059c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695a      	ldr	r2, [r3, #20]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	000186a0 	.word	0x000186a0
 8005a20:	001e847f 	.word	0x001e847f
 8005a24:	003d08ff 	.word	0x003d08ff
 8005a28:	431bde83 	.word	0x431bde83
 8005a2c:	10624dd3 	.word	0x10624dd3

08005a30 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e021      	b.n	8005a86 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2224      	movs	r2, #36	; 0x24
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0201 	bic.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f821 	bl	8005aa2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	817b      	strh	r3, [r7, #10]
 8005aca:	460b      	mov	r3, r1
 8005acc:	813b      	strh	r3, [r7, #8]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ad2:	f7fe fedb 	bl	800488c <HAL_GetTick>
 8005ad6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	f040 80d9 	bne.w	8005c98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	2319      	movs	r3, #25
 8005aec:	2201      	movs	r2, #1
 8005aee:	496d      	ldr	r1, [pc, #436]	; (8005ca4 <HAL_I2C_Mem_Write+0x1ec>)
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fc99 	bl	8006428 <I2C_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005afc:	2302      	movs	r3, #2
 8005afe:	e0cc      	b.n	8005c9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_I2C_Mem_Write+0x56>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e0c5      	b.n	8005c9a <HAL_I2C_Mem_Write+0x1e2>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d007      	beq.n	8005b34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2221      	movs	r2, #33	; 0x21
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2240      	movs	r2, #64	; 0x40
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a3a      	ldr	r2, [r7, #32]
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4a4d      	ldr	r2, [pc, #308]	; (8005ca8 <HAL_I2C_Mem_Write+0x1f0>)
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b76:	88f8      	ldrh	r0, [r7, #6]
 8005b78:	893a      	ldrh	r2, [r7, #8]
 8005b7a:	8979      	ldrh	r1, [r7, #10]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	9301      	str	r3, [sp, #4]
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	4603      	mov	r3, r0
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 fad0 	bl	800612c <I2C_RequestMemoryWrite>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d052      	beq.n	8005c38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e081      	b.n	8005c9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 fd1a 	bl	80065d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00d      	beq.n	8005bc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d107      	bne.n	8005bbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e06b      	b.n	8005c9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	781a      	ldrb	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d11b      	bne.n	8005c38 <HAL_I2C_Mem_Write+0x180>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d017      	beq.n	8005c38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	781a      	ldrb	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1aa      	bne.n	8005b96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fd06 	bl	8006656 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00d      	beq.n	8005c6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d107      	bne.n	8005c68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e016      	b.n	8005c9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	e000      	b.n	8005c9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c98:	2302      	movs	r3, #2
  }
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	00100002 	.word	0x00100002
 8005ca8:	ffff0000 	.word	0xffff0000

08005cac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08c      	sub	sp, #48	; 0x30
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	4608      	mov	r0, r1
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	461a      	mov	r2, r3
 8005cba:	4603      	mov	r3, r0
 8005cbc:	817b      	strh	r3, [r7, #10]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	813b      	strh	r3, [r7, #8]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cc6:	f7fe fde1 	bl	800488c <HAL_GetTick>
 8005cca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	f040 8208 	bne.w	80060ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	2319      	movs	r3, #25
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	497b      	ldr	r1, [pc, #492]	; (8005ed0 <HAL_I2C_Mem_Read+0x224>)
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fb9f 	bl	8006428 <I2C_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e1fb      	b.n	80060ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_I2C_Mem_Read+0x56>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e1f4      	b.n	80060ec <HAL_I2C_Mem_Read+0x440>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d007      	beq.n	8005d28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2222      	movs	r2, #34	; 0x22
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2240      	movs	r2, #64	; 0x40
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005d58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4a5b      	ldr	r2, [pc, #364]	; (8005ed4 <HAL_I2C_Mem_Read+0x228>)
 8005d68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d6a:	88f8      	ldrh	r0, [r7, #6]
 8005d6c:	893a      	ldrh	r2, [r7, #8]
 8005d6e:	8979      	ldrh	r1, [r7, #10]
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	4603      	mov	r3, r0
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 fa6c 	bl	8006258 <I2C_RequestMemoryRead>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e1b0      	b.n	80060ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d113      	bne.n	8005dba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d92:	2300      	movs	r3, #0
 8005d94:	623b      	str	r3, [r7, #32]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	623b      	str	r3, [r7, #32]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	623b      	str	r3, [r7, #32]
 8005da6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	e184      	b.n	80060c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d11b      	bne.n	8005dfa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	e164      	b.n	80060c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d11b      	bne.n	8005e3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e22:	2300      	movs	r3, #0
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	e144      	b.n	80060c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e50:	e138      	b.n	80060c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	f200 80f1 	bhi.w	800603e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d123      	bne.n	8005eac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fc35 	bl	80066d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e139      	b.n	80060ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005eaa:	e10b      	b.n	80060c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d14e      	bne.n	8005f52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	2200      	movs	r2, #0
 8005ebc:	4906      	ldr	r1, [pc, #24]	; (8005ed8 <HAL_I2C_Mem_Read+0x22c>)
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 fab2 	bl	8006428 <I2C_WaitOnFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d008      	beq.n	8005edc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e10e      	b.n	80060ec <HAL_I2C_Mem_Read+0x440>
 8005ece:	bf00      	nop
 8005ed0:	00100002 	.word	0x00100002
 8005ed4:	ffff0000 	.word	0xffff0000
 8005ed8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691a      	ldr	r2, [r3, #16]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f50:	e0b8      	b.n	80060c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f58:	2200      	movs	r2, #0
 8005f5a:	4966      	ldr	r1, [pc, #408]	; (80060f4 <HAL_I2C_Mem_Read+0x448>)
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 fa63 	bl	8006428 <I2C_WaitOnFlagUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e0bf      	b.n	80060ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	494f      	ldr	r1, [pc, #316]	; (80060f4 <HAL_I2C_Mem_Read+0x448>)
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fa35 	bl	8006428 <I2C_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e091      	b.n	80060ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800603c:	e042      	b.n	80060c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800603e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006040:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 fb48 	bl	80066d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e04c      	b.n	80060ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b04      	cmp	r3, #4
 8006090:	d118      	bne.n	80060c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f47f aec2 	bne.w	8005e52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	e000      	b.n	80060ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80060ea:	2302      	movs	r3, #2
  }
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3728      	adds	r7, #40	; 0x28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	00010004 	.word	0x00010004

080060f8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006106:	b2db      	uxtb	r3, r3
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006120:	4618      	mov	r0, r3
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	4608      	mov	r0, r1
 8006136:	4611      	mov	r1, r2
 8006138:	461a      	mov	r2, r3
 800613a:	4603      	mov	r3, r0
 800613c:	817b      	strh	r3, [r7, #10]
 800613e:	460b      	mov	r3, r1
 8006140:	813b      	strh	r3, [r7, #8]
 8006142:	4613      	mov	r3, r2
 8006144:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006154:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	2200      	movs	r2, #0
 800615e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f960 	bl	8006428 <I2C_WaitOnFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00d      	beq.n	800618a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617c:	d103      	bne.n	8006186 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006184:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e05f      	b.n	800624a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800618a:	897b      	ldrh	r3, [r7, #10]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006198:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	6a3a      	ldr	r2, [r7, #32]
 800619e:	492d      	ldr	r1, [pc, #180]	; (8006254 <I2C_RequestMemoryWrite+0x128>)
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f998 	bl	80064d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e04c      	b.n	800624a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c8:	6a39      	ldr	r1, [r7, #32]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 fa02 	bl	80065d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00d      	beq.n	80061f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d107      	bne.n	80061ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e02b      	b.n	800624a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d105      	bne.n	8006204 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061f8:	893b      	ldrh	r3, [r7, #8]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	611a      	str	r2, [r3, #16]
 8006202:	e021      	b.n	8006248 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006204:	893b      	ldrh	r3, [r7, #8]
 8006206:	0a1b      	lsrs	r3, r3, #8
 8006208:	b29b      	uxth	r3, r3
 800620a:	b2da      	uxtb	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006214:	6a39      	ldr	r1, [r7, #32]
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 f9dc 	bl	80065d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00d      	beq.n	800623e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	2b04      	cmp	r3, #4
 8006228:	d107      	bne.n	800623a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006238:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e005      	b.n	800624a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800623e:	893b      	ldrh	r3, [r7, #8]
 8006240:	b2da      	uxtb	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	00010002 	.word	0x00010002

08006258 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af02      	add	r7, sp, #8
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	4608      	mov	r0, r1
 8006262:	4611      	mov	r1, r2
 8006264:	461a      	mov	r2, r3
 8006266:	4603      	mov	r3, r0
 8006268:	817b      	strh	r3, [r7, #10]
 800626a:	460b      	mov	r3, r1
 800626c:	813b      	strh	r3, [r7, #8]
 800626e:	4613      	mov	r3, r2
 8006270:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006280:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006290:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	2200      	movs	r2, #0
 800629a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f8c2 	bl	8006428 <I2C_WaitOnFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00d      	beq.n	80062c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b8:	d103      	bne.n	80062c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e0aa      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062c6:	897b      	ldrh	r3, [r7, #10]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	6a3a      	ldr	r2, [r7, #32]
 80062da:	4952      	ldr	r1, [pc, #328]	; (8006424 <I2C_RequestMemoryRead+0x1cc>)
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f8fa 	bl	80064d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e097      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006304:	6a39      	ldr	r1, [r7, #32]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 f964 	bl	80065d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00d      	beq.n	800632e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	2b04      	cmp	r3, #4
 8006318:	d107      	bne.n	800632a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006328:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e076      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d105      	bne.n	8006340 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006334:	893b      	ldrh	r3, [r7, #8]
 8006336:	b2da      	uxtb	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	611a      	str	r2, [r3, #16]
 800633e:	e021      	b.n	8006384 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006340:	893b      	ldrh	r3, [r7, #8]
 8006342:	0a1b      	lsrs	r3, r3, #8
 8006344:	b29b      	uxth	r3, r3
 8006346:	b2da      	uxtb	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800634e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006350:	6a39      	ldr	r1, [r7, #32]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 f93e 	bl	80065d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00d      	beq.n	800637a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	2b04      	cmp	r3, #4
 8006364:	d107      	bne.n	8006376 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006374:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e050      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800637a:	893b      	ldrh	r3, [r7, #8]
 800637c:	b2da      	uxtb	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006386:	6a39      	ldr	r1, [r7, #32]
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f923 	bl	80065d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00d      	beq.n	80063b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	2b04      	cmp	r3, #4
 800639a:	d107      	bne.n	80063ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e035      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f82b 	bl	8006428 <I2C_WaitOnFlagUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00d      	beq.n	80063f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e6:	d103      	bne.n	80063f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e013      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063f4:	897b      	ldrh	r3, [r7, #10]
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	6a3a      	ldr	r2, [r7, #32]
 8006408:	4906      	ldr	r1, [pc, #24]	; (8006424 <I2C_RequestMemoryRead+0x1cc>)
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f863 	bl	80064d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	00010002 	.word	0x00010002

08006428 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	4613      	mov	r3, r2
 8006436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006438:	e025      	b.n	8006486 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d021      	beq.n	8006486 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006442:	f7fe fa23 	bl	800488c <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d302      	bcc.n	8006458 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d116      	bne.n	8006486 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2220      	movs	r2, #32
 8006462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	f043 0220 	orr.w	r2, r3, #32
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e023      	b.n	80064ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	0c1b      	lsrs	r3, r3, #16
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b01      	cmp	r3, #1
 800648e:	d10d      	bne.n	80064ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	43da      	mvns	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4013      	ands	r3, r2
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	bf0c      	ite	eq
 80064a2:	2301      	moveq	r3, #1
 80064a4:	2300      	movne	r3, #0
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	461a      	mov	r2, r3
 80064aa:	e00c      	b.n	80064c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	43da      	mvns	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4013      	ands	r3, r2
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	bf0c      	ite	eq
 80064be:	2301      	moveq	r3, #1
 80064c0:	2300      	movne	r3, #0
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d0b6      	beq.n	800643a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064e4:	e051      	b.n	800658a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f4:	d123      	bne.n	800653e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006504:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800650e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2220      	movs	r2, #32
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	f043 0204 	orr.w	r2, r3, #4
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e046      	b.n	80065cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006544:	d021      	beq.n	800658a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006546:	f7fe f9a1 	bl	800488c <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	429a      	cmp	r2, r3
 8006554:	d302      	bcc.n	800655c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d116      	bne.n	800658a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2220      	movs	r2, #32
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	f043 0220 	orr.w	r2, r3, #32
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e020      	b.n	80065cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	0c1b      	lsrs	r3, r3, #16
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10c      	bne.n	80065ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	43da      	mvns	r2, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4013      	ands	r3, r2
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bf14      	ite	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	2300      	moveq	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	e00b      	b.n	80065c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	43da      	mvns	r2, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	4013      	ands	r3, r2
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bf14      	ite	ne
 80065c0:	2301      	movne	r3, #1
 80065c2:	2300      	moveq	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d18d      	bne.n	80064e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065e0:	e02d      	b.n	800663e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f8ce 	bl	8006784 <I2C_IsAcknowledgeFailed>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e02d      	b.n	800664e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f8:	d021      	beq.n	800663e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065fa:	f7fe f947 	bl	800488c <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	429a      	cmp	r2, r3
 8006608:	d302      	bcc.n	8006610 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d116      	bne.n	800663e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2220      	movs	r2, #32
 800661a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	f043 0220 	orr.w	r2, r3, #32
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e007      	b.n	800664e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006648:	2b80      	cmp	r3, #128	; 0x80
 800664a:	d1ca      	bne.n	80065e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b084      	sub	sp, #16
 800665a:	af00      	add	r7, sp, #0
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006662:	e02d      	b.n	80066c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f88d 	bl	8006784 <I2C_IsAcknowledgeFailed>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e02d      	b.n	80066d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d021      	beq.n	80066c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667c:	f7fe f906 	bl	800488c <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	429a      	cmp	r2, r3
 800668a:	d302      	bcc.n	8006692 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d116      	bne.n	80066c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	f043 0220 	orr.w	r2, r3, #32
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e007      	b.n	80066d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d1ca      	bne.n	8006664 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066e4:	e042      	b.n	800676c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b10      	cmp	r3, #16
 80066f2:	d119      	bne.n	8006728 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0210 	mvn.w	r2, #16
 80066fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e029      	b.n	800677c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006728:	f7fe f8b0 	bl	800488c <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	429a      	cmp	r2, r3
 8006736:	d302      	bcc.n	800673e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d116      	bne.n	800676c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	f043 0220 	orr.w	r2, r3, #32
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e007      	b.n	800677c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006776:	2b40      	cmp	r3, #64	; 0x40
 8006778:	d1b5      	bne.n	80066e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679a:	d11b      	bne.n	80067d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	f043 0204 	orr.w	r2, r3, #4
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e000      	b.n	80067d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
	...

080067e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e267      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d075      	beq.n	80068ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006802:	4b88      	ldr	r3, [pc, #544]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 030c 	and.w	r3, r3, #12
 800680a:	2b04      	cmp	r3, #4
 800680c:	d00c      	beq.n	8006828 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800680e:	4b85      	ldr	r3, [pc, #532]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006816:	2b08      	cmp	r3, #8
 8006818:	d112      	bne.n	8006840 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800681a:	4b82      	ldr	r3, [pc, #520]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006826:	d10b      	bne.n	8006840 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006828:	4b7e      	ldr	r3, [pc, #504]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d05b      	beq.n	80068ec <HAL_RCC_OscConfig+0x108>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d157      	bne.n	80068ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e242      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006848:	d106      	bne.n	8006858 <HAL_RCC_OscConfig+0x74>
 800684a:	4b76      	ldr	r3, [pc, #472]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a75      	ldr	r2, [pc, #468]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e01d      	b.n	8006894 <HAL_RCC_OscConfig+0xb0>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006860:	d10c      	bne.n	800687c <HAL_RCC_OscConfig+0x98>
 8006862:	4b70      	ldr	r3, [pc, #448]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a6f      	ldr	r2, [pc, #444]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4b6d      	ldr	r3, [pc, #436]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a6c      	ldr	r2, [pc, #432]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e00b      	b.n	8006894 <HAL_RCC_OscConfig+0xb0>
 800687c:	4b69      	ldr	r3, [pc, #420]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a68      	ldr	r2, [pc, #416]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	4b66      	ldr	r3, [pc, #408]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a65      	ldr	r2, [pc, #404]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 800688e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d013      	beq.n	80068c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800689c:	f7fd fff6 	bl	800488c <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068a4:	f7fd fff2 	bl	800488c <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b64      	cmp	r3, #100	; 0x64
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e207      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b6:	4b5b      	ldr	r3, [pc, #364]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCC_OscConfig+0xc0>
 80068c2:	e014      	b.n	80068ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c4:	f7fd ffe2 	bl	800488c <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068cc:	f7fd ffde 	bl	800488c <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b64      	cmp	r3, #100	; 0x64
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e1f3      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068de:	4b51      	ldr	r3, [pc, #324]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f0      	bne.n	80068cc <HAL_RCC_OscConfig+0xe8>
 80068ea:	e000      	b.n	80068ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d063      	beq.n	80069c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068fa:	4b4a      	ldr	r3, [pc, #296]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00b      	beq.n	800691e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006906:	4b47      	ldr	r3, [pc, #284]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800690e:	2b08      	cmp	r3, #8
 8006910:	d11c      	bne.n	800694c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006912:	4b44      	ldr	r3, [pc, #272]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d116      	bne.n	800694c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800691e:	4b41      	ldr	r3, [pc, #260]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_RCC_OscConfig+0x152>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d001      	beq.n	8006936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e1c7      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006936:	4b3b      	ldr	r3, [pc, #236]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	4937      	ldr	r1, [pc, #220]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006946:	4313      	orrs	r3, r2
 8006948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800694a:	e03a      	b.n	80069c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d020      	beq.n	8006996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006954:	4b34      	ldr	r3, [pc, #208]	; (8006a28 <HAL_RCC_OscConfig+0x244>)
 8006956:	2201      	movs	r2, #1
 8006958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695a:	f7fd ff97 	bl	800488c <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006962:	f7fd ff93 	bl	800488c <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e1a8      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006974:	4b2b      	ldr	r3, [pc, #172]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0f0      	beq.n	8006962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006980:	4b28      	ldr	r3, [pc, #160]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	4925      	ldr	r1, [pc, #148]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 8006990:	4313      	orrs	r3, r2
 8006992:	600b      	str	r3, [r1, #0]
 8006994:	e015      	b.n	80069c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006996:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <HAL_RCC_OscConfig+0x244>)
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fd ff76 	bl	800488c <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069a4:	f7fd ff72 	bl	800488c <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e187      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069b6:	4b1b      	ldr	r3, [pc, #108]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d036      	beq.n	8006a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d016      	beq.n	8006a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069d6:	4b15      	ldr	r3, [pc, #84]	; (8006a2c <HAL_RCC_OscConfig+0x248>)
 80069d8:	2201      	movs	r2, #1
 80069da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069dc:	f7fd ff56 	bl	800488c <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069e4:	f7fd ff52 	bl	800488c <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e167      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069f6:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <HAL_RCC_OscConfig+0x240>)
 80069f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f0      	beq.n	80069e4 <HAL_RCC_OscConfig+0x200>
 8006a02:	e01b      	b.n	8006a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a04:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <HAL_RCC_OscConfig+0x248>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a0a:	f7fd ff3f 	bl	800488c <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a10:	e00e      	b.n	8006a30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a12:	f7fd ff3b 	bl	800488c <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d907      	bls.n	8006a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e150      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
 8006a24:	40023800 	.word	0x40023800
 8006a28:	42470000 	.word	0x42470000
 8006a2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a30:	4b88      	ldr	r3, [pc, #544]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1ea      	bne.n	8006a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8097 	beq.w	8006b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a4e:	4b81      	ldr	r3, [pc, #516]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10f      	bne.n	8006a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	4b7d      	ldr	r3, [pc, #500]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	4a7c      	ldr	r2, [pc, #496]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a68:	6413      	str	r3, [r2, #64]	; 0x40
 8006a6a:	4b7a      	ldr	r3, [pc, #488]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a72:	60bb      	str	r3, [r7, #8]
 8006a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a76:	2301      	movs	r3, #1
 8006a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a7a:	4b77      	ldr	r3, [pc, #476]	; (8006c58 <HAL_RCC_OscConfig+0x474>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d118      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a86:	4b74      	ldr	r3, [pc, #464]	; (8006c58 <HAL_RCC_OscConfig+0x474>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a73      	ldr	r2, [pc, #460]	; (8006c58 <HAL_RCC_OscConfig+0x474>)
 8006a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a92:	f7fd fefb 	bl	800488c <HAL_GetTick>
 8006a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a98:	e008      	b.n	8006aac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a9a:	f7fd fef7 	bl	800488c <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d901      	bls.n	8006aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e10c      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aac:	4b6a      	ldr	r3, [pc, #424]	; (8006c58 <HAL_RCC_OscConfig+0x474>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0f0      	beq.n	8006a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d106      	bne.n	8006ace <HAL_RCC_OscConfig+0x2ea>
 8006ac0:	4b64      	ldr	r3, [pc, #400]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac4:	4a63      	ldr	r2, [pc, #396]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	6713      	str	r3, [r2, #112]	; 0x70
 8006acc:	e01c      	b.n	8006b08 <HAL_RCC_OscConfig+0x324>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	2b05      	cmp	r3, #5
 8006ad4:	d10c      	bne.n	8006af0 <HAL_RCC_OscConfig+0x30c>
 8006ad6:	4b5f      	ldr	r3, [pc, #380]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ada:	4a5e      	ldr	r2, [pc, #376]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006adc:	f043 0304 	orr.w	r3, r3, #4
 8006ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae2:	4b5c      	ldr	r3, [pc, #368]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae6:	4a5b      	ldr	r2, [pc, #364]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	6713      	str	r3, [r2, #112]	; 0x70
 8006aee:	e00b      	b.n	8006b08 <HAL_RCC_OscConfig+0x324>
 8006af0:	4b58      	ldr	r3, [pc, #352]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	4a57      	ldr	r2, [pc, #348]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006af6:	f023 0301 	bic.w	r3, r3, #1
 8006afa:	6713      	str	r3, [r2, #112]	; 0x70
 8006afc:	4b55      	ldr	r3, [pc, #340]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b00:	4a54      	ldr	r2, [pc, #336]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006b02:	f023 0304 	bic.w	r3, r3, #4
 8006b06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d015      	beq.n	8006b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b10:	f7fd febc 	bl	800488c <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b16:	e00a      	b.n	8006b2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b18:	f7fd feb8 	bl	800488c <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e0cb      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b2e:	4b49      	ldr	r3, [pc, #292]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0ee      	beq.n	8006b18 <HAL_RCC_OscConfig+0x334>
 8006b3a:	e014      	b.n	8006b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b3c:	f7fd fea6 	bl	800488c <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b42:	e00a      	b.n	8006b5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b44:	f7fd fea2 	bl	800488c <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e0b5      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b5a:	4b3e      	ldr	r3, [pc, #248]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1ee      	bne.n	8006b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d105      	bne.n	8006b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b6c:	4b39      	ldr	r3, [pc, #228]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	4a38      	ldr	r2, [pc, #224]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 80a1 	beq.w	8006cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b82:	4b34      	ldr	r3, [pc, #208]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f003 030c 	and.w	r3, r3, #12
 8006b8a:	2b08      	cmp	r3, #8
 8006b8c:	d05c      	beq.n	8006c48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d141      	bne.n	8006c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b96:	4b31      	ldr	r3, [pc, #196]	; (8006c5c <HAL_RCC_OscConfig+0x478>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b9c:	f7fd fe76 	bl	800488c <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ba4:	f7fd fe72 	bl	800488c <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e087      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb6:	4b27      	ldr	r3, [pc, #156]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f0      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69da      	ldr	r2, [r3, #28]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	019b      	lsls	r3, r3, #6
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	085b      	lsrs	r3, r3, #1
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	041b      	lsls	r3, r3, #16
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	061b      	lsls	r3, r3, #24
 8006be6:	491b      	ldr	r1, [pc, #108]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bec:	4b1b      	ldr	r3, [pc, #108]	; (8006c5c <HAL_RCC_OscConfig+0x478>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf2:	f7fd fe4b 	bl	800488c <HAL_GetTick>
 8006bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf8:	e008      	b.n	8006c0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bfa:	f7fd fe47 	bl	800488c <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e05c      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c0c:	4b11      	ldr	r3, [pc, #68]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0f0      	beq.n	8006bfa <HAL_RCC_OscConfig+0x416>
 8006c18:	e054      	b.n	8006cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1a:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <HAL_RCC_OscConfig+0x478>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c20:	f7fd fe34 	bl	800488c <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c28:	f7fd fe30 	bl	800488c <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e045      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c3a:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <HAL_RCC_OscConfig+0x470>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f0      	bne.n	8006c28 <HAL_RCC_OscConfig+0x444>
 8006c46:	e03d      	b.n	8006cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d107      	bne.n	8006c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e038      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
 8006c54:	40023800 	.word	0x40023800
 8006c58:	40007000 	.word	0x40007000
 8006c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c60:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <HAL_RCC_OscConfig+0x4ec>)
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d028      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d121      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d11a      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c90:	4013      	ands	r3, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d111      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	085b      	lsrs	r3, r3, #1
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d107      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d001      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40023800 	.word	0x40023800

08006cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0cc      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ce8:	4b68      	ldr	r3, [pc, #416]	; (8006e8c <HAL_RCC_ClockConfig+0x1b8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0307 	and.w	r3, r3, #7
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d90c      	bls.n	8006d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf6:	4b65      	ldr	r3, [pc, #404]	; (8006e8c <HAL_RCC_ClockConfig+0x1b8>)
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfe:	4b63      	ldr	r3, [pc, #396]	; (8006e8c <HAL_RCC_ClockConfig+0x1b8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d001      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e0b8      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d020      	beq.n	8006d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d005      	beq.n	8006d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d28:	4b59      	ldr	r3, [pc, #356]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	4a58      	ldr	r2, [pc, #352]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d40:	4b53      	ldr	r3, [pc, #332]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	4a52      	ldr	r2, [pc, #328]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d4c:	4b50      	ldr	r3, [pc, #320]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	494d      	ldr	r1, [pc, #308]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d044      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d107      	bne.n	8006d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d72:	4b47      	ldr	r3, [pc, #284]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d119      	bne.n	8006db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e07f      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d003      	beq.n	8006d92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d107      	bne.n	8006da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d92:	4b3f      	ldr	r3, [pc, #252]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e06f      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006da2:	4b3b      	ldr	r3, [pc, #236]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e067      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006db2:	4b37      	ldr	r3, [pc, #220]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f023 0203 	bic.w	r2, r3, #3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	4934      	ldr	r1, [pc, #208]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dc4:	f7fd fd62 	bl	800488c <HAL_GetTick>
 8006dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dca:	e00a      	b.n	8006de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dcc:	f7fd fd5e 	bl	800488c <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e04f      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de2:	4b2b      	ldr	r3, [pc, #172]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 020c 	and.w	r2, r3, #12
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d1eb      	bne.n	8006dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006df4:	4b25      	ldr	r3, [pc, #148]	; (8006e8c <HAL_RCC_ClockConfig+0x1b8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d20c      	bcs.n	8006e1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e02:	4b22      	ldr	r3, [pc, #136]	; (8006e8c <HAL_RCC_ClockConfig+0x1b8>)
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e0a:	4b20      	ldr	r3, [pc, #128]	; (8006e8c <HAL_RCC_ClockConfig+0x1b8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d001      	beq.n	8006e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e032      	b.n	8006e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d008      	beq.n	8006e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e28:	4b19      	ldr	r3, [pc, #100]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	4916      	ldr	r1, [pc, #88]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d009      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e46:	4b12      	ldr	r3, [pc, #72]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	490e      	ldr	r1, [pc, #56]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e5a:	f000 f821 	bl	8006ea0 <HAL_RCC_GetSysClockFreq>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <HAL_RCC_ClockConfig+0x1bc>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	091b      	lsrs	r3, r3, #4
 8006e66:	f003 030f 	and.w	r3, r3, #15
 8006e6a:	490a      	ldr	r1, [pc, #40]	; (8006e94 <HAL_RCC_ClockConfig+0x1c0>)
 8006e6c:	5ccb      	ldrb	r3, [r1, r3]
 8006e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e72:	4a09      	ldr	r2, [pc, #36]	; (8006e98 <HAL_RCC_ClockConfig+0x1c4>)
 8006e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e76:	4b09      	ldr	r3, [pc, #36]	; (8006e9c <HAL_RCC_ClockConfig+0x1c8>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fd fcc2 	bl	8004804 <HAL_InitTick>

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	40023c00 	.word	0x40023c00
 8006e90:	40023800 	.word	0x40023800
 8006e94:	0800ae80 	.word	0x0800ae80
 8006e98:	2000007c 	.word	0x2000007c
 8006e9c:	20000080 	.word	0x20000080

08006ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ea4:	b094      	sub	sp, #80	; 0x50
 8006ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8006eac:	2300      	movs	r3, #0
 8006eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eb8:	4b79      	ldr	r3, [pc, #484]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 030c 	and.w	r3, r3, #12
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d00d      	beq.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	f200 80e1 	bhi.w	800708c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d003      	beq.n	8006eda <HAL_RCC_GetSysClockFreq+0x3a>
 8006ed2:	e0db      	b.n	800708c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ed4:	4b73      	ldr	r3, [pc, #460]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ed6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ed8:	e0db      	b.n	8007092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006eda:	4b73      	ldr	r3, [pc, #460]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006edc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ede:	e0d8      	b.n	8007092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ee0:	4b6f      	ldr	r3, [pc, #444]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ee8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006eea:	4b6d      	ldr	r3, [pc, #436]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d063      	beq.n	8006fbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ef6:	4b6a      	ldr	r3, [pc, #424]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	099b      	lsrs	r3, r3, #6
 8006efc:	2200      	movs	r2, #0
 8006efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f08:	633b      	str	r3, [r7, #48]	; 0x30
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006f12:	4622      	mov	r2, r4
 8006f14:	462b      	mov	r3, r5
 8006f16:	f04f 0000 	mov.w	r0, #0
 8006f1a:	f04f 0100 	mov.w	r1, #0
 8006f1e:	0159      	lsls	r1, r3, #5
 8006f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f24:	0150      	lsls	r0, r2, #5
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	1a51      	subs	r1, r2, r1
 8006f2e:	6139      	str	r1, [r7, #16]
 8006f30:	4629      	mov	r1, r5
 8006f32:	eb63 0301 	sbc.w	r3, r3, r1
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	f04f 0300 	mov.w	r3, #0
 8006f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f44:	4659      	mov	r1, fp
 8006f46:	018b      	lsls	r3, r1, #6
 8006f48:	4651      	mov	r1, sl
 8006f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f4e:	4651      	mov	r1, sl
 8006f50:	018a      	lsls	r2, r1, #6
 8006f52:	4651      	mov	r1, sl
 8006f54:	ebb2 0801 	subs.w	r8, r2, r1
 8006f58:	4659      	mov	r1, fp
 8006f5a:	eb63 0901 	sbc.w	r9, r3, r1
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f72:	4690      	mov	r8, r2
 8006f74:	4699      	mov	r9, r3
 8006f76:	4623      	mov	r3, r4
 8006f78:	eb18 0303 	adds.w	r3, r8, r3
 8006f7c:	60bb      	str	r3, [r7, #8]
 8006f7e:	462b      	mov	r3, r5
 8006f80:	eb49 0303 	adc.w	r3, r9, r3
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f92:	4629      	mov	r1, r5
 8006f94:	024b      	lsls	r3, r1, #9
 8006f96:	4621      	mov	r1, r4
 8006f98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	024a      	lsls	r2, r1, #9
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fb0:	f7f9 fcd4 	bl	800095c <__aeabi_uldivmod>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4613      	mov	r3, r2
 8006fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fbc:	e058      	b.n	8007070 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fbe:	4b38      	ldr	r3, [pc, #224]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	099b      	lsrs	r3, r3, #6
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	4611      	mov	r1, r2
 8006fca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fce:	623b      	str	r3, [r7, #32]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fd8:	4642      	mov	r2, r8
 8006fda:	464b      	mov	r3, r9
 8006fdc:	f04f 0000 	mov.w	r0, #0
 8006fe0:	f04f 0100 	mov.w	r1, #0
 8006fe4:	0159      	lsls	r1, r3, #5
 8006fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fea:	0150      	lsls	r0, r2, #5
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4641      	mov	r1, r8
 8006ff2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007008:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800700c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007010:	ebb2 040a 	subs.w	r4, r2, sl
 8007014:	eb63 050b 	sbc.w	r5, r3, fp
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	00eb      	lsls	r3, r5, #3
 8007022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007026:	00e2      	lsls	r2, r4, #3
 8007028:	4614      	mov	r4, r2
 800702a:	461d      	mov	r5, r3
 800702c:	4643      	mov	r3, r8
 800702e:	18e3      	adds	r3, r4, r3
 8007030:	603b      	str	r3, [r7, #0]
 8007032:	464b      	mov	r3, r9
 8007034:	eb45 0303 	adc.w	r3, r5, r3
 8007038:	607b      	str	r3, [r7, #4]
 800703a:	f04f 0200 	mov.w	r2, #0
 800703e:	f04f 0300 	mov.w	r3, #0
 8007042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007046:	4629      	mov	r1, r5
 8007048:	028b      	lsls	r3, r1, #10
 800704a:	4621      	mov	r1, r4
 800704c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007050:	4621      	mov	r1, r4
 8007052:	028a      	lsls	r2, r1, #10
 8007054:	4610      	mov	r0, r2
 8007056:	4619      	mov	r1, r3
 8007058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800705a:	2200      	movs	r2, #0
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	61fa      	str	r2, [r7, #28]
 8007060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007064:	f7f9 fc7a 	bl	800095c <__aeabi_uldivmod>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4613      	mov	r3, r2
 800706e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007070:	4b0b      	ldr	r3, [pc, #44]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	0c1b      	lsrs	r3, r3, #16
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	3301      	adds	r3, #1
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007084:	fbb2 f3f3 	udiv	r3, r2, r3
 8007088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800708a:	e002      	b.n	8007092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800708e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007094:	4618      	mov	r0, r3
 8007096:	3750      	adds	r7, #80	; 0x50
 8007098:	46bd      	mov	sp, r7
 800709a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800709e:	bf00      	nop
 80070a0:	40023800 	.word	0x40023800
 80070a4:	00f42400 	.word	0x00f42400
 80070a8:	007a1200 	.word	0x007a1200

080070ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070b0:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070b2:	681b      	ldr	r3, [r3, #0]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	2000007c 	.word	0x2000007c

080070c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070c8:	f7ff fff0 	bl	80070ac <HAL_RCC_GetHCLKFreq>
 80070cc:	4602      	mov	r2, r0
 80070ce:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	0a9b      	lsrs	r3, r3, #10
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	4903      	ldr	r1, [pc, #12]	; (80070e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070da:	5ccb      	ldrb	r3, [r1, r3]
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40023800 	.word	0x40023800
 80070e8:	0800ae90 	.word	0x0800ae90

080070ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070f0:	f7ff ffdc 	bl	80070ac <HAL_RCC_GetHCLKFreq>
 80070f4:	4602      	mov	r2, r0
 80070f6:	4b05      	ldr	r3, [pc, #20]	; (800710c <HAL_RCC_GetPCLK2Freq+0x20>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	0b5b      	lsrs	r3, r3, #13
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	4903      	ldr	r1, [pc, #12]	; (8007110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007102:	5ccb      	ldrb	r3, [r1, r3]
 8007104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007108:	4618      	mov	r0, r3
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40023800 	.word	0x40023800
 8007110:	0800ae90 	.word	0x0800ae90

08007114 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d105      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007138:	2b00      	cmp	r3, #0
 800713a:	d035      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800713c:	4b67      	ldr	r3, [pc, #412]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007142:	f7fd fba3 	bl	800488c <HAL_GetTick>
 8007146:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007148:	e008      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800714a:	f7fd fb9f 	bl	800488c <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	d901      	bls.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e0ba      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800715c:	4b60      	ldr	r3, [pc, #384]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1f0      	bne.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	019a      	lsls	r2, r3, #6
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	071b      	lsls	r3, r3, #28
 8007174:	495a      	ldr	r1, [pc, #360]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007176:	4313      	orrs	r3, r2
 8007178:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800717c:	4b57      	ldr	r3, [pc, #348]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800717e:	2201      	movs	r2, #1
 8007180:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007182:	f7fd fb83 	bl	800488c <HAL_GetTick>
 8007186:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007188:	e008      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800718a:	f7fd fb7f 	bl	800488c <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d901      	bls.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e09a      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800719c:	4b50      	ldr	r3, [pc, #320]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0f0      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8083 	beq.w	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	4b49      	ldr	r3, [pc, #292]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	4a48      	ldr	r2, [pc, #288]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c4:	6413      	str	r3, [r2, #64]	; 0x40
 80071c6:	4b46      	ldr	r3, [pc, #280]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071d2:	4b44      	ldr	r3, [pc, #272]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a43      	ldr	r2, [pc, #268]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071de:	f7fd fb55 	bl	800488c <HAL_GetTick>
 80071e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071e4:	e008      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071e6:	f7fd fb51 	bl	800488c <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d901      	bls.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e06c      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071f8:	4b3a      	ldr	r3, [pc, #232]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0f0      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007204:	4b36      	ldr	r3, [pc, #216]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800720c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d02f      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	429a      	cmp	r2, r3
 8007220:	d028      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007222:	4b2f      	ldr	r3, [pc, #188]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800722a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800722c:	4b2e      	ldr	r3, [pc, #184]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800722e:	2201      	movs	r2, #1
 8007230:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007232:	4b2d      	ldr	r3, [pc, #180]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007238:	4a29      	ldr	r2, [pc, #164]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800723e:	4b28      	ldr	r3, [pc, #160]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b01      	cmp	r3, #1
 8007248:	d114      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800724a:	f7fd fb1f 	bl	800488c <HAL_GetTick>
 800724e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007250:	e00a      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007252:	f7fd fb1b 	bl	800488c <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007260:	4293      	cmp	r3, r2
 8007262:	d901      	bls.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e034      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007268:	4b1d      	ldr	r3, [pc, #116]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800726a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0ee      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007280:	d10d      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007282:	4b17      	ldr	r3, [pc, #92]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007296:	4912      	ldr	r1, [pc, #72]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007298:	4313      	orrs	r3, r2
 800729a:	608b      	str	r3, [r1, #8]
 800729c:	e005      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800729e:	4b10      	ldr	r3, [pc, #64]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	4a0f      	ldr	r2, [pc, #60]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80072a8:	6093      	str	r3, [r2, #8]
 80072aa:	4b0d      	ldr	r3, [pc, #52]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072b6:	490a      	ldr	r1, [pc, #40]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	7c1a      	ldrb	r2, [r3, #16]
 80072cc:	4b07      	ldr	r3, [pc, #28]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80072ce:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	42470068 	.word	0x42470068
 80072e0:	40023800 	.word	0x40023800
 80072e4:	40007000 	.word	0x40007000
 80072e8:	42470e40 	.word	0x42470e40
 80072ec:	424711e0 	.word	0x424711e0

080072f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e066      	b.n	80073d4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	7f5b      	ldrb	r3, [r3, #29]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d105      	bne.n	800731c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fb ff5e 	bl	80031d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	22ca      	movs	r2, #202	; 0xca
 8007328:	625a      	str	r2, [r3, #36]	; 0x24
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2253      	movs	r2, #83	; 0x53
 8007330:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fa45 	bl	80077c2 <RTC_EnterInitMode>
 8007338:	4603      	mov	r3, r0
 800733a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d12c      	bne.n	800739c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007354:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6899      	ldr	r1, [r3, #8]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	431a      	orrs	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	68d2      	ldr	r2, [r2, #12]
 800737c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6919      	ldr	r1, [r3, #16]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	041a      	lsls	r2, r3, #16
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fa4c 	bl	8007830 <RTC_ExitInitMode>
 8007398:	4603      	mov	r3, r0
 800739a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d113      	bne.n	80073ca <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073b0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	699a      	ldr	r2, [r3, #24]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	22ff      	movs	r2, #255	; 0xff
 80073d0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80073dc:	b590      	push	{r4, r7, lr}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	7f1b      	ldrb	r3, [r3, #28]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d101      	bne.n	80073f8 <HAL_RTC_SetTime+0x1c>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e087      	b.n	8007508 <HAL_RTC_SetTime+0x12c>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2202      	movs	r2, #2
 8007402:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d126      	bne.n	8007458 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2200      	movs	r2, #0
 800741c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fa29 	bl	800787a <RTC_ByteToBcd2>
 8007428:	4603      	mov	r3, r0
 800742a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	785b      	ldrb	r3, [r3, #1]
 8007430:	4618      	mov	r0, r3
 8007432:	f000 fa22 	bl	800787a <RTC_ByteToBcd2>
 8007436:	4603      	mov	r3, r0
 8007438:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800743a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	789b      	ldrb	r3, [r3, #2]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fa1a 	bl	800787a <RTC_ByteToBcd2>
 8007446:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007448:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	78db      	ldrb	r3, [r3, #3]
 8007450:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	e018      	b.n	800748a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d102      	bne.n	800746c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2200      	movs	r2, #0
 800746a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	785b      	ldrb	r3, [r3, #1]
 8007476:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007478:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800747e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	78db      	ldrb	r3, [r3, #3]
 8007484:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	22ca      	movs	r2, #202	; 0xca
 8007490:	625a      	str	r2, [r3, #36]	; 0x24
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2253      	movs	r2, #83	; 0x53
 8007498:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 f991 	bl	80077c2 <RTC_EnterInitMode>
 80074a0:	4603      	mov	r3, r0
 80074a2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80074a4:	7cfb      	ldrb	r3, [r7, #19]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d120      	bne.n	80074ec <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80074b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80074b8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074c8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6899      	ldr	r1, [r3, #8]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	431a      	orrs	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 f9a4 	bl	8007830 <RTC_ExitInitMode>
 80074e8:	4603      	mov	r3, r0
 80074ea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80074ec:	7cfb      	ldrb	r3, [r7, #19]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d102      	bne.n	80074f8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	22ff      	movs	r2, #255	; 0xff
 80074fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	771a      	strb	r2, [r3, #28]

  return status;
 8007506:	7cfb      	ldrb	r3, [r7, #19]
}
 8007508:	4618      	mov	r0, r3
 800750a:	371c      	adds	r7, #28
 800750c:	46bd      	mov	sp, r7
 800750e:	bd90      	pop	{r4, r7, pc}

08007510 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007542:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007546:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	0c1b      	lsrs	r3, r3, #16
 800754c:	b2db      	uxtb	r3, r3
 800754e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007552:	b2da      	uxtb	r2, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	0a1b      	lsrs	r3, r3, #8
 800755c:	b2db      	uxtb	r3, r3
 800755e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007562:	b2da      	uxtb	r2, r3
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007570:	b2da      	uxtb	r2, r3
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	0d9b      	lsrs	r3, r3, #22
 800757a:	b2db      	uxtb	r3, r3
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	b2da      	uxtb	r2, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d11a      	bne.n	80075c2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f000 f98f 	bl	80078b4 <RTC_Bcd2ToByte>
 8007596:	4603      	mov	r3, r0
 8007598:	461a      	mov	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	785b      	ldrb	r3, [r3, #1]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 f986 	bl	80078b4 <RTC_Bcd2ToByte>
 80075a8:	4603      	mov	r3, r0
 80075aa:	461a      	mov	r2, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	789b      	ldrb	r3, [r3, #2]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 f97d 	bl	80078b4 <RTC_Bcd2ToByte>
 80075ba:	4603      	mov	r3, r0
 80075bc:	461a      	mov	r2, r3
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80075cc:	b590      	push	{r4, r7, lr}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	7f1b      	ldrb	r3, [r3, #28]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d101      	bne.n	80075e8 <HAL_RTC_SetDate+0x1c>
 80075e4:	2302      	movs	r3, #2
 80075e6:	e071      	b.n	80076cc <HAL_RTC_SetDate+0x100>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2201      	movs	r2, #1
 80075ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2202      	movs	r2, #2
 80075f2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10e      	bne.n	8007618 <HAL_RTC_SetDate+0x4c>
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	785b      	ldrb	r3, [r3, #1]
 80075fe:	f003 0310 	and.w	r3, r3, #16
 8007602:	2b00      	cmp	r3, #0
 8007604:	d008      	beq.n	8007618 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	f023 0310 	bic.w	r3, r3, #16
 800760e:	b2db      	uxtb	r3, r3
 8007610:	330a      	adds	r3, #10
 8007612:	b2da      	uxtb	r2, r3
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d11c      	bne.n	8007658 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	78db      	ldrb	r3, [r3, #3]
 8007622:	4618      	mov	r0, r3
 8007624:	f000 f929 	bl	800787a <RTC_ByteToBcd2>
 8007628:	4603      	mov	r3, r0
 800762a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	785b      	ldrb	r3, [r3, #1]
 8007630:	4618      	mov	r0, r3
 8007632:	f000 f922 	bl	800787a <RTC_ByteToBcd2>
 8007636:	4603      	mov	r3, r0
 8007638:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800763a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	789b      	ldrb	r3, [r3, #2]
 8007640:	4618      	mov	r0, r3
 8007642:	f000 f91a 	bl	800787a <RTC_ByteToBcd2>
 8007646:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007648:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007652:	4313      	orrs	r3, r2
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	e00e      	b.n	8007676 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	78db      	ldrb	r3, [r3, #3]
 800765c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007664:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800766a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	22ca      	movs	r2, #202	; 0xca
 800767c:	625a      	str	r2, [r3, #36]	; 0x24
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2253      	movs	r2, #83	; 0x53
 8007684:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f89b 	bl	80077c2 <RTC_EnterInitMode>
 800768c:	4603      	mov	r3, r0
 800768e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007690:	7cfb      	ldrb	r3, [r7, #19]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10c      	bne.n	80076b0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80076a4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 f8c2 	bl	8007830 <RTC_ExitInitMode>
 80076ac:	4603      	mov	r3, r0
 80076ae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80076b0:	7cfb      	ldrb	r3, [r7, #19]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d102      	bne.n	80076bc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	22ff      	movs	r2, #255	; 0xff
 80076c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	771a      	strb	r2, [r3, #28]

  return status;
 80076ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	371c      	adds	r7, #28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd90      	pop	{r4, r7, pc}

080076d4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80076f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	0c1b      	lsrs	r3, r3, #16
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	0a1b      	lsrs	r3, r3, #8
 8007702:	b2db      	uxtb	r3, r3
 8007704:	f003 031f 	and.w	r3, r3, #31
 8007708:	b2da      	uxtb	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007716:	b2da      	uxtb	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	0b5b      	lsrs	r3, r3, #13
 8007720:	b2db      	uxtb	r3, r3
 8007722:	f003 0307 	and.w	r3, r3, #7
 8007726:	b2da      	uxtb	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d11a      	bne.n	8007768 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	78db      	ldrb	r3, [r3, #3]
 8007736:	4618      	mov	r0, r3
 8007738:	f000 f8bc 	bl	80078b4 <RTC_Bcd2ToByte>
 800773c:	4603      	mov	r3, r0
 800773e:	461a      	mov	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	785b      	ldrb	r3, [r3, #1]
 8007748:	4618      	mov	r0, r3
 800774a:	f000 f8b3 	bl	80078b4 <RTC_Bcd2ToByte>
 800774e:	4603      	mov	r3, r0
 8007750:	461a      	mov	r2, r3
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	789b      	ldrb	r3, [r3, #2]
 800775a:	4618      	mov	r0, r3
 800775c:	f000 f8aa 	bl	80078b4 <RTC_Bcd2ToByte>
 8007760:	4603      	mov	r3, r0
 8007762:	461a      	mov	r2, r3
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800778c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800778e:	f7fd f87d 	bl	800488c <HAL_GetTick>
 8007792:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007794:	e009      	b.n	80077aa <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007796:	f7fd f879 	bl	800488c <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077a4:	d901      	bls.n	80077aa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e007      	b.n	80077ba <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f003 0320 	and.w	r3, r3, #32
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0ee      	beq.n	8007796 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d122      	bne.n	8007826 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077f0:	f7fd f84c 	bl	800488c <HAL_GetTick>
 80077f4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80077f6:	e00c      	b.n	8007812 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077f8:	f7fd f848 	bl	800488c <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007806:	d904      	bls.n	8007812 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2204      	movs	r2, #4
 800780c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781c:	2b00      	cmp	r3, #0
 800781e:	d102      	bne.n	8007826 <RTC_EnterInitMode+0x64>
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d1e8      	bne.n	80077f8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68da      	ldr	r2, [r3, #12]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800784a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f003 0320 	and.w	r3, r3, #32
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7ff ff89 	bl	8007772 <HAL_RTC_WaitForSynchro>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2204      	movs	r2, #4
 800786a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800787a:	b480      	push	{r7}
 800787c:	b085      	sub	sp, #20
 800787e:	af00      	add	r7, sp, #0
 8007880:	4603      	mov	r3, r0
 8007882:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007888:	e005      	b.n	8007896 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	3301      	adds	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007890:	79fb      	ldrb	r3, [r7, #7]
 8007892:	3b0a      	subs	r3, #10
 8007894:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007896:	79fb      	ldrb	r3, [r7, #7]
 8007898:	2b09      	cmp	r3, #9
 800789a:	d8f6      	bhi.n	800788a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	b2db      	uxtb	r3, r3
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	091b      	lsrs	r3, r3, #4
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	461a      	mov	r2, r3
 80078ca:	0092      	lsls	r2, r2, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80078d2:	79fb      	ldrb	r3, [r7, #7]
 80078d4:	f003 030f 	and.w	r3, r3, #15
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	4413      	add	r3, r2
 80078de:	b2db      	uxtb	r3, r3
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e041      	b.n	8007982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7fb fc8c 	bl	8003230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f000 fc82 	bl	8008234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b01      	cmp	r3, #1
 800799e:	d001      	beq.n	80079a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e044      	b.n	8007a2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0201 	orr.w	r2, r2, #1
 80079ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1e      	ldr	r2, [pc, #120]	; (8007a3c <HAL_TIM_Base_Start_IT+0xb0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d018      	beq.n	80079f8 <HAL_TIM_Base_Start_IT+0x6c>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ce:	d013      	beq.n	80079f8 <HAL_TIM_Base_Start_IT+0x6c>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a1a      	ldr	r2, [pc, #104]	; (8007a40 <HAL_TIM_Base_Start_IT+0xb4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d00e      	beq.n	80079f8 <HAL_TIM_Base_Start_IT+0x6c>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a19      	ldr	r2, [pc, #100]	; (8007a44 <HAL_TIM_Base_Start_IT+0xb8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d009      	beq.n	80079f8 <HAL_TIM_Base_Start_IT+0x6c>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <HAL_TIM_Base_Start_IT+0xbc>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d004      	beq.n	80079f8 <HAL_TIM_Base_Start_IT+0x6c>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a16      	ldr	r2, [pc, #88]	; (8007a4c <HAL_TIM_Base_Start_IT+0xc0>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d111      	bne.n	8007a1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b06      	cmp	r3, #6
 8007a08:	d010      	beq.n	8007a2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 0201 	orr.w	r2, r2, #1
 8007a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1a:	e007      	b.n	8007a2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0201 	orr.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	40010000 	.word	0x40010000
 8007a40:	40000400 	.word	0x40000400
 8007a44:	40000800 	.word	0x40000800
 8007a48:	40000c00 	.word	0x40000c00
 8007a4c:	40014000 	.word	0x40014000

08007a50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0201 	bic.w	r2, r2, #1
 8007a66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6a1a      	ldr	r2, [r3, #32]
 8007a6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a72:	4013      	ands	r3, r2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10f      	bne.n	8007a98 <HAL_TIM_Base_Stop_IT+0x48>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6a1a      	ldr	r2, [r3, #32]
 8007a7e:	f240 4344 	movw	r3, #1092	; 0x444
 8007a82:	4013      	ands	r3, r2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d107      	bne.n	8007a98 <HAL_TIM_Base_Stop_IT+0x48>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 0201 	bic.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e041      	b.n	8007b44 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f839 	bl	8007b4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2202      	movs	r2, #2
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f000 fba1 	bl	8008234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d109      	bne.n	8007b84 <HAL_TIM_PWM_Start+0x24>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	bf14      	ite	ne
 8007b7c:	2301      	movne	r3, #1
 8007b7e:	2300      	moveq	r3, #0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	e022      	b.n	8007bca <HAL_TIM_PWM_Start+0x6a>
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d109      	bne.n	8007b9e <HAL_TIM_PWM_Start+0x3e>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	bf14      	ite	ne
 8007b96:	2301      	movne	r3, #1
 8007b98:	2300      	moveq	r3, #0
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	e015      	b.n	8007bca <HAL_TIM_PWM_Start+0x6a>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d109      	bne.n	8007bb8 <HAL_TIM_PWM_Start+0x58>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	bf14      	ite	ne
 8007bb0:	2301      	movne	r3, #1
 8007bb2:	2300      	moveq	r3, #0
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	e008      	b.n	8007bca <HAL_TIM_PWM_Start+0x6a>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	bf14      	ite	ne
 8007bc4:	2301      	movne	r3, #1
 8007bc6:	2300      	moveq	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e068      	b.n	8007ca4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d104      	bne.n	8007be2 <HAL_TIM_PWM_Start+0x82>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007be0:	e013      	b.n	8007c0a <HAL_TIM_PWM_Start+0xaa>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d104      	bne.n	8007bf2 <HAL_TIM_PWM_Start+0x92>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bf0:	e00b      	b.n	8007c0a <HAL_TIM_PWM_Start+0xaa>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d104      	bne.n	8007c02 <HAL_TIM_PWM_Start+0xa2>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c00:	e003      	b.n	8007c0a <HAL_TIM_PWM_Start+0xaa>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2202      	movs	r2, #2
 8007c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fdb4 	bl	8008780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a23      	ldr	r2, [pc, #140]	; (8007cac <HAL_TIM_PWM_Start+0x14c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d107      	bne.n	8007c32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a1d      	ldr	r2, [pc, #116]	; (8007cac <HAL_TIM_PWM_Start+0x14c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d018      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x10e>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c44:	d013      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x10e>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a19      	ldr	r2, [pc, #100]	; (8007cb0 <HAL_TIM_PWM_Start+0x150>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00e      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x10e>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a17      	ldr	r2, [pc, #92]	; (8007cb4 <HAL_TIM_PWM_Start+0x154>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d009      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x10e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a16      	ldr	r2, [pc, #88]	; (8007cb8 <HAL_TIM_PWM_Start+0x158>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d004      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x10e>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a14      	ldr	r2, [pc, #80]	; (8007cbc <HAL_TIM_PWM_Start+0x15c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d111      	bne.n	8007c92 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f003 0307 	and.w	r3, r3, #7
 8007c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b06      	cmp	r3, #6
 8007c7e:	d010      	beq.n	8007ca2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0201 	orr.w	r2, r2, #1
 8007c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c90:	e007      	b.n	8007ca2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f042 0201 	orr.w	r2, r2, #1
 8007ca0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	40010000 	.word	0x40010000
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000800 	.word	0x40000800
 8007cb8:	40000c00 	.word	0x40000c00
 8007cbc:	40014000 	.word	0x40014000

08007cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d122      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d11b      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f06f 0202 	mvn.w	r2, #2
 8007cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa77 	bl	80081f6 <HAL_TIM_IC_CaptureCallback>
 8007d08:	e005      	b.n	8007d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa69 	bl	80081e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fa7a 	bl	800820a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f003 0304 	and.w	r3, r3, #4
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d122      	bne.n	8007d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d11b      	bne.n	8007d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f06f 0204 	mvn.w	r2, #4
 8007d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa4d 	bl	80081f6 <HAL_TIM_IC_CaptureCallback>
 8007d5c:	e005      	b.n	8007d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa3f 	bl	80081e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fa50 	bl	800820a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	f003 0308 	and.w	r3, r3, #8
 8007d7a:	2b08      	cmp	r3, #8
 8007d7c:	d122      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d11b      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f06f 0208 	mvn.w	r2, #8
 8007d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2204      	movs	r2, #4
 8007d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	f003 0303 	and.w	r3, r3, #3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa23 	bl	80081f6 <HAL_TIM_IC_CaptureCallback>
 8007db0:	e005      	b.n	8007dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa15 	bl	80081e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fa26 	bl	800820a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	f003 0310 	and.w	r3, r3, #16
 8007dce:	2b10      	cmp	r3, #16
 8007dd0:	d122      	bne.n	8007e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f003 0310 	and.w	r3, r3, #16
 8007ddc:	2b10      	cmp	r3, #16
 8007dde:	d11b      	bne.n	8007e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f06f 0210 	mvn.w	r2, #16
 8007de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2208      	movs	r2, #8
 8007dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f9f9 	bl	80081f6 <HAL_TIM_IC_CaptureCallback>
 8007e04:	e005      	b.n	8007e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f9eb 	bl	80081e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f9fc 	bl	800820a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d10e      	bne.n	8007e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d107      	bne.n	8007e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f06f 0201 	mvn.w	r2, #1
 8007e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7f8 ff58 	bl	8000cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4e:	2b80      	cmp	r3, #128	; 0x80
 8007e50:	d10e      	bne.n	8007e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5c:	2b80      	cmp	r3, #128	; 0x80
 8007e5e:	d107      	bne.n	8007e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fd26 	bl	80088bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7a:	2b40      	cmp	r3, #64	; 0x40
 8007e7c:	d10e      	bne.n	8007e9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e88:	2b40      	cmp	r3, #64	; 0x40
 8007e8a:	d107      	bne.n	8007e9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f9c1 	bl	800821e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d10e      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f003 0320 	and.w	r3, r3, #32
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	d107      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f06f 0220 	mvn.w	r2, #32
 8007ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fcf0 	bl	80088a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d101      	bne.n	8007eee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e0ae      	b.n	800804c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b0c      	cmp	r3, #12
 8007efa:	f200 809f 	bhi.w	800803c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007efe:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f04:	08007f39 	.word	0x08007f39
 8007f08:	0800803d 	.word	0x0800803d
 8007f0c:	0800803d 	.word	0x0800803d
 8007f10:	0800803d 	.word	0x0800803d
 8007f14:	08007f79 	.word	0x08007f79
 8007f18:	0800803d 	.word	0x0800803d
 8007f1c:	0800803d 	.word	0x0800803d
 8007f20:	0800803d 	.word	0x0800803d
 8007f24:	08007fbb 	.word	0x08007fbb
 8007f28:	0800803d 	.word	0x0800803d
 8007f2c:	0800803d 	.word	0x0800803d
 8007f30:	0800803d 	.word	0x0800803d
 8007f34:	08007ffb 	.word	0x08007ffb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68b9      	ldr	r1, [r7, #8]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f9f8 	bl	8008334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0208 	orr.w	r2, r2, #8
 8007f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699a      	ldr	r2, [r3, #24]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0204 	bic.w	r2, r2, #4
 8007f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6999      	ldr	r1, [r3, #24]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	691a      	ldr	r2, [r3, #16]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	619a      	str	r2, [r3, #24]
      break;
 8007f76:	e064      	b.n	8008042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68b9      	ldr	r1, [r7, #8]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fa3e 	bl	8008400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699a      	ldr	r2, [r3, #24]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6999      	ldr	r1, [r3, #24]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	021a      	lsls	r2, r3, #8
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	619a      	str	r2, [r3, #24]
      break;
 8007fb8:	e043      	b.n	8008042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fa89 	bl	80084d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69da      	ldr	r2, [r3, #28]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f042 0208 	orr.w	r2, r2, #8
 8007fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	69da      	ldr	r2, [r3, #28]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0204 	bic.w	r2, r2, #4
 8007fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69d9      	ldr	r1, [r3, #28]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	61da      	str	r2, [r3, #28]
      break;
 8007ff8:	e023      	b.n	8008042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68b9      	ldr	r1, [r7, #8]
 8008000:	4618      	mov	r0, r3
 8008002:	f000 fad3 	bl	80085ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	69da      	ldr	r2, [r3, #28]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	69da      	ldr	r2, [r3, #28]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69d9      	ldr	r1, [r3, #28]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	021a      	lsls	r2, r3, #8
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	61da      	str	r2, [r3, #28]
      break;
 800803a:	e002      	b.n	8008042 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	75fb      	strb	r3, [r7, #23]
      break;
 8008040:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800804a:	7dfb      	ldrb	r3, [r7, #23]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <HAL_TIM_ConfigClockSource+0x1c>
 800806c:	2302      	movs	r3, #2
 800806e:	e0b4      	b.n	80081da <HAL_TIM_ConfigClockSource+0x186>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800808e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008096:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080a8:	d03e      	beq.n	8008128 <HAL_TIM_ConfigClockSource+0xd4>
 80080aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ae:	f200 8087 	bhi.w	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b6:	f000 8086 	beq.w	80081c6 <HAL_TIM_ConfigClockSource+0x172>
 80080ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080be:	d87f      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080c0:	2b70      	cmp	r3, #112	; 0x70
 80080c2:	d01a      	beq.n	80080fa <HAL_TIM_ConfigClockSource+0xa6>
 80080c4:	2b70      	cmp	r3, #112	; 0x70
 80080c6:	d87b      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080c8:	2b60      	cmp	r3, #96	; 0x60
 80080ca:	d050      	beq.n	800816e <HAL_TIM_ConfigClockSource+0x11a>
 80080cc:	2b60      	cmp	r3, #96	; 0x60
 80080ce:	d877      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080d0:	2b50      	cmp	r3, #80	; 0x50
 80080d2:	d03c      	beq.n	800814e <HAL_TIM_ConfigClockSource+0xfa>
 80080d4:	2b50      	cmp	r3, #80	; 0x50
 80080d6:	d873      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080d8:	2b40      	cmp	r3, #64	; 0x40
 80080da:	d058      	beq.n	800818e <HAL_TIM_ConfigClockSource+0x13a>
 80080dc:	2b40      	cmp	r3, #64	; 0x40
 80080de:	d86f      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080e0:	2b30      	cmp	r3, #48	; 0x30
 80080e2:	d064      	beq.n	80081ae <HAL_TIM_ConfigClockSource+0x15a>
 80080e4:	2b30      	cmp	r3, #48	; 0x30
 80080e6:	d86b      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080e8:	2b20      	cmp	r3, #32
 80080ea:	d060      	beq.n	80081ae <HAL_TIM_ConfigClockSource+0x15a>
 80080ec:	2b20      	cmp	r3, #32
 80080ee:	d867      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d05c      	beq.n	80081ae <HAL_TIM_ConfigClockSource+0x15a>
 80080f4:	2b10      	cmp	r3, #16
 80080f6:	d05a      	beq.n	80081ae <HAL_TIM_ConfigClockSource+0x15a>
 80080f8:	e062      	b.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	6899      	ldr	r1, [r3, #8]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	f000 fb19 	bl	8008740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800811c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	609a      	str	r2, [r3, #8]
      break;
 8008126:	e04f      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	6899      	ldr	r1, [r3, #8]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f000 fb02 	bl	8008740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800814a:	609a      	str	r2, [r3, #8]
      break;
 800814c:	e03c      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	6859      	ldr	r1, [r3, #4]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	461a      	mov	r2, r3
 800815c:	f000 fa76 	bl	800864c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2150      	movs	r1, #80	; 0x50
 8008166:	4618      	mov	r0, r3
 8008168:	f000 facf 	bl	800870a <TIM_ITRx_SetConfig>
      break;
 800816c:	e02c      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	6859      	ldr	r1, [r3, #4]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	461a      	mov	r2, r3
 800817c:	f000 fa95 	bl	80086aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2160      	movs	r1, #96	; 0x60
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fabf 	bl	800870a <TIM_ITRx_SetConfig>
      break;
 800818c:	e01c      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6818      	ldr	r0, [r3, #0]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	6859      	ldr	r1, [r3, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	461a      	mov	r2, r3
 800819c:	f000 fa56 	bl	800864c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2140      	movs	r1, #64	; 0x40
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 faaf 	bl	800870a <TIM_ITRx_SetConfig>
      break;
 80081ac:	e00c      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4619      	mov	r1, r3
 80081b8:	4610      	mov	r0, r2
 80081ba:	f000 faa6 	bl	800870a <TIM_ITRx_SetConfig>
      break;
 80081be:	e003      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	73fb      	strb	r3, [r7, #15]
      break;
 80081c4:	e000      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081fe:	bf00      	nop
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008212:	bf00      	nop
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
	...

08008234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a34      	ldr	r2, [pc, #208]	; (8008318 <TIM_Base_SetConfig+0xe4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d00f      	beq.n	800826c <TIM_Base_SetConfig+0x38>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008252:	d00b      	beq.n	800826c <TIM_Base_SetConfig+0x38>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a31      	ldr	r2, [pc, #196]	; (800831c <TIM_Base_SetConfig+0xe8>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d007      	beq.n	800826c <TIM_Base_SetConfig+0x38>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a30      	ldr	r2, [pc, #192]	; (8008320 <TIM_Base_SetConfig+0xec>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d003      	beq.n	800826c <TIM_Base_SetConfig+0x38>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a2f      	ldr	r2, [pc, #188]	; (8008324 <TIM_Base_SetConfig+0xf0>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d108      	bne.n	800827e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	4313      	orrs	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a25      	ldr	r2, [pc, #148]	; (8008318 <TIM_Base_SetConfig+0xe4>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d01b      	beq.n	80082be <TIM_Base_SetConfig+0x8a>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800828c:	d017      	beq.n	80082be <TIM_Base_SetConfig+0x8a>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a22      	ldr	r2, [pc, #136]	; (800831c <TIM_Base_SetConfig+0xe8>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d013      	beq.n	80082be <TIM_Base_SetConfig+0x8a>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a21      	ldr	r2, [pc, #132]	; (8008320 <TIM_Base_SetConfig+0xec>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d00f      	beq.n	80082be <TIM_Base_SetConfig+0x8a>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a20      	ldr	r2, [pc, #128]	; (8008324 <TIM_Base_SetConfig+0xf0>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d00b      	beq.n	80082be <TIM_Base_SetConfig+0x8a>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a1f      	ldr	r2, [pc, #124]	; (8008328 <TIM_Base_SetConfig+0xf4>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d007      	beq.n	80082be <TIM_Base_SetConfig+0x8a>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a1e      	ldr	r2, [pc, #120]	; (800832c <TIM_Base_SetConfig+0xf8>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d003      	beq.n	80082be <TIM_Base_SetConfig+0x8a>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a1d      	ldr	r2, [pc, #116]	; (8008330 <TIM_Base_SetConfig+0xfc>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d108      	bne.n	80082d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a08      	ldr	r2, [pc, #32]	; (8008318 <TIM_Base_SetConfig+0xe4>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d103      	bne.n	8008304 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	691a      	ldr	r2, [r3, #16]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	615a      	str	r2, [r3, #20]
}
 800830a:	bf00      	nop
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	40010000 	.word	0x40010000
 800831c:	40000400 	.word	0x40000400
 8008320:	40000800 	.word	0x40000800
 8008324:	40000c00 	.word	0x40000c00
 8008328:	40014000 	.word	0x40014000
 800832c:	40014400 	.word	0x40014400
 8008330:	40014800 	.word	0x40014800

08008334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	f023 0201 	bic.w	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f023 0303 	bic.w	r3, r3, #3
 800836a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4313      	orrs	r3, r2
 8008374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f023 0302 	bic.w	r3, r3, #2
 800837c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	4313      	orrs	r3, r2
 8008386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a1c      	ldr	r2, [pc, #112]	; (80083fc <TIM_OC1_SetConfig+0xc8>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d10c      	bne.n	80083aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f023 0308 	bic.w	r3, r3, #8
 8008396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	4313      	orrs	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f023 0304 	bic.w	r3, r3, #4
 80083a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a13      	ldr	r2, [pc, #76]	; (80083fc <TIM_OC1_SetConfig+0xc8>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d111      	bne.n	80083d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	621a      	str	r2, [r3, #32]
}
 80083f0:	bf00      	nop
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	40010000 	.word	0x40010000

08008400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008400:	b480      	push	{r7}
 8008402:	b087      	sub	sp, #28
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	f023 0210 	bic.w	r2, r3, #16
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800842e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	021b      	lsls	r3, r3, #8
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	4313      	orrs	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f023 0320 	bic.w	r3, r3, #32
 800844a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	4313      	orrs	r3, r2
 8008456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a1e      	ldr	r2, [pc, #120]	; (80084d4 <TIM_OC2_SetConfig+0xd4>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d10d      	bne.n	800847c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	011b      	lsls	r3, r3, #4
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	4313      	orrs	r3, r2
 8008472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800847a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a15      	ldr	r2, [pc, #84]	; (80084d4 <TIM_OC2_SetConfig+0xd4>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d113      	bne.n	80084ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800848a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	4313      	orrs	r3, r2
 800849e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	621a      	str	r2, [r3, #32]
}
 80084c6:	bf00      	nop
 80084c8:	371c      	adds	r7, #28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	40010000 	.word	0x40010000

080084d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084d8:	b480      	push	{r7}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f023 0303 	bic.w	r3, r3, #3
 800850e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	021b      	lsls	r3, r3, #8
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	4313      	orrs	r3, r2
 800852c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a1d      	ldr	r2, [pc, #116]	; (80085a8 <TIM_OC3_SetConfig+0xd0>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d10d      	bne.n	8008552 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800853c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	021b      	lsls	r3, r3, #8
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	4313      	orrs	r3, r2
 8008548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a14      	ldr	r2, [pc, #80]	; (80085a8 <TIM_OC3_SetConfig+0xd0>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d113      	bne.n	8008582 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	011b      	lsls	r3, r3, #4
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	4313      	orrs	r3, r2
 8008574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	011b      	lsls	r3, r3, #4
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	4313      	orrs	r3, r2
 8008580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	621a      	str	r2, [r3, #32]
}
 800859c:	bf00      	nop
 800859e:	371c      	adds	r7, #28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	40010000 	.word	0x40010000

080085ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	021b      	lsls	r3, r3, #8
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	031b      	lsls	r3, r3, #12
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	4313      	orrs	r3, r2
 8008602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a10      	ldr	r2, [pc, #64]	; (8008648 <TIM_OC4_SetConfig+0x9c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d109      	bne.n	8008620 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	019b      	lsls	r3, r3, #6
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685a      	ldr	r2, [r3, #4]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	621a      	str	r2, [r3, #32]
}
 800863a:	bf00      	nop
 800863c:	371c      	adds	r7, #28
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	40010000 	.word	0x40010000

0800864c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	f023 0201 	bic.w	r2, r3, #1
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	011b      	lsls	r3, r3, #4
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	4313      	orrs	r3, r2
 8008680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f023 030a 	bic.w	r3, r3, #10
 8008688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	4313      	orrs	r3, r2
 8008690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	621a      	str	r2, [r3, #32]
}
 800869e:	bf00      	nop
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b087      	sub	sp, #28
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	60f8      	str	r0, [r7, #12]
 80086b2:	60b9      	str	r1, [r7, #8]
 80086b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	f023 0210 	bic.w	r2, r3, #16
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	031b      	lsls	r3, r3, #12
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	4313      	orrs	r3, r2
 80086de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	011b      	lsls	r3, r3, #4
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	621a      	str	r2, [r3, #32]
}
 80086fe:	bf00      	nop
 8008700:	371c      	adds	r7, #28
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800870a:	b480      	push	{r7}
 800870c:	b085      	sub	sp, #20
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4313      	orrs	r3, r2
 8008728:	f043 0307 	orr.w	r3, r3, #7
 800872c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	609a      	str	r2, [r3, #8]
}
 8008734:	bf00      	nop
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008740:	b480      	push	{r7}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800875a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	021a      	lsls	r2, r3, #8
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	431a      	orrs	r2, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	4313      	orrs	r3, r2
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	609a      	str	r2, [r3, #8]
}
 8008774:	bf00      	nop
 8008776:	371c      	adds	r7, #28
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f003 031f 	and.w	r3, r3, #31
 8008792:	2201      	movs	r2, #1
 8008794:	fa02 f303 	lsl.w	r3, r2, r3
 8008798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a1a      	ldr	r2, [r3, #32]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	43db      	mvns	r3, r3
 80087a2:	401a      	ands	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a1a      	ldr	r2, [r3, #32]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f003 031f 	and.w	r3, r3, #31
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	fa01 f303 	lsl.w	r3, r1, r3
 80087b8:	431a      	orrs	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	621a      	str	r2, [r3, #32]
}
 80087be:	bf00      	nop
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
	...

080087cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d101      	bne.n	80087e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087e0:	2302      	movs	r3, #2
 80087e2:	e050      	b.n	8008886 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1c      	ldr	r2, [pc, #112]	; (8008894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d018      	beq.n	800885a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008830:	d013      	beq.n	800885a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a18      	ldr	r2, [pc, #96]	; (8008898 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d00e      	beq.n	800885a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a16      	ldr	r2, [pc, #88]	; (800889c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d009      	beq.n	800885a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a15      	ldr	r2, [pc, #84]	; (80088a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d004      	beq.n	800885a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a13      	ldr	r2, [pc, #76]	; (80088a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d10c      	bne.n	8008874 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	4313      	orrs	r3, r2
 800886a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	40010000 	.word	0x40010000
 8008898:	40000400 	.word	0x40000400
 800889c:	40000800 	.word	0x40000800
 80088a0:	40000c00 	.word	0x40000c00
 80088a4:	40014000 	.word	0x40014000

080088a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e03f      	b.n	8008962 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d106      	bne.n	80088fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f837 	bl	800896a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2224      	movs	r2, #36	; 0x24
 8008900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fbaf 	bl	8009078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	691a      	ldr	r2, [r3, #16]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	695a      	ldr	r2, [r3, #20]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68da      	ldr	r2, [r3, #12]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2220      	movs	r2, #32
 8008954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2220      	movs	r2, #32
 800895c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8008972:	bf00      	nop
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b08a      	sub	sp, #40	; 0x28
 8008982:	af02      	add	r7, sp, #8
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	603b      	str	r3, [r7, #0]
 800898a:	4613      	mov	r3, r2
 800898c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b20      	cmp	r3, #32
 800899c:	d17c      	bne.n	8008a98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <HAL_UART_Transmit+0x2c>
 80089a4:	88fb      	ldrh	r3, [r7, #6]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e075      	b.n	8008a9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_UART_Transmit+0x3e>
 80089b8:	2302      	movs	r3, #2
 80089ba:	e06e      	b.n	8008a9a <HAL_UART_Transmit+0x11c>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2221      	movs	r2, #33	; 0x21
 80089ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089d2:	f7fb ff5b 	bl	800488c <HAL_GetTick>
 80089d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	88fa      	ldrh	r2, [r7, #6]
 80089dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	88fa      	ldrh	r2, [r7, #6]
 80089e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ec:	d108      	bne.n	8008a00 <HAL_UART_Transmit+0x82>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d104      	bne.n	8008a00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80089f6:	2300      	movs	r3, #0
 80089f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	61bb      	str	r3, [r7, #24]
 80089fe:	e003      	b.n	8008a08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008a10:	e02a      	b.n	8008a68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2180      	movs	r1, #128	; 0x80
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 f992 	bl	8008d46 <UART_WaitOnFlagUntilTimeout>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e036      	b.n	8008a9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10b      	bne.n	8008a4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	3302      	adds	r3, #2
 8008a46:	61bb      	str	r3, [r7, #24]
 8008a48:	e007      	b.n	8008a5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	781a      	ldrb	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	3301      	adds	r3, #1
 8008a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	3b01      	subs	r3, #1
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1cf      	bne.n	8008a12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2140      	movs	r1, #64	; 0x40
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 f962 	bl	8008d46 <UART_WaitOnFlagUntilTimeout>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e006      	b.n	8008a9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	e000      	b.n	8008a9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008a98:	2302      	movs	r3, #2
  }
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3720      	adds	r7, #32
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	4613      	mov	r3, r2
 8008aae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b20      	cmp	r3, #32
 8008aba:	d11d      	bne.n	8008af8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <HAL_UART_Receive_DMA+0x26>
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e016      	b.n	8008afa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_UART_Receive_DMA+0x38>
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e00f      	b.n	8008afa <HAL_UART_Receive_DMA+0x58>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ae8:	88fb      	ldrh	r3, [r7, #6]
 8008aea:	461a      	mov	r2, r3
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 f998 	bl	8008e24 <UART_Start_Receive_DMA>
 8008af4:	4603      	mov	r3, r0
 8008af6:	e000      	b.n	8008afa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008af8:	2302      	movs	r3, #2
  }
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b083      	sub	sp, #12
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b0a:	bf00      	nop
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b083      	sub	sp, #12
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008b1e:	bf00      	nop
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b32:	bf00      	nop
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b083      	sub	sp, #12
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	460b      	mov	r3, r1
 8008b48:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b09c      	sub	sp, #112	; 0x70
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b62:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d172      	bne.n	8008c58 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b74:	2200      	movs	r2, #0
 8008b76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b82:	e853 3f00 	ldrex	r3, [r3]
 8008b86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	330c      	adds	r3, #12
 8008b96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b98:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b9a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e5      	bne.n	8008b78 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3314      	adds	r3, #20
 8008bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bbe:	f023 0301 	bic.w	r3, r3, #1
 8008bc2:	667b      	str	r3, [r7, #100]	; 0x64
 8008bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3314      	adds	r3, #20
 8008bca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008bcc:	647a      	str	r2, [r7, #68]	; 0x44
 8008bce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e5      	bne.n	8008bac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3314      	adds	r3, #20
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	e853 3f00 	ldrex	r3, [r3]
 8008bee:	623b      	str	r3, [r7, #32]
   return(result);
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bf6:	663b      	str	r3, [r7, #96]	; 0x60
 8008bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3314      	adds	r3, #20
 8008bfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c00:	633a      	str	r2, [r7, #48]	; 0x30
 8008c02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c08:	e841 2300 	strex	r3, r2, [r1]
 8008c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e5      	bne.n	8008be0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c16:	2220      	movs	r2, #32
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d119      	bne.n	8008c58 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	330c      	adds	r3, #12
 8008c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	e853 3f00 	ldrex	r3, [r3]
 8008c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 0310 	bic.w	r3, r3, #16
 8008c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	330c      	adds	r3, #12
 8008c42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c44:	61fa      	str	r2, [r7, #28]
 8008c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c48:	69b9      	ldr	r1, [r7, #24]
 8008c4a:	69fa      	ldr	r2, [r7, #28]
 8008c4c:	e841 2300 	strex	r3, r2, [r1]
 8008c50:	617b      	str	r3, [r7, #20]
   return(result);
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1e5      	bne.n	8008c24 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d106      	bne.n	8008c6e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c64:	4619      	mov	r1, r3
 8008c66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008c68:	f7ff ff69 	bl	8008b3e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c6c:	e002      	b.n	8008c74 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008c6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008c70:	f7ff ff47 	bl	8008b02 <HAL_UART_RxCpltCallback>
}
 8008c74:	bf00      	nop
 8008c76:	3770      	adds	r7, #112	; 0x70
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c88:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d108      	bne.n	8008ca4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c96:	085b      	lsrs	r3, r3, #1
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f7ff ff4e 	bl	8008b3e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ca2:	e002      	b.n	8008caa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f7ff ff36 	bl	8008b16 <HAL_UART_RxHalfCpltCallback>
}
 8008caa:	bf00      	nop
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cce:	2b80      	cmp	r3, #128	; 0x80
 8008cd0:	bf0c      	ite	eq
 8008cd2:	2301      	moveq	r3, #1
 8008cd4:	2300      	movne	r3, #0
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b21      	cmp	r3, #33	; 0x21
 8008ce4:	d108      	bne.n	8008cf8 <UART_DMAError+0x46>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008cf2:	68b8      	ldr	r0, [r7, #8]
 8008cf4:	f000 f934 	bl	8008f60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d02:	2b40      	cmp	r3, #64	; 0x40
 8008d04:	bf0c      	ite	eq
 8008d06:	2301      	moveq	r3, #1
 8008d08:	2300      	movne	r3, #0
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b22      	cmp	r3, #34	; 0x22
 8008d18:	d108      	bne.n	8008d2c <UART_DMAError+0x7a>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d005      	beq.n	8008d2c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2200      	movs	r2, #0
 8008d24:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008d26:	68b8      	ldr	r0, [r7, #8]
 8008d28:	f000 f942 	bl	8008fb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d30:	f043 0210 	orr.w	r2, r3, #16
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d38:	68b8      	ldr	r0, [r7, #8]
 8008d3a:	f7ff fef6 	bl	8008b2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b090      	sub	sp, #64	; 0x40
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	603b      	str	r3, [r7, #0]
 8008d52:	4613      	mov	r3, r2
 8008d54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d56:	e050      	b.n	8008dfa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5e:	d04c      	beq.n	8008dfa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d66:	f7fb fd91 	bl	800488c <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d241      	bcs.n	8008dfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	330c      	adds	r3, #12
 8008d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	e853 3f00 	ldrex	r3, [r3]
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	330c      	adds	r3, #12
 8008d94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d96:	637a      	str	r2, [r7, #52]	; 0x34
 8008d98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d9e:	e841 2300 	strex	r3, r2, [r1]
 8008da2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1e5      	bne.n	8008d76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3314      	adds	r3, #20
 8008db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	e853 3f00 	ldrex	r3, [r3]
 8008db8:	613b      	str	r3, [r7, #16]
   return(result);
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f023 0301 	bic.w	r3, r3, #1
 8008dc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3314      	adds	r3, #20
 8008dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dca:	623a      	str	r2, [r7, #32]
 8008dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	69f9      	ldr	r1, [r7, #28]
 8008dd0:	6a3a      	ldr	r2, [r7, #32]
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e5      	bne.n	8008daa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2220      	movs	r2, #32
 8008dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e00f      	b.n	8008e1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	4013      	ands	r3, r2
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	bf0c      	ite	eq
 8008e0a:	2301      	moveq	r3, #1
 8008e0c:	2300      	movne	r3, #0
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	461a      	mov	r2, r3
 8008e12:	79fb      	ldrb	r3, [r7, #7]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d09f      	beq.n	8008d58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3740      	adds	r7, #64	; 0x40
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b098      	sub	sp, #96	; 0x60
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	88fa      	ldrh	r2, [r7, #6]
 8008e3c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2222      	movs	r2, #34	; 0x22
 8008e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e50:	4a40      	ldr	r2, [pc, #256]	; (8008f54 <UART_Start_Receive_DMA+0x130>)
 8008e52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e58:	4a3f      	ldr	r2, [pc, #252]	; (8008f58 <UART_Start_Receive_DMA+0x134>)
 8008e5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e60:	4a3e      	ldr	r2, [pc, #248]	; (8008f5c <UART_Start_Receive_DMA+0x138>)
 8008e62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e68:	2200      	movs	r2, #0
 8008e6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008e6c:	f107 0308 	add.w	r3, r7, #8
 8008e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	88fb      	ldrh	r3, [r7, #6]
 8008e84:	f7fb ff0e 	bl	8004ca4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008e88:	2300      	movs	r3, #0
 8008e8a:	613b      	str	r3, [r7, #16]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	613b      	str	r3, [r7, #16]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	613b      	str	r3, [r7, #16]
 8008e9c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d019      	beq.n	8008ee2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	330c      	adds	r3, #12
 8008eb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ec4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	330c      	adds	r3, #12
 8008ecc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ece:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008ed0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008ed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e5      	bne.n	8008eae <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3314      	adds	r3, #20
 8008ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef4:	f043 0301 	orr.w	r3, r3, #1
 8008ef8:	657b      	str	r3, [r7, #84]	; 0x54
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3314      	adds	r3, #20
 8008f00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f02:	63ba      	str	r2, [r7, #56]	; 0x38
 8008f04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1e5      	bne.n	8008ee2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3314      	adds	r3, #20
 8008f1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	617b      	str	r3, [r7, #20]
   return(result);
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f2c:	653b      	str	r3, [r7, #80]	; 0x50
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3314      	adds	r3, #20
 8008f34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f36:	627a      	str	r2, [r7, #36]	; 0x24
 8008f38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	6a39      	ldr	r1, [r7, #32]
 8008f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e5      	bne.n	8008f16 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3760      	adds	r7, #96	; 0x60
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	08008b57 	.word	0x08008b57
 8008f58:	08008c7d 	.word	0x08008c7d
 8008f5c:	08008cb3 	.word	0x08008cb3

08008f60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b089      	sub	sp, #36	; 0x24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	330c      	adds	r3, #12
 8008f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f7e:	61fb      	str	r3, [r7, #28]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	330c      	adds	r3, #12
 8008f86:	69fa      	ldr	r2, [r7, #28]
 8008f88:	61ba      	str	r2, [r7, #24]
 8008f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	6979      	ldr	r1, [r7, #20]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	613b      	str	r3, [r7, #16]
   return(result);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e5      	bne.n	8008f68 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008fa4:	bf00      	nop
 8008fa6:	3724      	adds	r7, #36	; 0x24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b095      	sub	sp, #84	; 0x54
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	330c      	adds	r3, #12
 8008fbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc2:	e853 3f00 	ldrex	r3, [r3]
 8008fc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	330c      	adds	r3, #12
 8008fd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fd8:	643a      	str	r2, [r7, #64]	; 0x40
 8008fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fe0:	e841 2300 	strex	r3, r2, [r1]
 8008fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e5      	bne.n	8008fb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3314      	adds	r3, #20
 8008ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	e853 3f00 	ldrex	r3, [r3]
 8008ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	f023 0301 	bic.w	r3, r3, #1
 8009002:	64bb      	str	r3, [r7, #72]	; 0x48
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3314      	adds	r3, #20
 800900a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800900c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800900e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009014:	e841 2300 	strex	r3, r2, [r1]
 8009018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e5      	bne.n	8008fec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009024:	2b01      	cmp	r3, #1
 8009026:	d119      	bne.n	800905c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	330c      	adds	r3, #12
 800902e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	60bb      	str	r3, [r7, #8]
   return(result);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	f023 0310 	bic.w	r3, r3, #16
 800903e:	647b      	str	r3, [r7, #68]	; 0x44
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	330c      	adds	r3, #12
 8009046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009048:	61ba      	str	r2, [r7, #24]
 800904a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	6979      	ldr	r1, [r7, #20]
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	e841 2300 	strex	r3, r2, [r1]
 8009054:	613b      	str	r3, [r7, #16]
   return(result);
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e5      	bne.n	8009028 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2220      	movs	r2, #32
 8009060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	631a      	str	r2, [r3, #48]	; 0x30
}
 800906a:	bf00      	nop
 800906c:	3754      	adds	r7, #84	; 0x54
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
	...

08009078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800907c:	b0c0      	sub	sp, #256	; 0x100
 800907e:	af00      	add	r7, sp, #0
 8009080:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009094:	68d9      	ldr	r1, [r3, #12]
 8009096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	ea40 0301 	orr.w	r3, r0, r1
 80090a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090a6:	689a      	ldr	r2, [r3, #8]
 80090a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	431a      	orrs	r2, r3
 80090b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	431a      	orrs	r2, r3
 80090b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	4313      	orrs	r3, r2
 80090c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80090c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80090d0:	f021 010c 	bic.w	r1, r1, #12
 80090d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090de:	430b      	orrs	r3, r1
 80090e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80090ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f2:	6999      	ldr	r1, [r3, #24]
 80090f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	ea40 0301 	orr.w	r3, r0, r1
 80090fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	4b8f      	ldr	r3, [pc, #572]	; (8009344 <UART_SetConfig+0x2cc>)
 8009108:	429a      	cmp	r2, r3
 800910a:	d005      	beq.n	8009118 <UART_SetConfig+0xa0>
 800910c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	4b8d      	ldr	r3, [pc, #564]	; (8009348 <UART_SetConfig+0x2d0>)
 8009114:	429a      	cmp	r2, r3
 8009116:	d104      	bne.n	8009122 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009118:	f7fd ffe8 	bl	80070ec <HAL_RCC_GetPCLK2Freq>
 800911c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009120:	e003      	b.n	800912a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009122:	f7fd ffcf 	bl	80070c4 <HAL_RCC_GetPCLK1Freq>
 8009126:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800912a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009134:	f040 810c 	bne.w	8009350 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800913c:	2200      	movs	r2, #0
 800913e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009142:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009146:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800914a:	4622      	mov	r2, r4
 800914c:	462b      	mov	r3, r5
 800914e:	1891      	adds	r1, r2, r2
 8009150:	65b9      	str	r1, [r7, #88]	; 0x58
 8009152:	415b      	adcs	r3, r3
 8009154:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009156:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800915a:	4621      	mov	r1, r4
 800915c:	eb12 0801 	adds.w	r8, r2, r1
 8009160:	4629      	mov	r1, r5
 8009162:	eb43 0901 	adc.w	r9, r3, r1
 8009166:	f04f 0200 	mov.w	r2, #0
 800916a:	f04f 0300 	mov.w	r3, #0
 800916e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800917a:	4690      	mov	r8, r2
 800917c:	4699      	mov	r9, r3
 800917e:	4623      	mov	r3, r4
 8009180:	eb18 0303 	adds.w	r3, r8, r3
 8009184:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009188:	462b      	mov	r3, r5
 800918a:	eb49 0303 	adc.w	r3, r9, r3
 800918e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800919e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80091a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80091a6:	460b      	mov	r3, r1
 80091a8:	18db      	adds	r3, r3, r3
 80091aa:	653b      	str	r3, [r7, #80]	; 0x50
 80091ac:	4613      	mov	r3, r2
 80091ae:	eb42 0303 	adc.w	r3, r2, r3
 80091b2:	657b      	str	r3, [r7, #84]	; 0x54
 80091b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80091b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80091bc:	f7f7 fbce 	bl	800095c <__aeabi_uldivmod>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4b61      	ldr	r3, [pc, #388]	; (800934c <UART_SetConfig+0x2d4>)
 80091c6:	fba3 2302 	umull	r2, r3, r3, r2
 80091ca:	095b      	lsrs	r3, r3, #5
 80091cc:	011c      	lsls	r4, r3, #4
 80091ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80091dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80091e0:	4642      	mov	r2, r8
 80091e2:	464b      	mov	r3, r9
 80091e4:	1891      	adds	r1, r2, r2
 80091e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80091e8:	415b      	adcs	r3, r3
 80091ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80091f0:	4641      	mov	r1, r8
 80091f2:	eb12 0a01 	adds.w	sl, r2, r1
 80091f6:	4649      	mov	r1, r9
 80091f8:	eb43 0b01 	adc.w	fp, r3, r1
 80091fc:	f04f 0200 	mov.w	r2, #0
 8009200:	f04f 0300 	mov.w	r3, #0
 8009204:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009208:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800920c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009210:	4692      	mov	sl, r2
 8009212:	469b      	mov	fp, r3
 8009214:	4643      	mov	r3, r8
 8009216:	eb1a 0303 	adds.w	r3, sl, r3
 800921a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800921e:	464b      	mov	r3, r9
 8009220:	eb4b 0303 	adc.w	r3, fp, r3
 8009224:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009234:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009238:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800923c:	460b      	mov	r3, r1
 800923e:	18db      	adds	r3, r3, r3
 8009240:	643b      	str	r3, [r7, #64]	; 0x40
 8009242:	4613      	mov	r3, r2
 8009244:	eb42 0303 	adc.w	r3, r2, r3
 8009248:	647b      	str	r3, [r7, #68]	; 0x44
 800924a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800924e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009252:	f7f7 fb83 	bl	800095c <__aeabi_uldivmod>
 8009256:	4602      	mov	r2, r0
 8009258:	460b      	mov	r3, r1
 800925a:	4611      	mov	r1, r2
 800925c:	4b3b      	ldr	r3, [pc, #236]	; (800934c <UART_SetConfig+0x2d4>)
 800925e:	fba3 2301 	umull	r2, r3, r3, r1
 8009262:	095b      	lsrs	r3, r3, #5
 8009264:	2264      	movs	r2, #100	; 0x64
 8009266:	fb02 f303 	mul.w	r3, r2, r3
 800926a:	1acb      	subs	r3, r1, r3
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009272:	4b36      	ldr	r3, [pc, #216]	; (800934c <UART_SetConfig+0x2d4>)
 8009274:	fba3 2302 	umull	r2, r3, r3, r2
 8009278:	095b      	lsrs	r3, r3, #5
 800927a:	005b      	lsls	r3, r3, #1
 800927c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009280:	441c      	add	r4, r3
 8009282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009286:	2200      	movs	r2, #0
 8009288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800928c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009290:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009294:	4642      	mov	r2, r8
 8009296:	464b      	mov	r3, r9
 8009298:	1891      	adds	r1, r2, r2
 800929a:	63b9      	str	r1, [r7, #56]	; 0x38
 800929c:	415b      	adcs	r3, r3
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092a4:	4641      	mov	r1, r8
 80092a6:	1851      	adds	r1, r2, r1
 80092a8:	6339      	str	r1, [r7, #48]	; 0x30
 80092aa:	4649      	mov	r1, r9
 80092ac:	414b      	adcs	r3, r1
 80092ae:	637b      	str	r3, [r7, #52]	; 0x34
 80092b0:	f04f 0200 	mov.w	r2, #0
 80092b4:	f04f 0300 	mov.w	r3, #0
 80092b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80092bc:	4659      	mov	r1, fp
 80092be:	00cb      	lsls	r3, r1, #3
 80092c0:	4651      	mov	r1, sl
 80092c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092c6:	4651      	mov	r1, sl
 80092c8:	00ca      	lsls	r2, r1, #3
 80092ca:	4610      	mov	r0, r2
 80092cc:	4619      	mov	r1, r3
 80092ce:	4603      	mov	r3, r0
 80092d0:	4642      	mov	r2, r8
 80092d2:	189b      	adds	r3, r3, r2
 80092d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092d8:	464b      	mov	r3, r9
 80092da:	460a      	mov	r2, r1
 80092dc:	eb42 0303 	adc.w	r3, r2, r3
 80092e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80092f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80092f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80092f8:	460b      	mov	r3, r1
 80092fa:	18db      	adds	r3, r3, r3
 80092fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80092fe:	4613      	mov	r3, r2
 8009300:	eb42 0303 	adc.w	r3, r2, r3
 8009304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800930a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800930e:	f7f7 fb25 	bl	800095c <__aeabi_uldivmod>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	4b0d      	ldr	r3, [pc, #52]	; (800934c <UART_SetConfig+0x2d4>)
 8009318:	fba3 1302 	umull	r1, r3, r3, r2
 800931c:	095b      	lsrs	r3, r3, #5
 800931e:	2164      	movs	r1, #100	; 0x64
 8009320:	fb01 f303 	mul.w	r3, r1, r3
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	3332      	adds	r3, #50	; 0x32
 800932a:	4a08      	ldr	r2, [pc, #32]	; (800934c <UART_SetConfig+0x2d4>)
 800932c:	fba2 2303 	umull	r2, r3, r2, r3
 8009330:	095b      	lsrs	r3, r3, #5
 8009332:	f003 0207 	and.w	r2, r3, #7
 8009336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4422      	add	r2, r4
 800933e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009340:	e106      	b.n	8009550 <UART_SetConfig+0x4d8>
 8009342:	bf00      	nop
 8009344:	40011000 	.word	0x40011000
 8009348:	40011400 	.word	0x40011400
 800934c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009354:	2200      	movs	r2, #0
 8009356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800935a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800935e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009362:	4642      	mov	r2, r8
 8009364:	464b      	mov	r3, r9
 8009366:	1891      	adds	r1, r2, r2
 8009368:	6239      	str	r1, [r7, #32]
 800936a:	415b      	adcs	r3, r3
 800936c:	627b      	str	r3, [r7, #36]	; 0x24
 800936e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009372:	4641      	mov	r1, r8
 8009374:	1854      	adds	r4, r2, r1
 8009376:	4649      	mov	r1, r9
 8009378:	eb43 0501 	adc.w	r5, r3, r1
 800937c:	f04f 0200 	mov.w	r2, #0
 8009380:	f04f 0300 	mov.w	r3, #0
 8009384:	00eb      	lsls	r3, r5, #3
 8009386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800938a:	00e2      	lsls	r2, r4, #3
 800938c:	4614      	mov	r4, r2
 800938e:	461d      	mov	r5, r3
 8009390:	4643      	mov	r3, r8
 8009392:	18e3      	adds	r3, r4, r3
 8009394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009398:	464b      	mov	r3, r9
 800939a:	eb45 0303 	adc.w	r3, r5, r3
 800939e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80093a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80093ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80093be:	4629      	mov	r1, r5
 80093c0:	008b      	lsls	r3, r1, #2
 80093c2:	4621      	mov	r1, r4
 80093c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093c8:	4621      	mov	r1, r4
 80093ca:	008a      	lsls	r2, r1, #2
 80093cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80093d0:	f7f7 fac4 	bl	800095c <__aeabi_uldivmod>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4b60      	ldr	r3, [pc, #384]	; (800955c <UART_SetConfig+0x4e4>)
 80093da:	fba3 2302 	umull	r2, r3, r3, r2
 80093de:	095b      	lsrs	r3, r3, #5
 80093e0:	011c      	lsls	r4, r3, #4
 80093e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80093ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80093f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80093f4:	4642      	mov	r2, r8
 80093f6:	464b      	mov	r3, r9
 80093f8:	1891      	adds	r1, r2, r2
 80093fa:	61b9      	str	r1, [r7, #24]
 80093fc:	415b      	adcs	r3, r3
 80093fe:	61fb      	str	r3, [r7, #28]
 8009400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009404:	4641      	mov	r1, r8
 8009406:	1851      	adds	r1, r2, r1
 8009408:	6139      	str	r1, [r7, #16]
 800940a:	4649      	mov	r1, r9
 800940c:	414b      	adcs	r3, r1
 800940e:	617b      	str	r3, [r7, #20]
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	f04f 0300 	mov.w	r3, #0
 8009418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800941c:	4659      	mov	r1, fp
 800941e:	00cb      	lsls	r3, r1, #3
 8009420:	4651      	mov	r1, sl
 8009422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009426:	4651      	mov	r1, sl
 8009428:	00ca      	lsls	r2, r1, #3
 800942a:	4610      	mov	r0, r2
 800942c:	4619      	mov	r1, r3
 800942e:	4603      	mov	r3, r0
 8009430:	4642      	mov	r2, r8
 8009432:	189b      	adds	r3, r3, r2
 8009434:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009438:	464b      	mov	r3, r9
 800943a:	460a      	mov	r2, r1
 800943c:	eb42 0303 	adc.w	r3, r2, r3
 8009440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	67bb      	str	r3, [r7, #120]	; 0x78
 800944e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	f04f 0300 	mov.w	r3, #0
 8009458:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800945c:	4649      	mov	r1, r9
 800945e:	008b      	lsls	r3, r1, #2
 8009460:	4641      	mov	r1, r8
 8009462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009466:	4641      	mov	r1, r8
 8009468:	008a      	lsls	r2, r1, #2
 800946a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800946e:	f7f7 fa75 	bl	800095c <__aeabi_uldivmod>
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	4611      	mov	r1, r2
 8009478:	4b38      	ldr	r3, [pc, #224]	; (800955c <UART_SetConfig+0x4e4>)
 800947a:	fba3 2301 	umull	r2, r3, r3, r1
 800947e:	095b      	lsrs	r3, r3, #5
 8009480:	2264      	movs	r2, #100	; 0x64
 8009482:	fb02 f303 	mul.w	r3, r2, r3
 8009486:	1acb      	subs	r3, r1, r3
 8009488:	011b      	lsls	r3, r3, #4
 800948a:	3332      	adds	r3, #50	; 0x32
 800948c:	4a33      	ldr	r2, [pc, #204]	; (800955c <UART_SetConfig+0x4e4>)
 800948e:	fba2 2303 	umull	r2, r3, r2, r3
 8009492:	095b      	lsrs	r3, r3, #5
 8009494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009498:	441c      	add	r4, r3
 800949a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800949e:	2200      	movs	r2, #0
 80094a0:	673b      	str	r3, [r7, #112]	; 0x70
 80094a2:	677a      	str	r2, [r7, #116]	; 0x74
 80094a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80094a8:	4642      	mov	r2, r8
 80094aa:	464b      	mov	r3, r9
 80094ac:	1891      	adds	r1, r2, r2
 80094ae:	60b9      	str	r1, [r7, #8]
 80094b0:	415b      	adcs	r3, r3
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094b8:	4641      	mov	r1, r8
 80094ba:	1851      	adds	r1, r2, r1
 80094bc:	6039      	str	r1, [r7, #0]
 80094be:	4649      	mov	r1, r9
 80094c0:	414b      	adcs	r3, r1
 80094c2:	607b      	str	r3, [r7, #4]
 80094c4:	f04f 0200 	mov.w	r2, #0
 80094c8:	f04f 0300 	mov.w	r3, #0
 80094cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80094d0:	4659      	mov	r1, fp
 80094d2:	00cb      	lsls	r3, r1, #3
 80094d4:	4651      	mov	r1, sl
 80094d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094da:	4651      	mov	r1, sl
 80094dc:	00ca      	lsls	r2, r1, #3
 80094de:	4610      	mov	r0, r2
 80094e0:	4619      	mov	r1, r3
 80094e2:	4603      	mov	r3, r0
 80094e4:	4642      	mov	r2, r8
 80094e6:	189b      	adds	r3, r3, r2
 80094e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80094ea:	464b      	mov	r3, r9
 80094ec:	460a      	mov	r2, r1
 80094ee:	eb42 0303 	adc.w	r3, r2, r3
 80094f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	663b      	str	r3, [r7, #96]	; 0x60
 80094fe:	667a      	str	r2, [r7, #100]	; 0x64
 8009500:	f04f 0200 	mov.w	r2, #0
 8009504:	f04f 0300 	mov.w	r3, #0
 8009508:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800950c:	4649      	mov	r1, r9
 800950e:	008b      	lsls	r3, r1, #2
 8009510:	4641      	mov	r1, r8
 8009512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009516:	4641      	mov	r1, r8
 8009518:	008a      	lsls	r2, r1, #2
 800951a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800951e:	f7f7 fa1d 	bl	800095c <__aeabi_uldivmod>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	4b0d      	ldr	r3, [pc, #52]	; (800955c <UART_SetConfig+0x4e4>)
 8009528:	fba3 1302 	umull	r1, r3, r3, r2
 800952c:	095b      	lsrs	r3, r3, #5
 800952e:	2164      	movs	r1, #100	; 0x64
 8009530:	fb01 f303 	mul.w	r3, r1, r3
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	011b      	lsls	r3, r3, #4
 8009538:	3332      	adds	r3, #50	; 0x32
 800953a:	4a08      	ldr	r2, [pc, #32]	; (800955c <UART_SetConfig+0x4e4>)
 800953c:	fba2 2303 	umull	r2, r3, r2, r3
 8009540:	095b      	lsrs	r3, r3, #5
 8009542:	f003 020f 	and.w	r2, r3, #15
 8009546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4422      	add	r2, r4
 800954e:	609a      	str	r2, [r3, #8]
}
 8009550:	bf00      	nop
 8009552:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009556:	46bd      	mov	sp, r7
 8009558:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800955c:	51eb851f 	.word	0x51eb851f

08009560 <InfraredPD_Initialize>:
 8009560:	2802      	cmp	r0, #2
 8009562:	d825      	bhi.n	80095b0 <InfraredPD_Initialize+0x50>
 8009564:	2800      	cmp	r0, #0
 8009566:	d130      	bne.n	80095ca <InfraredPD_Initialize+0x6a>
 8009568:	4a3e      	ldr	r2, [pc, #248]	; (8009664 <InfraredPD_Initialize+0x104>)
 800956a:	6813      	ldr	r3, [r2, #0]
 800956c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8009570:	f023 0301 	bic.w	r3, r3, #1
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 800957a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800957e:	f24c 2240 	movw	r2, #49728	; 0xc240
 8009582:	400b      	ands	r3, r1
 8009584:	4293      	cmp	r3, r2
 8009586:	d02e      	beq.n	80095e6 <InfraredPD_Initialize+0x86>
 8009588:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 800958c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8009590:	400b      	ands	r3, r1
 8009592:	4293      	cmp	r3, r2
 8009594:	d027      	beq.n	80095e6 <InfraredPD_Initialize+0x86>
 8009596:	4a34      	ldr	r2, [pc, #208]	; (8009668 <InfraredPD_Initialize+0x108>)
 8009598:	2301      	movs	r3, #1
 800959a:	6093      	str	r3, [r2, #8]
 800959c:	6893      	ldr	r3, [r2, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1fc      	bne.n	800959c <InfraredPD_Initialize+0x3c>
 80095a2:	4b32      	ldr	r3, [pc, #200]	; (800966c <InfraredPD_Initialize+0x10c>)
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	6812      	ldr	r2, [r2, #0]
 80095a8:	4b31      	ldr	r3, [pc, #196]	; (8009670 <InfraredPD_Initialize+0x110>)
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d016      	beq.n	80095dc <InfraredPD_Initialize+0x7c>
 80095ae:	e7fe      	b.n	80095ae <InfraredPD_Initialize+0x4e>
 80095b0:	2803      	cmp	r0, #3
 80095b2:	d1d9      	bne.n	8009568 <InfraredPD_Initialize+0x8>
 80095b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095b8:	4a2e      	ldr	r2, [pc, #184]	; (8009674 <InfraredPD_Initialize+0x114>)
 80095ba:	6859      	ldr	r1, [r3, #4]
 80095bc:	4291      	cmp	r1, r2
 80095be:	d00d      	beq.n	80095dc <InfraredPD_Initialize+0x7c>
 80095c0:	685a      	ldr	r2, [r3, #4]
 80095c2:	4b2d      	ldr	r3, [pc, #180]	; (8009678 <InfraredPD_Initialize+0x118>)
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d009      	beq.n	80095dc <InfraredPD_Initialize+0x7c>
 80095c8:	e7fe      	b.n	80095c8 <InfraredPD_Initialize+0x68>
 80095ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095ce:	4a2b      	ldr	r2, [pc, #172]	; (800967c <InfraredPD_Initialize+0x11c>)
 80095d0:	f8d3 37f8 	ldr.w	r3, [r3, #2040]	; 0x7f8
 80095d4:	0c1b      	lsrs	r3, r3, #16
 80095d6:	041b      	lsls	r3, r3, #16
 80095d8:	4293      	cmp	r3, r2
 80095da:	d103      	bne.n	80095e4 <InfraredPD_Initialize+0x84>
 80095dc:	4b28      	ldr	r3, [pc, #160]	; (8009680 <InfraredPD_Initialize+0x120>)
 80095de:	2201      	movs	r2, #1
 80095e0:	701a      	strb	r2, [r3, #0]
 80095e2:	4770      	bx	lr
 80095e4:	e7fe      	b.n	80095e4 <InfraredPD_Initialize+0x84>
 80095e6:	4b27      	ldr	r3, [pc, #156]	; (8009684 <InfraredPD_Initialize+0x124>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1d3      	bne.n	8009596 <InfraredPD_Initialize+0x36>
 80095ee:	4a26      	ldr	r2, [pc, #152]	; (8009688 <InfraredPD_Initialize+0x128>)
 80095f0:	6813      	ldr	r3, [r2, #0]
 80095f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095f6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80095fa:	d021      	beq.n	8009640 <InfraredPD_Initialize+0xe0>
 80095fc:	6813      	ldr	r3, [r2, #0]
 80095fe:	f240 4183 	movw	r1, #1155	; 0x483
 8009602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009606:	428b      	cmp	r3, r1
 8009608:	d01a      	beq.n	8009640 <InfraredPD_Initialize+0xe0>
 800960a:	6813      	ldr	r3, [r2, #0]
 800960c:	f240 4285 	movw	r2, #1157	; 0x485
 8009610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009614:	4293      	cmp	r3, r2
 8009616:	d013      	beq.n	8009640 <InfraredPD_Initialize+0xe0>
 8009618:	4b1c      	ldr	r3, [pc, #112]	; (800968c <InfraredPD_Initialize+0x12c>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009620:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009624:	d1b7      	bne.n	8009596 <InfraredPD_Initialize+0x36>
 8009626:	4a1a      	ldr	r2, [pc, #104]	; (8009690 <InfraredPD_Initialize+0x130>)
 8009628:	2301      	movs	r3, #1
 800962a:	6093      	str	r3, [r2, #8]
 800962c:	6893      	ldr	r3, [r2, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1fc      	bne.n	800962c <InfraredPD_Initialize+0xcc>
 8009632:	4b0e      	ldr	r3, [pc, #56]	; (800966c <InfraredPD_Initialize+0x10c>)
 8009634:	6013      	str	r3, [r2, #0]
 8009636:	6812      	ldr	r2, [r2, #0]
 8009638:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <InfraredPD_Initialize+0x110>)
 800963a:	429a      	cmp	r2, r3
 800963c:	d0ce      	beq.n	80095dc <InfraredPD_Initialize+0x7c>
 800963e:	e7b6      	b.n	80095ae <InfraredPD_Initialize+0x4e>
 8009640:	4a14      	ldr	r2, [pc, #80]	; (8009694 <InfraredPD_Initialize+0x134>)
 8009642:	2301      	movs	r3, #1
 8009644:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009648:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1fb      	bne.n	8009648 <InfraredPD_Initialize+0xe8>
 8009650:	4b06      	ldr	r3, [pc, #24]	; (800966c <InfraredPD_Initialize+0x10c>)
 8009652:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009656:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800965a:	4b05      	ldr	r3, [pc, #20]	; (8009670 <InfraredPD_Initialize+0x110>)
 800965c:	429a      	cmp	r2, r3
 800965e:	d0bd      	beq.n	80095dc <InfraredPD_Initialize+0x7c>
 8009660:	e7a5      	b.n	80095ae <InfraredPD_Initialize+0x4e>
 8009662:	bf00      	nop
 8009664:	e0002000 	.word	0xe0002000
 8009668:	40023000 	.word	0x40023000
 800966c:	f407a5c2 	.word	0xf407a5c2
 8009670:	b5e8b5cd 	.word	0xb5e8b5cd
 8009674:	0201e041 	.word	0x0201e041
 8009678:	02028041 	.word	0x02028041
 800967c:	aa550000 	.word	0xaa550000
 8009680:	200000f4 	.word	0x200000f4
 8009684:	e0042000 	.word	0xe0042000
 8009688:	5c001000 	.word	0x5c001000
 800968c:	50081000 	.word	0x50081000
 8009690:	4c004000 	.word	0x4c004000
 8009694:	58024000 	.word	0x58024000

08009698 <InfraredPD_CreateInstance>:
 8009698:	4b0a      	ldr	r3, [pc, #40]	; (80096c4 <InfraredPD_CreateInstance+0x2c>)
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	b183      	cbz	r3, 80096c0 <InfraredPD_CreateInstance+0x28>
 800969e:	b510      	push	{r4, lr}
 80096a0:	4604      	mov	r4, r0
 80096a2:	20c0      	movs	r0, #192	; 0xc0
 80096a4:	f000 fd76 	bl	800a194 <malloc>
 80096a8:	4603      	mov	r3, r0
 80096aa:	b138      	cbz	r0, 80096bc <InfraredPD_CreateInstance+0x24>
 80096ac:	4a06      	ldr	r2, [pc, #24]	; (80096c8 <InfraredPD_CreateInstance+0x30>)
 80096ae:	ca03      	ldmia	r2!, {r0, r1}
 80096b0:	f04f 0c00 	mov.w	ip, #0
 80096b4:	f883 c0a8 	strb.w	ip, [r3, #168]	; 0xa8
 80096b8:	6020      	str	r0, [r4, #0]
 80096ba:	6061      	str	r1, [r4, #4]
 80096bc:	4618      	mov	r0, r3
 80096be:	bd10      	pop	{r4, pc}
 80096c0:	4618      	mov	r0, r3
 80096c2:	4770      	bx	lr
 80096c4:	200000f4 	.word	0x200000f4
 80096c8:	0800ae50 	.word	0x0800ae50

080096cc <InfraredPD_Start>:
 80096cc:	4bbc      	ldr	r3, [pc, #752]	; (80099c0 <InfraredPD_Start+0x2f4>)
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	b90b      	cbnz	r3, 80096d6 <InfraredPD_Start+0xa>
 80096d2:	4618      	mov	r0, r3
 80096d4:	4770      	bx	lr
 80096d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096da:	ed2d 8b04 	vpush	{d8-d9}
 80096de:	4616      	mov	r6, r2
 80096e0:	780a      	ldrb	r2, [r1, #0]
 80096e2:	1e53      	subs	r3, r2, #1
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	4604      	mov	r4, r0
 80096e8:	460d      	mov	r5, r1
 80096ea:	d917      	bls.n	800971c <InfraredPD_Start+0x50>
 80096ec:	2a0f      	cmp	r2, #15
 80096ee:	d846      	bhi.n	800977e <InfraredPD_Start+0xb2>
 80096f0:	f248 1310 	movw	r3, #33040	; 0x8110
 80096f4:	40d3      	lsrs	r3, r2
 80096f6:	07db      	lsls	r3, r3, #31
 80096f8:	f140 81aa 	bpl.w	8009a50 <InfraredPD_Start+0x384>
 80096fc:	884b      	ldrh	r3, [r1, #2]
 80096fe:	2b80      	cmp	r3, #128	; 0x80
 8009700:	f000 81ae 	beq.w	8009a60 <InfraredPD_Start+0x394>
 8009704:	d90f      	bls.n	8009726 <InfraredPD_Start+0x5a>
 8009706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800970a:	f000 81ae 	beq.w	8009a6a <InfraredPD_Start+0x39e>
 800970e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009712:	f040 817b 	bne.w	8009a0c <InfraredPD_Start+0x340>
 8009716:	4bab      	ldr	r3, [pc, #684]	; (80099c4 <InfraredPD_Start+0x2f8>)
 8009718:	60a3      	str	r3, [r4, #8]
 800971a:	e020      	b.n	800975e <InfraredPD_Start+0x92>
 800971c:	884b      	ldrh	r3, [r1, #2]
 800971e:	2b80      	cmp	r3, #128	; 0x80
 8009720:	f000 8187 	beq.w	8009a32 <InfraredPD_Start+0x366>
 8009724:	d810      	bhi.n	8009748 <InfraredPD_Start+0x7c>
 8009726:	2b08      	cmp	r3, #8
 8009728:	f000 817d 	beq.w	8009a26 <InfraredPD_Start+0x35a>
 800972c:	2b20      	cmp	r3, #32
 800972e:	d120      	bne.n	8009772 <InfraredPD_Start+0xa6>
 8009730:	4ba5      	ldr	r3, [pc, #660]	; (80099c8 <InfraredPD_Start+0x2fc>)
 8009732:	60a3      	str	r3, [r4, #8]
 8009734:	792b      	ldrb	r3, [r5, #4]
 8009736:	3b01      	subs	r3, #1
 8009738:	2b07      	cmp	r3, #7
 800973a:	d838      	bhi.n	80097ae <InfraredPD_Start+0xe2>
 800973c:	e8df f003 	tbb	[pc, r3]
 8009740:	ac37b13d 	.word	0xac37b13d
 8009744:	a7373737 	.word	0xa7373737
 8009748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800974c:	f000 816e 	beq.w	8009a2c <InfraredPD_Start+0x360>
 8009750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009754:	d106      	bne.n	8009764 <InfraredPD_Start+0x98>
 8009756:	4b9b      	ldr	r3, [pc, #620]	; (80099c4 <InfraredPD_Start+0x2f8>)
 8009758:	6083      	str	r3, [r0, #8]
 800975a:	2a02      	cmp	r2, #2
 800975c:	d1ea      	bne.n	8009734 <InfraredPD_Start+0x68>
 800975e:	2301      	movs	r3, #1
 8009760:	702b      	strb	r3, [r5, #0]
 8009762:	e7e7      	b.n	8009734 <InfraredPD_Start+0x68>
 8009764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009768:	f040 814a 	bne.w	8009a00 <InfraredPD_Start+0x334>
 800976c:	4b97      	ldr	r3, [pc, #604]	; (80099cc <InfraredPD_Start+0x300>)
 800976e:	6083      	str	r3, [r0, #8]
 8009770:	e7e0      	b.n	8009734 <InfraredPD_Start+0x68>
 8009772:	2b02      	cmp	r3, #2
 8009774:	f040 8144 	bne.w	8009a00 <InfraredPD_Start+0x334>
 8009778:	4b95      	ldr	r3, [pc, #596]	; (80099d0 <InfraredPD_Start+0x304>)
 800977a:	60a3      	str	r3, [r4, #8]
 800977c:	e7da      	b.n	8009734 <InfraredPD_Start+0x68>
 800977e:	2a1e      	cmp	r2, #30
 8009780:	f040 8166 	bne.w	8009a50 <InfraredPD_Start+0x384>
 8009784:	884b      	ldrh	r3, [r1, #2]
 8009786:	2b80      	cmp	r3, #128	; 0x80
 8009788:	f000 815d 	beq.w	8009a46 <InfraredPD_Start+0x37a>
 800978c:	d9cb      	bls.n	8009726 <InfraredPD_Start+0x5a>
 800978e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009792:	f000 8172 	beq.w	8009a7a <InfraredPD_Start+0x3ae>
 8009796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800979a:	d0bc      	beq.n	8009716 <InfraredPD_Start+0x4a>
 800979c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097a0:	f040 812e 	bne.w	8009a00 <InfraredPD_Start+0x334>
 80097a4:	4b89      	ldr	r3, [pc, #548]	; (80099cc <InfraredPD_Start+0x300>)
 80097a6:	6083      	str	r3, [r0, #8]
 80097a8:	2304      	movs	r3, #4
 80097aa:	702b      	strb	r3, [r5, #0]
 80097ac:	e7c2      	b.n	8009734 <InfraredPD_Start+0x68>
 80097ae:	2303      	movs	r3, #3
 80097b0:	ecbd 8b04 	vpop	{d8-d9}
 80097b4:	4618      	mov	r0, r3
 80097b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ba:	4b86      	ldr	r3, [pc, #536]	; (80099d4 <InfraredPD_Start+0x308>)
 80097bc:	eddf 7a86 	vldr	s15, [pc, #536]	; 80099d8 <InfraredPD_Start+0x30c>
 80097c0:	60e3      	str	r3, [r4, #12]
 80097c2:	796b      	ldrb	r3, [r5, #5]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d002      	beq.n	80097ce <InfraredPD_Start+0x102>
 80097c8:	2b08      	cmp	r3, #8
 80097ca:	f040 812a 	bne.w	8009a22 <InfraredPD_Start+0x356>
 80097ce:	ed95 7a02 	vldr	s14, [r5, #8]
 80097d2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80097d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097da:	f100 8120 	bmi.w	8009a1e <InfraredPD_Start+0x352>
 80097de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097e2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80097e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ea:	f300 8118 	bgt.w	8009a1e <InfraredPD_Start+0x352>
 80097ee:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80097f2:	eddf 6a7a 	vldr	s13, [pc, #488]	; 80099dc <InfraredPD_Start+0x310>
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bfbc      	itt	lt
 80097fa:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 80097fe:	8073      	strhlt	r3, [r6, #2]
 8009800:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	bfbc      	itt	lt
 8009808:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 800980c:	80b3      	strhlt	r3, [r6, #4]
 800980e:	88eb      	ldrh	r3, [r5, #6]
 8009810:	ee08 3a10 	vmov	s16, r3
 8009814:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009818:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800981c:	edd4 6a02 	vldr	s13, [r4, #8]
 8009820:	ee28 8a07 	vmul.f32	s16, s16, s14
 8009824:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009828:	ed84 8a05 	vstr	s16, [r4, #20]
 800982c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009830:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8009834:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8009838:	ee87 0a26 	vdiv.f32	s0, s14, s13
 800983c:	ed84 7a04 	vstr	s14, [r4, #16]
 8009840:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009844:	ed84 0a06 	vstr	s0, [r4, #24]
 8009848:	f001 f9b0 	bl	800abac <ceilf>
 800984c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8009850:	2301      	movs	r3, #1
 8009852:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8009856:	ee10 3a10 	vmov	r3, s0
 800985a:	b298      	uxth	r0, r3
 800985c:	2300      	movs	r3, #0
 800985e:	83a0      	strh	r0, [r4, #28]
 8009860:	6223      	str	r3, [r4, #32]
 8009862:	7833      	ldrb	r3, [r6, #0]
 8009864:	b313      	cbz	r3, 80098ac <InfraredPD_Start+0x1e0>
 8009866:	2b02      	cmp	r3, #2
 8009868:	f000 80e6 	beq.w	8009a38 <InfraredPD_Start+0x36c>
 800986c:	7873      	ldrb	r3, [r6, #1]
 800986e:	b1eb      	cbz	r3, 80098ac <InfraredPD_Start+0x1e0>
 8009870:	2300      	movs	r3, #0
 8009872:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009876:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800987a:	2b01      	cmp	r3, #1
 800987c:	f000 8100 	beq.w	8009a80 <InfraredPD_Start+0x3b4>
 8009880:	0080      	lsls	r0, r0, #2
 8009882:	f000 fc87 	bl	800a194 <malloc>
 8009886:	6460      	str	r0, [r4, #68]	; 0x44
 8009888:	b980      	cbnz	r0, 80098ac <InfraredPD_Start+0x1e0>
 800988a:	2306      	movs	r3, #6
 800988c:	e790      	b.n	80097b0 <InfraredPD_Start+0xe4>
 800988e:	4b54      	ldr	r3, [pc, #336]	; (80099e0 <InfraredPD_Start+0x314>)
 8009890:	eddf 7a54 	vldr	s15, [pc, #336]	; 80099e4 <InfraredPD_Start+0x318>
 8009894:	60e3      	str	r3, [r4, #12]
 8009896:	e794      	b.n	80097c2 <InfraredPD_Start+0xf6>
 8009898:	4b53      	ldr	r3, [pc, #332]	; (80099e8 <InfraredPD_Start+0x31c>)
 800989a:	eddf 7a54 	vldr	s15, [pc, #336]	; 80099ec <InfraredPD_Start+0x320>
 800989e:	60e3      	str	r3, [r4, #12]
 80098a0:	e78f      	b.n	80097c2 <InfraredPD_Start+0xf6>
 80098a2:	4b53      	ldr	r3, [pc, #332]	; (80099f0 <InfraredPD_Start+0x324>)
 80098a4:	eddf 7a53 	vldr	s15, [pc, #332]	; 80099f4 <InfraredPD_Start+0x328>
 80098a8:	60e3      	str	r3, [r4, #12]
 80098aa:	e78a      	b.n	80097c2 <InfraredPD_Start+0xf6>
 80098ac:	2300      	movs	r3, #0
 80098ae:	7828      	ldrb	r0, [r5, #0]
 80098b0:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 80098b4:	2301      	movs	r3, #1
 80098b6:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80098ba:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80098be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80098c2:	0040      	lsls	r0, r0, #1
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
 80098ca:	f000 80c3 	beq.w	8009a54 <InfraredPD_Start+0x388>
 80098ce:	0080      	lsls	r0, r0, #2
 80098d0:	f000 fc60 	bl	800a194 <malloc>
 80098d4:	6520      	str	r0, [r4, #80]	; 0x50
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f000 80d7 	beq.w	8009a8a <InfraredPD_Start+0x3be>
 80098dc:	f04f 0800 	mov.w	r8, #0
 80098e0:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 80098e4:	2300      	movs	r3, #0
 80098e6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80098e8:	88b3      	ldrh	r3, [r6, #4]
 80098ea:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80099f8 <InfraredPD_Start+0x32c>
 80098ee:	ee07 3a90 	vmov	s15, r3
 80098f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098f6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80098fa:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80098fe:	ee67 6aa8 	vmul.f32	s13, s15, s17
 8009902:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009906:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
 800990a:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
 800990e:	ed84 7a1b 	vstr	s14, [r4, #108]	; 0x6c
 8009912:	782f      	ldrb	r7, [r5, #0]
 8009914:	ee07 7a90 	vmov	s15, r7
 8009918:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800991c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8009920:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8009924:	ee27 0ac0 	vnmul.f32	s0, s15, s0
 8009928:	eeb1 9a67 	vneg.f32	s18, s15
 800992c:	f001 f8fa 	bl	800ab24 <expf>
 8009930:	eddf 7a32 	vldr	s15, [pc, #200]	; 80099fc <InfraredPD_Start+0x330>
 8009934:	ee38 0a40 	vsub.f32	s0, s16, s0
 8009938:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 800993c:	ee29 0a27 	vmul.f32	s0, s18, s15
 8009940:	f001 f8f0 	bl	800ab24 <expf>
 8009944:	8873      	ldrh	r3, [r6, #2]
 8009946:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
 800994a:	ee07 3a90 	vmov	s15, r3
 800994e:	2201      	movs	r2, #1
 8009950:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
 8009954:	ebc7 1107 	rsb	r1, r7, r7, lsl #4
 8009958:	b2ba      	uxth	r2, r7
 800995a:	e9c4 8828 	strd	r8, r8, [r4, #160]	; 0xa0
 800995e:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
 8009962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009966:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800996a:	0049      	lsls	r1, r1, #1
 800996c:	f8a4 1098 	strh.w	r1, [r4, #152]	; 0x98
 8009970:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8009974:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8009978:	00c9      	lsls	r1, r1, #3
 800997a:	0092      	lsls	r2, r2, #2
 800997c:	f8a4 109c 	strh.w	r1, [r4, #156]	; 0x9c
 8009980:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 8009984:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009988:	edc4 8a22 	vstr	s17, [r4, #136]	; 0x88
 800998c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8009990:	ecbd 8b04 	vpop	{d8-d9}
 8009994:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8009998:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 800999c:	f104 07ac 	add.w	r7, r4, #172	; 0xac
 80099a0:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
 80099a4:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
 80099a8:	f8a4 808e 	strh.w	r8, [r4, #142]	; 0x8e
 80099ac:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80099b0:	6830      	ldr	r0, [r6, #0]
 80099b2:	6871      	ldr	r1, [r6, #4]
 80099b4:	4643      	mov	r3, r8
 80099b6:	34b8      	adds	r4, #184	; 0xb8
 80099b8:	c403      	stmia	r4!, {r0, r1}
 80099ba:	4618      	mov	r0, r3
 80099bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c0:	200000f4 	.word	0x200000f4
 80099c4:	41680000 	.word	0x41680000
 80099c8:	42006666 	.word	0x42006666
 80099cc:	419b3333 	.word	0x419b3333
 80099d0:	42c6999a 	.word	0x42c6999a
 80099d4:	43168000 	.word	0x43168000
 80099d8:	3e1a1cad 	.word	0x3e1a1cad
 80099dc:	3f933333 	.word	0x3f933333
 80099e0:	4254cccd 	.word	0x4254cccd
 80099e4:	3d59e83f 	.word	0x3d59e83f
 80099e8:	42966666 	.word	0x42966666
 80099ec:	3d9a0275 	.word	0x3d9a0275
 80099f0:	42d4cccd 	.word	0x42d4cccd
 80099f4:	3dd9e83f 	.word	0x3dd9e83f
 80099f8:	4048e093 	.word	0x4048e093
 80099fc:	3ea0da75 	.word	0x3ea0da75
 8009a00:	ecbd 8b04 	vpop	{d8-d9}
 8009a04:	2302      	movs	r3, #2
 8009a06:	4618      	mov	r0, r3
 8009a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a10:	d1f6      	bne.n	8009a00 <InfraredPD_Start+0x334>
 8009a12:	4b22      	ldr	r3, [pc, #136]	; (8009a9c <InfraredPD_Start+0x3d0>)
 8009a14:	60a3      	str	r3, [r4, #8]
 8009a16:	2a04      	cmp	r2, #4
 8009a18:	f63f aec6 	bhi.w	80097a8 <InfraredPD_Start+0xdc>
 8009a1c:	e68a      	b.n	8009734 <InfraredPD_Start+0x68>
 8009a1e:	2305      	movs	r3, #5
 8009a20:	e6c6      	b.n	80097b0 <InfraredPD_Start+0xe4>
 8009a22:	2304      	movs	r3, #4
 8009a24:	e6c4      	b.n	80097b0 <InfraredPD_Start+0xe4>
 8009a26:	4b1e      	ldr	r3, [pc, #120]	; (8009aa0 <InfraredPD_Start+0x3d4>)
 8009a28:	60a3      	str	r3, [r4, #8]
 8009a2a:	e683      	b.n	8009734 <InfraredPD_Start+0x68>
 8009a2c:	4b1d      	ldr	r3, [pc, #116]	; (8009aa4 <InfraredPD_Start+0x3d8>)
 8009a2e:	6083      	str	r3, [r0, #8]
 8009a30:	e680      	b.n	8009734 <InfraredPD_Start+0x68>
 8009a32:	4b1d      	ldr	r3, [pc, #116]	; (8009aa8 <InfraredPD_Start+0x3dc>)
 8009a34:	6083      	str	r3, [r0, #8]
 8009a36:	e67d      	b.n	8009734 <InfraredPD_Start+0x68>
 8009a38:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8009aac <InfraredPD_Start+0x3e0>
 8009a3c:	ee28 7a07 	vmul.f32	s14, s16, s14
 8009a40:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
 8009a44:	e712      	b.n	800986c <InfraredPD_Start+0x1a0>
 8009a46:	4b18      	ldr	r3, [pc, #96]	; (8009aa8 <InfraredPD_Start+0x3dc>)
 8009a48:	60a3      	str	r3, [r4, #8]
 8009a4a:	2308      	movs	r3, #8
 8009a4c:	702b      	strb	r3, [r5, #0]
 8009a4e:	e671      	b.n	8009734 <InfraredPD_Start+0x68>
 8009a50:	2301      	movs	r3, #1
 8009a52:	e6ad      	b.n	80097b0 <InfraredPD_Start+0xe4>
 8009a54:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009a56:	f000 fba5 	bl	800a1a4 <free>
 8009a5a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8009a5e:	e736      	b.n	80098ce <InfraredPD_Start+0x202>
 8009a60:	4b11      	ldr	r3, [pc, #68]	; (8009aa8 <InfraredPD_Start+0x3dc>)
 8009a62:	60a3      	str	r3, [r4, #8]
 8009a64:	2a08      	cmp	r2, #8
 8009a66:	d8f0      	bhi.n	8009a4a <InfraredPD_Start+0x37e>
 8009a68:	e664      	b.n	8009734 <InfraredPD_Start+0x68>
 8009a6a:	4b0e      	ldr	r3, [pc, #56]	; (8009aa4 <InfraredPD_Start+0x3d8>)
 8009a6c:	60a3      	str	r3, [r4, #8]
 8009a6e:	2a02      	cmp	r2, #2
 8009a70:	f67f ae60 	bls.w	8009734 <InfraredPD_Start+0x68>
 8009a74:	2302      	movs	r3, #2
 8009a76:	702b      	strb	r3, [r5, #0]
 8009a78:	e65c      	b.n	8009734 <InfraredPD_Start+0x68>
 8009a7a:	4b0a      	ldr	r3, [pc, #40]	; (8009aa4 <InfraredPD_Start+0x3d8>)
 8009a7c:	6083      	str	r3, [r0, #8]
 8009a7e:	e7f9      	b.n	8009a74 <InfraredPD_Start+0x3a8>
 8009a80:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009a82:	f000 fb8f 	bl	800a1a4 <free>
 8009a86:	8ba0      	ldrh	r0, [r4, #28]
 8009a88:	e6fa      	b.n	8009880 <InfraredPD_Start+0x1b4>
 8009a8a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009a8c:	b118      	cbz	r0, 8009a96 <InfraredPD_Start+0x3ca>
 8009a8e:	f000 fb89 	bl	800a1a4 <free>
 8009a92:	2307      	movs	r3, #7
 8009a94:	e68c      	b.n	80097b0 <InfraredPD_Start+0xe4>
 8009a96:	2307      	movs	r3, #7
 8009a98:	e68a      	b.n	80097b0 <InfraredPD_Start+0xe4>
 8009a9a:	bf00      	nop
 8009a9c:	419b3333 	.word	0x419b3333
 8009aa0:	42560000 	.word	0x42560000
 8009aa4:	41873333 	.word	0x41873333
 8009aa8:	41b00000 	.word	0x41b00000
 8009aac:	3223b1a8 	.word	0x3223b1a8

08009ab0 <InfraredPD_Update>:
 8009ab0:	4bba      	ldr	r3, [pc, #744]	; (8009d9c <InfraredPD_Update+0x2ec>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	b903      	cbnz	r3, 8009ab8 <InfraredPD_Update+0x8>
 8009ab6:	4770      	bx	lr
 8009ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009abc:	ed2d 8b02 	vpush	{d8}
 8009ac0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8009ac4:	f890 60b1 	ldrb.w	r6, [r0, #177]	; 0xb1
 8009ac8:	4615      	mov	r5, r2
 8009aca:	f9b1 2000 	ldrsh.w	r2, [r1]
 8009ace:	fb16 f303 	smulbb	r3, r6, r3
 8009ad2:	ee07 2a10 	vmov	s14, r2
 8009ad6:	ee07 3a90 	vmov	s15, r3
 8009ada:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ae2:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 8009ae6:	ed80 7a00 	vstr	s14, [r0]
 8009aea:	b083      	sub	sp, #12
 8009aec:	4604      	mov	r4, r0
 8009aee:	edc0 7a01 	vstr	s15, [r0, #4]
 8009af2:	2a00      	cmp	r2, #0
 8009af4:	d067      	beq.n	8009bc6 <InfraredPD_Update+0x116>
 8009af6:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d168      	bne.n	8009bd0 <InfraredPD_Update+0x120>
 8009afe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f040 8303 	bne.w	800a10e <InfraredPD_Update+0x65e>
 8009b08:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 8009b0c:	6a07      	ldr	r7, [r0, #32]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8009b16:	3a01      	subs	r2, #1
 8009b18:	0090      	lsls	r0, r2, #2
 8009b1a:	2f01      	cmp	r7, #1
 8009b1c:	d068      	beq.n	8009bf0 <InfraredPD_Update+0x140>
 8009b1e:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8009da0 <InfraredPD_Update+0x2f0>
 8009b22:	eeb0 6ae7 	vabs.f32	s12, s15
 8009b26:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8009b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b2e:	d57b      	bpl.n	8009c28 <InfraredPD_Update+0x178>
 8009b30:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8009b34:	2a00      	cmp	r2, #0
 8009b36:	f000 81a8 	beq.w	8009e8a <InfraredPD_Update+0x3da>
 8009b3a:	2a01      	cmp	r2, #1
 8009b3c:	f000 8265 	beq.w	800a00a <InfraredPD_Update+0x55a>
 8009b40:	2a02      	cmp	r2, #2
 8009b42:	f000 8246 	beq.w	8009fd2 <InfraredPD_Update+0x522>
 8009b46:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8009b4a:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 8009b4e:	2a00      	cmp	r2, #0
 8009b50:	f000 80a6 	beq.w	8009ca0 <InfraredPD_Update+0x1f0>
 8009b54:	e070      	b.n	8009c38 <InfraredPD_Update+0x188>
 8009b56:	2f01      	cmp	r7, #1
 8009b58:	f000 82c2 	beq.w	800a0e0 <InfraredPD_Update+0x630>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8009b62:	2f00      	cmp	r7, #0
 8009b64:	f040 82d0 	bne.w	800a108 <InfraredPD_Update+0x658>
 8009b68:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8009b6c:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
 8009b70:	3301      	adds	r3, #1
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	429a      	cmp	r2, r3
 8009b76:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8009b7a:	d10b      	bne.n	8009b94 <InfraredPD_Update+0xe4>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8009b82:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8009b86:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009b8a:	b91b      	cbnz	r3, 8009b94 <InfraredPD_Update+0xe4>
 8009b8c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8009b90:	2300      	movs	r3, #0
 8009b92:	65e3      	str	r3, [r4, #92]	; 0x5c
 8009b94:	ee07 6a90 	vmov	s15, r6
 8009b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9c:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8009ba0:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8009ba4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bac:	ee17 3a10 	vmov	r3, s14
 8009bb0:	802b      	strh	r3, [r5, #0]
 8009bb2:	ee17 3a90 	vmov	r3, s15
 8009bb6:	806b      	strh	r3, [r5, #2]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	716b      	strb	r3, [r5, #5]
 8009bbc:	712f      	strb	r7, [r5, #4]
 8009bbe:	2f01      	cmp	r7, #1
 8009bc0:	d101      	bne.n	8009bc6 <InfraredPD_Update+0x116>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	716b      	strb	r3, [r5, #5]
 8009bc6:	b003      	add	sp, #12
 8009bc8:	ecbd 8b02 	vpop	{d8}
 8009bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8009bd8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8009bdc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 8009be0:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 8009be4:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
 8009be8:	f880 20a7 	strb.w	r2, [r0, #167]	; 0xa7
 8009bec:	6203      	str	r3, [r0, #32]
 8009bee:	4610      	mov	r0, r2
 8009bf0:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8009bf4:	b182      	cbz	r2, 8009c18 <InfraredPD_Update+0x168>
 8009bf6:	2a01      	cmp	r2, #1
 8009bf8:	f000 81e8 	beq.w	8009fcc <InfraredPD_Update+0x51c>
 8009bfc:	2a02      	cmp	r2, #2
 8009bfe:	d10b      	bne.n	8009c18 <InfraredPD_Update+0x168>
 8009c00:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8009da4 <InfraredPD_Update+0x2f4>
 8009c04:	eddf 6a68 	vldr	s13, [pc, #416]	; 8009da8 <InfraredPD_Update+0x2f8>
 8009c08:	eee7 6a06 	vfma.f32	s13, s14, s12
 8009c0c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8009c10:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8009c14:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
 8009c18:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8009c1c:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
 8009c20:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 8009c24:	2701      	movs	r7, #1
 8009c26:	e77a      	b.n	8009b1e <InfraredPD_Update+0x6e>
 8009c28:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 8009c2c:	b3b2      	cbz	r2, 8009c9c <InfraredPD_Update+0x1ec>
 8009c2e:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8009c32:	b39a      	cbz	r2, 8009c9c <InfraredPD_Update+0x1ec>
 8009c34:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8009c38:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8009c3c:	8ba1      	ldrh	r1, [r4, #28]
 8009c3e:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 8009c42:	3201      	adds	r2, #1
 8009c44:	b2d2      	uxtb	r2, r2
 8009c46:	428a      	cmp	r2, r1
 8009c48:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8009c4c:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 8009c50:	bf08      	it	eq
 8009c52:	2200      	moveq	r2, #0
 8009c54:	ed4e 7a01 	vstr	s15, [lr, #-4]
 8009c58:	bf08      	it	eq
 8009c5a:	f884 2040 	strbeq.w	r2, [r4, #64]	; 0x40
 8009c5e:	2901      	cmp	r1, #1
 8009c60:	f240 81ce 	bls.w	800a000 <InfraredPD_Update+0x550>
 8009c64:	42b9      	cmp	r1, r7
 8009c66:	f240 81df 	bls.w	800a028 <InfraredPD_Update+0x578>
 8009c6a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8009dac <InfraredPD_Update+0x2fc>
 8009c6e:	b167      	cbz	r7, 8009c8a <InfraredPD_Update+0x1da>
 8009c70:	2200      	movs	r2, #0
 8009c72:	4611      	mov	r1, r2
 8009c74:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8009c78:	3201      	adds	r2, #1
 8009c7a:	edd1 7a00 	vldr	s15, [r1]
 8009c7e:	b292      	uxth	r2, r2
 8009c80:	42ba      	cmp	r2, r7
 8009c82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c86:	4611      	mov	r1, r2
 8009c88:	d3f4      	bcc.n	8009c74 <InfraredPD_Update+0x1c4>
 8009c8a:	ee07 7a90 	vmov	s15, r7
 8009c8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009c96:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8009c9a:	e003      	b.n	8009ca4 <InfraredPD_Update+0x1f4>
 8009c9c:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8009ca0:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8009ca4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009ca6:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8009caa:	180a      	adds	r2, r1, r0
 8009cac:	edc2 7a00 	vstr	s15, [r2]
 8009cb0:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009cb4:	f894 c04c 	ldrb.w	ip, [r4, #76]	; 0x4c
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d07b      	beq.n	8009db4 <InfraredPD_Update+0x304>
 8009cbc:	ed94 6a1c 	vldr	s12, [r4, #112]	; 0x70
 8009cc0:	edd4 6a1d 	vldr	s13, [r4, #116]	; 0x74
 8009cc4:	ed94 5a1e 	vldr	s10, [r4, #120]	; 0x78
 8009cc8:	edd4 5a1f 	vldr	s11, [r4, #124]	; 0x7c
 8009ccc:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 8009cd0:	f894 7090 	ldrb.w	r7, [r4, #144]	; 0x90
 8009cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cd8:	ee37 8a46 	vsub.f32	s16, s14, s12
 8009cdc:	ee77 7a66 	vsub.f32	s15, s14, s13
 8009ce0:	ee28 8a05 	vmul.f32	s16, s16, s10
 8009ce4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009ce8:	eea6 8a28 	vfma.f32	s16, s12, s17
 8009cec:	eee8 7aa6 	vfma.f32	s15, s17, s13
 8009cf0:	ed84 8a1e 	vstr	s16, [r4, #120]	; 0x78
 8009cf4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009cf8:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 8009cfc:	ed84 8a20 	vstr	s16, [r4, #128]	; 0x80
 8009d00:	2f00      	cmp	r7, #0
 8009d02:	f000 80b4 	beq.w	8009e6e <InfraredPD_Update+0x3be>
 8009d06:	2f01      	cmp	r7, #1
 8009d08:	d114      	bne.n	8009d34 <InfraredPD_Update+0x284>
 8009d0a:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
 8009d0e:	eef0 6ac8 	vabs.f32	s13, s16
 8009d12:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1a:	f140 80c0 	bpl.w	8009e9e <InfraredPD_Update+0x3ee>
 8009d1e:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 8009d22:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
 8009d26:	3301      	adds	r3, #1
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8009d30:	f240 8146 	bls.w	8009fc0 <InfraredPD_Update+0x510>
 8009d34:	f894 80a6 	ldrb.w	r8, [r4, #166]	; 0xa6
 8009d38:	f1bc 0f00 	cmp.w	ip, #0
 8009d3c:	d108      	bne.n	8009d50 <InfraredPD_Update+0x2a0>
 8009d3e:	f1b8 0f03 	cmp.w	r8, #3
 8009d42:	d809      	bhi.n	8009d58 <InfraredPD_Update+0x2a8>
 8009d44:	e8df f018 	tbh	[pc, r8, lsl #1]
 8009d48:	010d011c 	.word	0x010d011c
 8009d4c:	00af00fd 	.word	0x00af00fd
 8009d50:	f1b8 0f00 	cmp.w	r8, #0
 8009d54:	f43f af17 	beq.w	8009b86 <InfraredPD_Update+0xd6>
 8009d58:	ee07 6a90 	vmov	s15, r6
 8009d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d60:	f1b8 0f02 	cmp.w	r8, #2
 8009d64:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8009d68:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8009d6c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d74:	ee17 3a10 	vmov	r3, s14
 8009d78:	802b      	strh	r3, [r5, #0]
 8009d7a:	ee17 3a90 	vmov	r3, s15
 8009d7e:	806b      	strh	r3, [r5, #2]
 8009d80:	f43f af1a 	beq.w	8009bb8 <InfraredPD_Update+0x108>
 8009d84:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
 8009d88:	f1b8 0f01 	cmp.w	r8, #1
 8009d8c:	f000 8080 	beq.w	8009e90 <InfraredPD_Update+0x3e0>
 8009d90:	796b      	ldrb	r3, [r5, #5]
 8009d92:	712f      	strb	r7, [r5, #4]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	f47f af12 	bne.w	8009bbe <InfraredPD_Update+0x10e>
 8009d9a:	e712      	b.n	8009bc2 <InfraredPD_Update+0x112>
 8009d9c:	200000f4 	.word	0x200000f4
 8009da0:	46f05e00 	.word	0x46f05e00
 8009da4:	3c23d70a 	.word	0x3c23d70a
 8009da8:	43889333 	.word	0x43889333
 8009dac:	00000000 	.word	0x00000000
 8009db0:	7fc00000 	.word	0x7fc00000
 8009db4:	2200      	movs	r2, #0
 8009db6:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
 8009dba:	f1bc 0f00 	cmp.w	ip, #0
 8009dbe:	d169      	bne.n	8009e94 <InfraredPD_Update+0x3e4>
 8009dc0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009dc2:	65a2      	str	r2, [r4, #88]	; 0x58
 8009dc4:	b1d3      	cbz	r3, 8009dfc <InfraredPD_Update+0x34c>
 8009dc6:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 8009dac <InfraredPD_Update+0x2fc>
 8009dca:	2200      	movs	r2, #0
 8009dcc:	3201      	adds	r2, #1
 8009dce:	ecb1 7a01 	vldmia	r1!, {s14}
 8009dd2:	b290      	uxth	r0, r2
 8009dd4:	4283      	cmp	r3, r0
 8009dd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009dda:	d8f7      	bhi.n	8009dcc <InfraredPD_Update+0x31c>
 8009ddc:	ee07 3a10 	vmov	s14, r3
 8009de0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8009de4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009de8:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 8009dec:	f1bc 0f00 	cmp.w	ip, #0
 8009df0:	d00a      	beq.n	8009e08 <InfraredPD_Update+0x358>
 8009df2:	f04f 0c00 	mov.w	ip, #0
 8009df6:	f884 c04c 	strb.w	ip, [r4, #76]	; 0x4c
 8009dfa:	e75f      	b.n	8009cbc <InfraredPD_Update+0x20c>
 8009dfc:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 8009db0 <InfraredPD_Update+0x300>
 8009e00:	eeb0 7a67 	vmov.f32	s14, s15
 8009e04:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
 8009e08:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f040 80c8 	bne.w	8009fa2 <InfraredPD_Update+0x4f2>
 8009e12:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8009e16:	b17a      	cbz	r2, 8009e38 <InfraredPD_Update+0x388>
 8009e18:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8009e1c:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 8009e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e24:	eef1 6a66 	vneg.f32	s13, s13
 8009e28:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e30:	f340 8115 	ble.w	800a05e <InfraredPD_Update+0x5ae>
 8009e34:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8009e38:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f47f af3d 	bne.w	8009cbc <InfraredPD_Update+0x20c>
 8009e42:	edd4 6a16 	vldr	s13, [r4, #88]	; 0x58
 8009e46:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 8009e4a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e56:	f340 8127 	ble.w	800a0a8 <InfraredPD_Update+0x5f8>
 8009e5a:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8009e5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e62:	2301      	movs	r3, #1
 8009e64:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8009e68:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 8009e6c:	e726      	b.n	8009cbc <InfraredPD_Update+0x20c>
 8009e6e:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 8009e72:	eef0 6ac8 	vabs.f32	s13, s16
 8009e76:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e7e:	f77f af59 	ble.w	8009d34 <InfraredPD_Update+0x284>
 8009e82:	2701      	movs	r7, #1
 8009e84:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 8009e88:	e754      	b.n	8009d34 <InfraredPD_Update+0x284>
 8009e8a:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8009e8e:	e707      	b.n	8009ca0 <InfraredPD_Update+0x1f0>
 8009e90:	712f      	strb	r7, [r5, #4]
 8009e92:	e696      	b.n	8009bc2 <InfraredPD_Update+0x112>
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d196      	bne.n	8009dc6 <InfraredPD_Update+0x316>
 8009e98:	4ba5      	ldr	r3, [pc, #660]	; (800a130 <InfraredPD_Update+0x680>)
 8009e9a:	6563      	str	r3, [r4, #84]	; 0x54
 8009e9c:	e7a9      	b.n	8009df2 <InfraredPD_Update+0x342>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8009ea4:	e746      	b.n	8009d34 <InfraredPD_Update+0x284>
 8009ea6:	f8b4 90a4 	ldrh.w	r9, [r4, #164]	; 0xa4
 8009eaa:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
 8009eae:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8009eb2:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8009eb6:	f109 0901 	add.w	r9, r9, #1
 8009eba:	fa1f f989 	uxth.w	r9, r9
 8009ebe:	ee17 0a90 	vmov	r0, s15
 8009ec2:	f8a4 90a4 	strh.w	r9, [r4, #164]	; 0xa4
 8009ec6:	ed8d 7a01 	vstr	s14, [sp, #4]
 8009eca:	f7f6 fc67 	bl	800079c <__aeabi_f2d>
 8009ece:	4682      	mov	sl, r0
 8009ed0:	9801      	ldr	r0, [sp, #4]
 8009ed2:	468b      	mov	fp, r1
 8009ed4:	f7f6 fc62 	bl	800079c <__aeabi_f2d>
 8009ed8:	a393      	add	r3, pc, #588	; (adr r3, 800a128 <InfraredPD_Update+0x678>)
 8009eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ede:	f7f6 f9cf 	bl	8000280 <__aeabi_dmul>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4650      	mov	r0, sl
 8009ee8:	4659      	mov	r1, fp
 8009eea:	f7f6 fd0f 	bl	800090c <__aeabi_dcmplt>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	f47f ae44 	bne.w	8009b7c <InfraredPD_Update+0xcc>
 8009ef4:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 8009ef8:	454b      	cmp	r3, r9
 8009efa:	f43f ae3f 	beq.w	8009b7c <InfraredPD_Update+0xcc>
 8009efe:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8009f02:	ed9d 7a01 	vldr	s14, [sp, #4]
 8009f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f0e:	d505      	bpl.n	8009f1c <InfraredPD_Update+0x46c>
 8009f10:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
 8009f14:	f04f 0801 	mov.w	r8, #1
 8009f18:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 8009f1c:	ee07 6a90 	vmov	s15, r6
 8009f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f24:	eec8 6aa7 	vdiv.f32	s13, s17, s15
 8009f28:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8009f2c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8009f30:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009f34:	ee16 3a90 	vmov	r3, s13
 8009f38:	802b      	strh	r3, [r5, #0]
 8009f3a:	ee17 3a10 	vmov	r3, s14
 8009f3e:	806b      	strh	r3, [r5, #2]
 8009f40:	e720      	b.n	8009d84 <InfraredPD_Update+0x2d4>
 8009f42:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 8009f46:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8009f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f52:	f57f ae00 	bpl.w	8009b56 <InfraredPD_Update+0xa6>
 8009f56:	2300      	movs	r3, #0
 8009f58:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8009f5c:	f8c4 30a2 	str.w	r3, [r4, #162]	; 0xa2
 8009f60:	e611      	b.n	8009b86 <InfraredPD_Update+0xd6>
 8009f62:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 8009f66:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8009f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f72:	d57b      	bpl.n	800a06c <InfraredPD_Update+0x5bc>
 8009f74:	2300      	movs	r3, #0
 8009f76:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8009f7a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8009f7e:	e602      	b.n	8009b86 <InfraredPD_Update+0xd6>
 8009f80:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8009f84:	ee78 6ae7 	vsub.f32	s13, s17, s15
 8009f88:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f90:	f340 8081 	ble.w	800a096 <InfraredPD_Update+0x5e6>
 8009f94:	f04f 0803 	mov.w	r8, #3
 8009f98:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 8009f9c:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
 8009fa0:	e7bc      	b.n	8009f1c <InfraredPD_Update+0x46c>
 8009fa2:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8009fa6:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 8009faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fae:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb6:	d552      	bpl.n	800a05e <InfraredPD_Update+0x5ae>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8009fbe:	e73b      	b.n	8009e38 <InfraredPD_Update+0x388>
 8009fc0:	2700      	movs	r7, #0
 8009fc2:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 8009fc6:	f8a4 708e 	strh.w	r7, [r4, #142]	; 0x8e
 8009fca:	e6b3      	b.n	8009d34 <InfraredPD_Update+0x284>
 8009fcc:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 8009fd0:	e622      	b.n	8009c18 <InfraredPD_Update+0x168>
 8009fd2:	eddf 5a58 	vldr	s11, [pc, #352]	; 800a134 <InfraredPD_Update+0x684>
 8009fd6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a138 <InfraredPD_Update+0x688>
 8009fda:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8009fde:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38
 8009fe2:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009fe6:	eeb0 7a46 	vmov.f32	s14, s12
 8009fea:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8009fee:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
 8009ff2:	ee95 7aa5 	vfnms.f32	s14, s11, s11
 8009ff6:	eee5 7a07 	vfma.f32	s15, s10, s14
 8009ffa:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8009ffe:	e5a4      	b.n	8009b4a <InfraredPD_Update+0x9a>
 800a000:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800a004:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 800a008:	e64c      	b.n	8009ca4 <InfraredPD_Update+0x1f4>
 800a00a:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 800a00e:	edd4 6a05 	vldr	s13, [r4, #20]
 800a012:	ed9f 6a48 	vldr	s12, [pc, #288]	; 800a134 <InfraredPD_Update+0x684>
 800a016:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a01a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a01e:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a022:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 800a026:	e590      	b.n	8009b4a <InfraredPD_Update+0x9a>
 800a028:	1e4f      	subs	r7, r1, #1
 800a02a:	4662      	mov	r2, ip
 800a02c:	fa1f fc87 	uxth.w	ip, r7
 800a030:	2700      	movs	r7, #0
 800a032:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 800a036:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a13c <InfraredPD_Update+0x68c>
 800a03a:	1d17      	adds	r7, r2, #4
 800a03c:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 800a040:	ecf2 7a01 	vldmia	r2!, {s15}
 800a044:	4297      	cmp	r7, r2
 800a046:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a04a:	d1f9      	bne.n	800a040 <InfraredPD_Update+0x590>
 800a04c:	ee07 1a90 	vmov	s15, r1
 800a050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a054:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a058:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 800a05c:	e622      	b.n	8009ca4 <InfraredPD_Update+0x1f4>
 800a05e:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
 800a062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a066:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 800a06a:	e6e5      	b.n	8009e38 <InfraredPD_Update+0x388>
 800a06c:	bba7      	cbnz	r7, 800a0d8 <InfraredPD_Update+0x628>
 800a06e:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 800a072:	b38b      	cbz	r3, 800a0d8 <InfraredPD_Update+0x628>
 800a074:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 800a078:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
 800a07c:	3301      	adds	r3, #1
 800a07e:	b29b      	uxth	r3, r3
 800a080:	429a      	cmp	r2, r3
 800a082:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 800a086:	f47f af49 	bne.w	8009f1c <InfraredPD_Update+0x46c>
 800a08a:	2302      	movs	r3, #2
 800a08c:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 800a090:	f8a4 70a0 	strh.w	r7, [r4, #160]	; 0xa0
 800a094:	e57e      	b.n	8009b94 <InfraredPD_Update+0xe4>
 800a096:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 800a09a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a2:	f57f ad70 	bpl.w	8009b86 <InfraredPD_Update+0xd6>
 800a0a6:	e735      	b.n	8009f14 <InfraredPD_Update+0x464>
 800a0a8:	eef1 7a67 	vneg.f32	s15, s15
 800a0ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0b4:	f57f ae02 	bpl.w	8009cbc <InfraredPD_Update+0x20c>
 800a0b8:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 800a0bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c4:	f77f adfa 	ble.w	8009cbc <InfraredPD_Update+0x20c>
 800a0c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800a0d2:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 800a0d6:	e5f1      	b.n	8009cbc <InfraredPD_Update+0x20c>
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 800a0de:	e71d      	b.n	8009f1c <InfraredPD_Update+0x46c>
 800a0e0:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 800a0e4:	f8b4 109a 	ldrh.w	r1, [r4, #154]	; 0x9a
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	4299      	cmp	r1, r3
 800a0f0:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
 800a0f4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 800a0f8:	f47f ad4c 	bne.w	8009b94 <InfraredPD_Update+0xe4>
 800a0fc:	f884 70a6 	strb.w	r7, [r4, #166]	; 0xa6
 800a100:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
 800a104:	46b8      	mov	r8, r7
 800a106:	e709      	b.n	8009f1c <InfraredPD_Update+0x46c>
 800a108:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 800a10c:	e542      	b.n	8009b94 <InfraredPD_Update+0xe4>
 800a10e:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 800a112:	6a07      	ldr	r7, [r0, #32]
 800a114:	3301      	adds	r3, #1
 800a116:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800a11a:	fa12 f283 	uxtah	r2, r2, r3
 800a11e:	3701      	adds	r7, #1
 800a120:	6207      	str	r7, [r0, #32]
 800a122:	b29b      	uxth	r3, r3
 800a124:	0090      	lsls	r0, r2, #2
 800a126:	e4f8      	b.n	8009b1a <InfraredPD_Update+0x6a>
 800a128:	cccccccd 	.word	0xcccccccd
 800a12c:	3feccccc 	.word	0x3feccccc
 800a130:	7fc00000 	.word	0x7fc00000
 800a134:	3c23d70a 	.word	0x3c23d70a
 800a138:	43889333 	.word	0x43889333
 800a13c:	00000000 	.word	0x00000000

0800a140 <InfraredPD_GetLibVersion>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	4b12      	ldr	r3, [pc, #72]	; (800a18c <InfraredPD_GetLibVersion+0x4c>)
 800a144:	781e      	ldrb	r6, [r3, #0]
 800a146:	b08a      	sub	sp, #40	; 0x28
 800a148:	b1ee      	cbz	r6, 800a186 <InfraredPD_GetLibVersion+0x46>
 800a14a:	4d11      	ldr	r5, [pc, #68]	; (800a190 <InfraredPD_GetLibVersion+0x50>)
 800a14c:	4684      	mov	ip, r0
 800a14e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a150:	f10d 0e04 	add.w	lr, sp, #4
 800a154:	4674      	mov	r4, lr
 800a156:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a15a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a15e:	f84e 0b04 	str.w	r0, [lr], #4
 800a162:	f88e 1000 	strb.w	r1, [lr]
 800a166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a168:	f8cc 0000 	str.w	r0, [ip]
 800a16c:	f8cc 2008 	str.w	r2, [ip, #8]
 800a170:	6820      	ldr	r0, [r4, #0]
 800a172:	7922      	ldrb	r2, [r4, #4]
 800a174:	f8cc 1004 	str.w	r1, [ip, #4]
 800a178:	2614      	movs	r6, #20
 800a17a:	f8cc 300c 	str.w	r3, [ip, #12]
 800a17e:	f8cc 0010 	str.w	r0, [ip, #16]
 800a182:	f88c 2014 	strb.w	r2, [ip, #20]
 800a186:	4630      	mov	r0, r6
 800a188:	b00a      	add	sp, #40	; 0x28
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	200000f4 	.word	0x200000f4
 800a190:	0800ae58 	.word	0x0800ae58

0800a194 <malloc>:
 800a194:	4b02      	ldr	r3, [pc, #8]	; (800a1a0 <malloc+0xc>)
 800a196:	4601      	mov	r1, r0
 800a198:	6818      	ldr	r0, [r3, #0]
 800a19a:	f000 b82b 	b.w	800a1f4 <_malloc_r>
 800a19e:	bf00      	nop
 800a1a0:	200000d4 	.word	0x200000d4

0800a1a4 <free>:
 800a1a4:	4b02      	ldr	r3, [pc, #8]	; (800a1b0 <free+0xc>)
 800a1a6:	4601      	mov	r1, r0
 800a1a8:	6818      	ldr	r0, [r3, #0]
 800a1aa:	f000 b927 	b.w	800a3fc <_free_r>
 800a1ae:	bf00      	nop
 800a1b0:	200000d4 	.word	0x200000d4

0800a1b4 <sbrk_aligned>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	4e0e      	ldr	r6, [pc, #56]	; (800a1f0 <sbrk_aligned+0x3c>)
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	6831      	ldr	r1, [r6, #0]
 800a1bc:	4605      	mov	r5, r0
 800a1be:	b911      	cbnz	r1, 800a1c6 <sbrk_aligned+0x12>
 800a1c0:	f000 f8e0 	bl	800a384 <_sbrk_r>
 800a1c4:	6030      	str	r0, [r6, #0]
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	f000 f8db 	bl	800a384 <_sbrk_r>
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	d00a      	beq.n	800a1e8 <sbrk_aligned+0x34>
 800a1d2:	1cc4      	adds	r4, r0, #3
 800a1d4:	f024 0403 	bic.w	r4, r4, #3
 800a1d8:	42a0      	cmp	r0, r4
 800a1da:	d007      	beq.n	800a1ec <sbrk_aligned+0x38>
 800a1dc:	1a21      	subs	r1, r4, r0
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f000 f8d0 	bl	800a384 <_sbrk_r>
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d101      	bne.n	800a1ec <sbrk_aligned+0x38>
 800a1e8:	f04f 34ff 	mov.w	r4, #4294967295
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	bd70      	pop	{r4, r5, r6, pc}
 800a1f0:	20000b70 	.word	0x20000b70

0800a1f4 <_malloc_r>:
 800a1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f8:	1ccd      	adds	r5, r1, #3
 800a1fa:	f025 0503 	bic.w	r5, r5, #3
 800a1fe:	3508      	adds	r5, #8
 800a200:	2d0c      	cmp	r5, #12
 800a202:	bf38      	it	cc
 800a204:	250c      	movcc	r5, #12
 800a206:	2d00      	cmp	r5, #0
 800a208:	4607      	mov	r7, r0
 800a20a:	db01      	blt.n	800a210 <_malloc_r+0x1c>
 800a20c:	42a9      	cmp	r1, r5
 800a20e:	d905      	bls.n	800a21c <_malloc_r+0x28>
 800a210:	230c      	movs	r3, #12
 800a212:	603b      	str	r3, [r7, #0]
 800a214:	2600      	movs	r6, #0
 800a216:	4630      	mov	r0, r6
 800a218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a21c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2f0 <_malloc_r+0xfc>
 800a220:	f000 f868 	bl	800a2f4 <__malloc_lock>
 800a224:	f8d8 3000 	ldr.w	r3, [r8]
 800a228:	461c      	mov	r4, r3
 800a22a:	bb5c      	cbnz	r4, 800a284 <_malloc_r+0x90>
 800a22c:	4629      	mov	r1, r5
 800a22e:	4638      	mov	r0, r7
 800a230:	f7ff ffc0 	bl	800a1b4 <sbrk_aligned>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	4604      	mov	r4, r0
 800a238:	d155      	bne.n	800a2e6 <_malloc_r+0xf2>
 800a23a:	f8d8 4000 	ldr.w	r4, [r8]
 800a23e:	4626      	mov	r6, r4
 800a240:	2e00      	cmp	r6, #0
 800a242:	d145      	bne.n	800a2d0 <_malloc_r+0xdc>
 800a244:	2c00      	cmp	r4, #0
 800a246:	d048      	beq.n	800a2da <_malloc_r+0xe6>
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	4631      	mov	r1, r6
 800a24c:	4638      	mov	r0, r7
 800a24e:	eb04 0903 	add.w	r9, r4, r3
 800a252:	f000 f897 	bl	800a384 <_sbrk_r>
 800a256:	4581      	cmp	r9, r0
 800a258:	d13f      	bne.n	800a2da <_malloc_r+0xe6>
 800a25a:	6821      	ldr	r1, [r4, #0]
 800a25c:	1a6d      	subs	r5, r5, r1
 800a25e:	4629      	mov	r1, r5
 800a260:	4638      	mov	r0, r7
 800a262:	f7ff ffa7 	bl	800a1b4 <sbrk_aligned>
 800a266:	3001      	adds	r0, #1
 800a268:	d037      	beq.n	800a2da <_malloc_r+0xe6>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	442b      	add	r3, r5
 800a26e:	6023      	str	r3, [r4, #0]
 800a270:	f8d8 3000 	ldr.w	r3, [r8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d038      	beq.n	800a2ea <_malloc_r+0xf6>
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	42a2      	cmp	r2, r4
 800a27c:	d12b      	bne.n	800a2d6 <_malloc_r+0xe2>
 800a27e:	2200      	movs	r2, #0
 800a280:	605a      	str	r2, [r3, #4]
 800a282:	e00f      	b.n	800a2a4 <_malloc_r+0xb0>
 800a284:	6822      	ldr	r2, [r4, #0]
 800a286:	1b52      	subs	r2, r2, r5
 800a288:	d41f      	bmi.n	800a2ca <_malloc_r+0xd6>
 800a28a:	2a0b      	cmp	r2, #11
 800a28c:	d917      	bls.n	800a2be <_malloc_r+0xca>
 800a28e:	1961      	adds	r1, r4, r5
 800a290:	42a3      	cmp	r3, r4
 800a292:	6025      	str	r5, [r4, #0]
 800a294:	bf18      	it	ne
 800a296:	6059      	strne	r1, [r3, #4]
 800a298:	6863      	ldr	r3, [r4, #4]
 800a29a:	bf08      	it	eq
 800a29c:	f8c8 1000 	streq.w	r1, [r8]
 800a2a0:	5162      	str	r2, [r4, r5]
 800a2a2:	604b      	str	r3, [r1, #4]
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	f104 060b 	add.w	r6, r4, #11
 800a2aa:	f000 f829 	bl	800a300 <__malloc_unlock>
 800a2ae:	f026 0607 	bic.w	r6, r6, #7
 800a2b2:	1d23      	adds	r3, r4, #4
 800a2b4:	1af2      	subs	r2, r6, r3
 800a2b6:	d0ae      	beq.n	800a216 <_malloc_r+0x22>
 800a2b8:	1b9b      	subs	r3, r3, r6
 800a2ba:	50a3      	str	r3, [r4, r2]
 800a2bc:	e7ab      	b.n	800a216 <_malloc_r+0x22>
 800a2be:	42a3      	cmp	r3, r4
 800a2c0:	6862      	ldr	r2, [r4, #4]
 800a2c2:	d1dd      	bne.n	800a280 <_malloc_r+0x8c>
 800a2c4:	f8c8 2000 	str.w	r2, [r8]
 800a2c8:	e7ec      	b.n	800a2a4 <_malloc_r+0xb0>
 800a2ca:	4623      	mov	r3, r4
 800a2cc:	6864      	ldr	r4, [r4, #4]
 800a2ce:	e7ac      	b.n	800a22a <_malloc_r+0x36>
 800a2d0:	4634      	mov	r4, r6
 800a2d2:	6876      	ldr	r6, [r6, #4]
 800a2d4:	e7b4      	b.n	800a240 <_malloc_r+0x4c>
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	e7cc      	b.n	800a274 <_malloc_r+0x80>
 800a2da:	230c      	movs	r3, #12
 800a2dc:	603b      	str	r3, [r7, #0]
 800a2de:	4638      	mov	r0, r7
 800a2e0:	f000 f80e 	bl	800a300 <__malloc_unlock>
 800a2e4:	e797      	b.n	800a216 <_malloc_r+0x22>
 800a2e6:	6025      	str	r5, [r4, #0]
 800a2e8:	e7dc      	b.n	800a2a4 <_malloc_r+0xb0>
 800a2ea:	605b      	str	r3, [r3, #4]
 800a2ec:	deff      	udf	#255	; 0xff
 800a2ee:	bf00      	nop
 800a2f0:	20000b6c 	.word	0x20000b6c

0800a2f4 <__malloc_lock>:
 800a2f4:	4801      	ldr	r0, [pc, #4]	; (800a2fc <__malloc_lock+0x8>)
 800a2f6:	f000 b87f 	b.w	800a3f8 <__retarget_lock_acquire_recursive>
 800a2fa:	bf00      	nop
 800a2fc:	20000cb0 	.word	0x20000cb0

0800a300 <__malloc_unlock>:
 800a300:	4801      	ldr	r0, [pc, #4]	; (800a308 <__malloc_unlock+0x8>)
 800a302:	f000 b87a 	b.w	800a3fa <__retarget_lock_release_recursive>
 800a306:	bf00      	nop
 800a308:	20000cb0 	.word	0x20000cb0

0800a30c <sniprintf>:
 800a30c:	b40c      	push	{r2, r3}
 800a30e:	b530      	push	{r4, r5, lr}
 800a310:	4b17      	ldr	r3, [pc, #92]	; (800a370 <sniprintf+0x64>)
 800a312:	1e0c      	subs	r4, r1, #0
 800a314:	681d      	ldr	r5, [r3, #0]
 800a316:	b09d      	sub	sp, #116	; 0x74
 800a318:	da08      	bge.n	800a32c <sniprintf+0x20>
 800a31a:	238b      	movs	r3, #139	; 0x8b
 800a31c:	602b      	str	r3, [r5, #0]
 800a31e:	f04f 30ff 	mov.w	r0, #4294967295
 800a322:	b01d      	add	sp, #116	; 0x74
 800a324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a328:	b002      	add	sp, #8
 800a32a:	4770      	bx	lr
 800a32c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a330:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a334:	bf14      	ite	ne
 800a336:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a33a:	4623      	moveq	r3, r4
 800a33c:	9304      	str	r3, [sp, #16]
 800a33e:	9307      	str	r3, [sp, #28]
 800a340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a344:	9002      	str	r0, [sp, #8]
 800a346:	9006      	str	r0, [sp, #24]
 800a348:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a34c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a34e:	ab21      	add	r3, sp, #132	; 0x84
 800a350:	a902      	add	r1, sp, #8
 800a352:	4628      	mov	r0, r5
 800a354:	9301      	str	r3, [sp, #4]
 800a356:	f000 f8f7 	bl	800a548 <_svfiprintf_r>
 800a35a:	1c43      	adds	r3, r0, #1
 800a35c:	bfbc      	itt	lt
 800a35e:	238b      	movlt	r3, #139	; 0x8b
 800a360:	602b      	strlt	r3, [r5, #0]
 800a362:	2c00      	cmp	r4, #0
 800a364:	d0dd      	beq.n	800a322 <sniprintf+0x16>
 800a366:	9b02      	ldr	r3, [sp, #8]
 800a368:	2200      	movs	r2, #0
 800a36a:	701a      	strb	r2, [r3, #0]
 800a36c:	e7d9      	b.n	800a322 <sniprintf+0x16>
 800a36e:	bf00      	nop
 800a370:	200000d4 	.word	0x200000d4

0800a374 <memset>:
 800a374:	4402      	add	r2, r0
 800a376:	4603      	mov	r3, r0
 800a378:	4293      	cmp	r3, r2
 800a37a:	d100      	bne.n	800a37e <memset+0xa>
 800a37c:	4770      	bx	lr
 800a37e:	f803 1b01 	strb.w	r1, [r3], #1
 800a382:	e7f9      	b.n	800a378 <memset+0x4>

0800a384 <_sbrk_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4d06      	ldr	r5, [pc, #24]	; (800a3a0 <_sbrk_r+0x1c>)
 800a388:	2300      	movs	r3, #0
 800a38a:	4604      	mov	r4, r0
 800a38c:	4608      	mov	r0, r1
 800a38e:	602b      	str	r3, [r5, #0]
 800a390:	f7f9 fae4 	bl	800395c <_sbrk>
 800a394:	1c43      	adds	r3, r0, #1
 800a396:	d102      	bne.n	800a39e <_sbrk_r+0x1a>
 800a398:	682b      	ldr	r3, [r5, #0]
 800a39a:	b103      	cbz	r3, 800a39e <_sbrk_r+0x1a>
 800a39c:	6023      	str	r3, [r4, #0]
 800a39e:	bd38      	pop	{r3, r4, r5, pc}
 800a3a0:	20000cac 	.word	0x20000cac

0800a3a4 <__errno>:
 800a3a4:	4b01      	ldr	r3, [pc, #4]	; (800a3ac <__errno+0x8>)
 800a3a6:	6818      	ldr	r0, [r3, #0]
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	200000d4 	.word	0x200000d4

0800a3b0 <__libc_init_array>:
 800a3b0:	b570      	push	{r4, r5, r6, lr}
 800a3b2:	4d0d      	ldr	r5, [pc, #52]	; (800a3e8 <__libc_init_array+0x38>)
 800a3b4:	4c0d      	ldr	r4, [pc, #52]	; (800a3ec <__libc_init_array+0x3c>)
 800a3b6:	1b64      	subs	r4, r4, r5
 800a3b8:	10a4      	asrs	r4, r4, #2
 800a3ba:	2600      	movs	r6, #0
 800a3bc:	42a6      	cmp	r6, r4
 800a3be:	d109      	bne.n	800a3d4 <__libc_init_array+0x24>
 800a3c0:	4d0b      	ldr	r5, [pc, #44]	; (800a3f0 <__libc_init_array+0x40>)
 800a3c2:	4c0c      	ldr	r4, [pc, #48]	; (800a3f4 <__libc_init_array+0x44>)
 800a3c4:	f000 fd24 	bl	800ae10 <_init>
 800a3c8:	1b64      	subs	r4, r4, r5
 800a3ca:	10a4      	asrs	r4, r4, #2
 800a3cc:	2600      	movs	r6, #0
 800a3ce:	42a6      	cmp	r6, r4
 800a3d0:	d105      	bne.n	800a3de <__libc_init_array+0x2e>
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}
 800a3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3d8:	4798      	blx	r3
 800a3da:	3601      	adds	r6, #1
 800a3dc:	e7ee      	b.n	800a3bc <__libc_init_array+0xc>
 800a3de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3e2:	4798      	blx	r3
 800a3e4:	3601      	adds	r6, #1
 800a3e6:	e7f2      	b.n	800a3ce <__libc_init_array+0x1e>
 800a3e8:	0800aef4 	.word	0x0800aef4
 800a3ec:	0800aef4 	.word	0x0800aef4
 800a3f0:	0800aef4 	.word	0x0800aef4
 800a3f4:	0800aef8 	.word	0x0800aef8

0800a3f8 <__retarget_lock_acquire_recursive>:
 800a3f8:	4770      	bx	lr

0800a3fa <__retarget_lock_release_recursive>:
 800a3fa:	4770      	bx	lr

0800a3fc <_free_r>:
 800a3fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3fe:	2900      	cmp	r1, #0
 800a400:	d044      	beq.n	800a48c <_free_r+0x90>
 800a402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a406:	9001      	str	r0, [sp, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f1a1 0404 	sub.w	r4, r1, #4
 800a40e:	bfb8      	it	lt
 800a410:	18e4      	addlt	r4, r4, r3
 800a412:	f7ff ff6f 	bl	800a2f4 <__malloc_lock>
 800a416:	4a1e      	ldr	r2, [pc, #120]	; (800a490 <_free_r+0x94>)
 800a418:	9801      	ldr	r0, [sp, #4]
 800a41a:	6813      	ldr	r3, [r2, #0]
 800a41c:	b933      	cbnz	r3, 800a42c <_free_r+0x30>
 800a41e:	6063      	str	r3, [r4, #4]
 800a420:	6014      	str	r4, [r2, #0]
 800a422:	b003      	add	sp, #12
 800a424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a428:	f7ff bf6a 	b.w	800a300 <__malloc_unlock>
 800a42c:	42a3      	cmp	r3, r4
 800a42e:	d908      	bls.n	800a442 <_free_r+0x46>
 800a430:	6825      	ldr	r5, [r4, #0]
 800a432:	1961      	adds	r1, r4, r5
 800a434:	428b      	cmp	r3, r1
 800a436:	bf01      	itttt	eq
 800a438:	6819      	ldreq	r1, [r3, #0]
 800a43a:	685b      	ldreq	r3, [r3, #4]
 800a43c:	1949      	addeq	r1, r1, r5
 800a43e:	6021      	streq	r1, [r4, #0]
 800a440:	e7ed      	b.n	800a41e <_free_r+0x22>
 800a442:	461a      	mov	r2, r3
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	b10b      	cbz	r3, 800a44c <_free_r+0x50>
 800a448:	42a3      	cmp	r3, r4
 800a44a:	d9fa      	bls.n	800a442 <_free_r+0x46>
 800a44c:	6811      	ldr	r1, [r2, #0]
 800a44e:	1855      	adds	r5, r2, r1
 800a450:	42a5      	cmp	r5, r4
 800a452:	d10b      	bne.n	800a46c <_free_r+0x70>
 800a454:	6824      	ldr	r4, [r4, #0]
 800a456:	4421      	add	r1, r4
 800a458:	1854      	adds	r4, r2, r1
 800a45a:	42a3      	cmp	r3, r4
 800a45c:	6011      	str	r1, [r2, #0]
 800a45e:	d1e0      	bne.n	800a422 <_free_r+0x26>
 800a460:	681c      	ldr	r4, [r3, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	6053      	str	r3, [r2, #4]
 800a466:	440c      	add	r4, r1
 800a468:	6014      	str	r4, [r2, #0]
 800a46a:	e7da      	b.n	800a422 <_free_r+0x26>
 800a46c:	d902      	bls.n	800a474 <_free_r+0x78>
 800a46e:	230c      	movs	r3, #12
 800a470:	6003      	str	r3, [r0, #0]
 800a472:	e7d6      	b.n	800a422 <_free_r+0x26>
 800a474:	6825      	ldr	r5, [r4, #0]
 800a476:	1961      	adds	r1, r4, r5
 800a478:	428b      	cmp	r3, r1
 800a47a:	bf04      	itt	eq
 800a47c:	6819      	ldreq	r1, [r3, #0]
 800a47e:	685b      	ldreq	r3, [r3, #4]
 800a480:	6063      	str	r3, [r4, #4]
 800a482:	bf04      	itt	eq
 800a484:	1949      	addeq	r1, r1, r5
 800a486:	6021      	streq	r1, [r4, #0]
 800a488:	6054      	str	r4, [r2, #4]
 800a48a:	e7ca      	b.n	800a422 <_free_r+0x26>
 800a48c:	b003      	add	sp, #12
 800a48e:	bd30      	pop	{r4, r5, pc}
 800a490:	20000b6c 	.word	0x20000b6c

0800a494 <__ssputs_r>:
 800a494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a498:	688e      	ldr	r6, [r1, #8]
 800a49a:	461f      	mov	r7, r3
 800a49c:	42be      	cmp	r6, r7
 800a49e:	680b      	ldr	r3, [r1, #0]
 800a4a0:	4682      	mov	sl, r0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	4690      	mov	r8, r2
 800a4a6:	d82c      	bhi.n	800a502 <__ssputs_r+0x6e>
 800a4a8:	898a      	ldrh	r2, [r1, #12]
 800a4aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4ae:	d026      	beq.n	800a4fe <__ssputs_r+0x6a>
 800a4b0:	6965      	ldr	r5, [r4, #20]
 800a4b2:	6909      	ldr	r1, [r1, #16]
 800a4b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4b8:	eba3 0901 	sub.w	r9, r3, r1
 800a4bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4c0:	1c7b      	adds	r3, r7, #1
 800a4c2:	444b      	add	r3, r9
 800a4c4:	106d      	asrs	r5, r5, #1
 800a4c6:	429d      	cmp	r5, r3
 800a4c8:	bf38      	it	cc
 800a4ca:	461d      	movcc	r5, r3
 800a4cc:	0553      	lsls	r3, r2, #21
 800a4ce:	d527      	bpl.n	800a520 <__ssputs_r+0x8c>
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	f7ff fe8f 	bl	800a1f4 <_malloc_r>
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	b360      	cbz	r0, 800a534 <__ssputs_r+0xa0>
 800a4da:	6921      	ldr	r1, [r4, #16]
 800a4dc:	464a      	mov	r2, r9
 800a4de:	f000 fadb 	bl	800aa98 <memcpy>
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ec:	81a3      	strh	r3, [r4, #12]
 800a4ee:	6126      	str	r6, [r4, #16]
 800a4f0:	6165      	str	r5, [r4, #20]
 800a4f2:	444e      	add	r6, r9
 800a4f4:	eba5 0509 	sub.w	r5, r5, r9
 800a4f8:	6026      	str	r6, [r4, #0]
 800a4fa:	60a5      	str	r5, [r4, #8]
 800a4fc:	463e      	mov	r6, r7
 800a4fe:	42be      	cmp	r6, r7
 800a500:	d900      	bls.n	800a504 <__ssputs_r+0x70>
 800a502:	463e      	mov	r6, r7
 800a504:	6820      	ldr	r0, [r4, #0]
 800a506:	4632      	mov	r2, r6
 800a508:	4641      	mov	r1, r8
 800a50a:	f000 faab 	bl	800aa64 <memmove>
 800a50e:	68a3      	ldr	r3, [r4, #8]
 800a510:	1b9b      	subs	r3, r3, r6
 800a512:	60a3      	str	r3, [r4, #8]
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	4433      	add	r3, r6
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	2000      	movs	r0, #0
 800a51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a520:	462a      	mov	r2, r5
 800a522:	f000 fac7 	bl	800aab4 <_realloc_r>
 800a526:	4606      	mov	r6, r0
 800a528:	2800      	cmp	r0, #0
 800a52a:	d1e0      	bne.n	800a4ee <__ssputs_r+0x5a>
 800a52c:	6921      	ldr	r1, [r4, #16]
 800a52e:	4650      	mov	r0, sl
 800a530:	f7ff ff64 	bl	800a3fc <_free_r>
 800a534:	230c      	movs	r3, #12
 800a536:	f8ca 3000 	str.w	r3, [sl]
 800a53a:	89a3      	ldrh	r3, [r4, #12]
 800a53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a540:	81a3      	strh	r3, [r4, #12]
 800a542:	f04f 30ff 	mov.w	r0, #4294967295
 800a546:	e7e9      	b.n	800a51c <__ssputs_r+0x88>

0800a548 <_svfiprintf_r>:
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	4698      	mov	r8, r3
 800a54e:	898b      	ldrh	r3, [r1, #12]
 800a550:	061b      	lsls	r3, r3, #24
 800a552:	b09d      	sub	sp, #116	; 0x74
 800a554:	4607      	mov	r7, r0
 800a556:	460d      	mov	r5, r1
 800a558:	4614      	mov	r4, r2
 800a55a:	d50e      	bpl.n	800a57a <_svfiprintf_r+0x32>
 800a55c:	690b      	ldr	r3, [r1, #16]
 800a55e:	b963      	cbnz	r3, 800a57a <_svfiprintf_r+0x32>
 800a560:	2140      	movs	r1, #64	; 0x40
 800a562:	f7ff fe47 	bl	800a1f4 <_malloc_r>
 800a566:	6028      	str	r0, [r5, #0]
 800a568:	6128      	str	r0, [r5, #16]
 800a56a:	b920      	cbnz	r0, 800a576 <_svfiprintf_r+0x2e>
 800a56c:	230c      	movs	r3, #12
 800a56e:	603b      	str	r3, [r7, #0]
 800a570:	f04f 30ff 	mov.w	r0, #4294967295
 800a574:	e0d0      	b.n	800a718 <_svfiprintf_r+0x1d0>
 800a576:	2340      	movs	r3, #64	; 0x40
 800a578:	616b      	str	r3, [r5, #20]
 800a57a:	2300      	movs	r3, #0
 800a57c:	9309      	str	r3, [sp, #36]	; 0x24
 800a57e:	2320      	movs	r3, #32
 800a580:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a584:	f8cd 800c 	str.w	r8, [sp, #12]
 800a588:	2330      	movs	r3, #48	; 0x30
 800a58a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a730 <_svfiprintf_r+0x1e8>
 800a58e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a592:	f04f 0901 	mov.w	r9, #1
 800a596:	4623      	mov	r3, r4
 800a598:	469a      	mov	sl, r3
 800a59a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a59e:	b10a      	cbz	r2, 800a5a4 <_svfiprintf_r+0x5c>
 800a5a0:	2a25      	cmp	r2, #37	; 0x25
 800a5a2:	d1f9      	bne.n	800a598 <_svfiprintf_r+0x50>
 800a5a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a5a8:	d00b      	beq.n	800a5c2 <_svfiprintf_r+0x7a>
 800a5aa:	465b      	mov	r3, fp
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	f7ff ff6f 	bl	800a494 <__ssputs_r>
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	f000 80a9 	beq.w	800a70e <_svfiprintf_r+0x1c6>
 800a5bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5be:	445a      	add	r2, fp
 800a5c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a5c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 80a1 	beq.w	800a70e <_svfiprintf_r+0x1c6>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5d6:	f10a 0a01 	add.w	sl, sl, #1
 800a5da:	9304      	str	r3, [sp, #16]
 800a5dc:	9307      	str	r3, [sp, #28]
 800a5de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a5e4:	4654      	mov	r4, sl
 800a5e6:	2205      	movs	r2, #5
 800a5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ec:	4850      	ldr	r0, [pc, #320]	; (800a730 <_svfiprintf_r+0x1e8>)
 800a5ee:	f7f5 fdf7 	bl	80001e0 <memchr>
 800a5f2:	9a04      	ldr	r2, [sp, #16]
 800a5f4:	b9d8      	cbnz	r0, 800a62e <_svfiprintf_r+0xe6>
 800a5f6:	06d0      	lsls	r0, r2, #27
 800a5f8:	bf44      	itt	mi
 800a5fa:	2320      	movmi	r3, #32
 800a5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a600:	0711      	lsls	r1, r2, #28
 800a602:	bf44      	itt	mi
 800a604:	232b      	movmi	r3, #43	; 0x2b
 800a606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a60a:	f89a 3000 	ldrb.w	r3, [sl]
 800a60e:	2b2a      	cmp	r3, #42	; 0x2a
 800a610:	d015      	beq.n	800a63e <_svfiprintf_r+0xf6>
 800a612:	9a07      	ldr	r2, [sp, #28]
 800a614:	4654      	mov	r4, sl
 800a616:	2000      	movs	r0, #0
 800a618:	f04f 0c0a 	mov.w	ip, #10
 800a61c:	4621      	mov	r1, r4
 800a61e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a622:	3b30      	subs	r3, #48	; 0x30
 800a624:	2b09      	cmp	r3, #9
 800a626:	d94d      	bls.n	800a6c4 <_svfiprintf_r+0x17c>
 800a628:	b1b0      	cbz	r0, 800a658 <_svfiprintf_r+0x110>
 800a62a:	9207      	str	r2, [sp, #28]
 800a62c:	e014      	b.n	800a658 <_svfiprintf_r+0x110>
 800a62e:	eba0 0308 	sub.w	r3, r0, r8
 800a632:	fa09 f303 	lsl.w	r3, r9, r3
 800a636:	4313      	orrs	r3, r2
 800a638:	9304      	str	r3, [sp, #16]
 800a63a:	46a2      	mov	sl, r4
 800a63c:	e7d2      	b.n	800a5e4 <_svfiprintf_r+0x9c>
 800a63e:	9b03      	ldr	r3, [sp, #12]
 800a640:	1d19      	adds	r1, r3, #4
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	9103      	str	r1, [sp, #12]
 800a646:	2b00      	cmp	r3, #0
 800a648:	bfbb      	ittet	lt
 800a64a:	425b      	neglt	r3, r3
 800a64c:	f042 0202 	orrlt.w	r2, r2, #2
 800a650:	9307      	strge	r3, [sp, #28]
 800a652:	9307      	strlt	r3, [sp, #28]
 800a654:	bfb8      	it	lt
 800a656:	9204      	strlt	r2, [sp, #16]
 800a658:	7823      	ldrb	r3, [r4, #0]
 800a65a:	2b2e      	cmp	r3, #46	; 0x2e
 800a65c:	d10c      	bne.n	800a678 <_svfiprintf_r+0x130>
 800a65e:	7863      	ldrb	r3, [r4, #1]
 800a660:	2b2a      	cmp	r3, #42	; 0x2a
 800a662:	d134      	bne.n	800a6ce <_svfiprintf_r+0x186>
 800a664:	9b03      	ldr	r3, [sp, #12]
 800a666:	1d1a      	adds	r2, r3, #4
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	9203      	str	r2, [sp, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	bfb8      	it	lt
 800a670:	f04f 33ff 	movlt.w	r3, #4294967295
 800a674:	3402      	adds	r4, #2
 800a676:	9305      	str	r3, [sp, #20]
 800a678:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a740 <_svfiprintf_r+0x1f8>
 800a67c:	7821      	ldrb	r1, [r4, #0]
 800a67e:	2203      	movs	r2, #3
 800a680:	4650      	mov	r0, sl
 800a682:	f7f5 fdad 	bl	80001e0 <memchr>
 800a686:	b138      	cbz	r0, 800a698 <_svfiprintf_r+0x150>
 800a688:	9b04      	ldr	r3, [sp, #16]
 800a68a:	eba0 000a 	sub.w	r0, r0, sl
 800a68e:	2240      	movs	r2, #64	; 0x40
 800a690:	4082      	lsls	r2, r0
 800a692:	4313      	orrs	r3, r2
 800a694:	3401      	adds	r4, #1
 800a696:	9304      	str	r3, [sp, #16]
 800a698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69c:	4825      	ldr	r0, [pc, #148]	; (800a734 <_svfiprintf_r+0x1ec>)
 800a69e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6a2:	2206      	movs	r2, #6
 800a6a4:	f7f5 fd9c 	bl	80001e0 <memchr>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d038      	beq.n	800a71e <_svfiprintf_r+0x1d6>
 800a6ac:	4b22      	ldr	r3, [pc, #136]	; (800a738 <_svfiprintf_r+0x1f0>)
 800a6ae:	bb1b      	cbnz	r3, 800a6f8 <_svfiprintf_r+0x1b0>
 800a6b0:	9b03      	ldr	r3, [sp, #12]
 800a6b2:	3307      	adds	r3, #7
 800a6b4:	f023 0307 	bic.w	r3, r3, #7
 800a6b8:	3308      	adds	r3, #8
 800a6ba:	9303      	str	r3, [sp, #12]
 800a6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6be:	4433      	add	r3, r6
 800a6c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c2:	e768      	b.n	800a596 <_svfiprintf_r+0x4e>
 800a6c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6c8:	460c      	mov	r4, r1
 800a6ca:	2001      	movs	r0, #1
 800a6cc:	e7a6      	b.n	800a61c <_svfiprintf_r+0xd4>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	3401      	adds	r4, #1
 800a6d2:	9305      	str	r3, [sp, #20]
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	f04f 0c0a 	mov.w	ip, #10
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6e0:	3a30      	subs	r2, #48	; 0x30
 800a6e2:	2a09      	cmp	r2, #9
 800a6e4:	d903      	bls.n	800a6ee <_svfiprintf_r+0x1a6>
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d0c6      	beq.n	800a678 <_svfiprintf_r+0x130>
 800a6ea:	9105      	str	r1, [sp, #20]
 800a6ec:	e7c4      	b.n	800a678 <_svfiprintf_r+0x130>
 800a6ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e7f0      	b.n	800a6da <_svfiprintf_r+0x192>
 800a6f8:	ab03      	add	r3, sp, #12
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	462a      	mov	r2, r5
 800a6fe:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <_svfiprintf_r+0x1f4>)
 800a700:	a904      	add	r1, sp, #16
 800a702:	4638      	mov	r0, r7
 800a704:	f3af 8000 	nop.w
 800a708:	1c42      	adds	r2, r0, #1
 800a70a:	4606      	mov	r6, r0
 800a70c:	d1d6      	bne.n	800a6bc <_svfiprintf_r+0x174>
 800a70e:	89ab      	ldrh	r3, [r5, #12]
 800a710:	065b      	lsls	r3, r3, #25
 800a712:	f53f af2d 	bmi.w	800a570 <_svfiprintf_r+0x28>
 800a716:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a718:	b01d      	add	sp, #116	; 0x74
 800a71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71e:	ab03      	add	r3, sp, #12
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	462a      	mov	r2, r5
 800a724:	4b05      	ldr	r3, [pc, #20]	; (800a73c <_svfiprintf_r+0x1f4>)
 800a726:	a904      	add	r1, sp, #16
 800a728:	4638      	mov	r0, r7
 800a72a:	f000 f879 	bl	800a820 <_printf_i>
 800a72e:	e7eb      	b.n	800a708 <_svfiprintf_r+0x1c0>
 800a730:	0800aea0 	.word	0x0800aea0
 800a734:	0800aeaa 	.word	0x0800aeaa
 800a738:	00000000 	.word	0x00000000
 800a73c:	0800a495 	.word	0x0800a495
 800a740:	0800aea6 	.word	0x0800aea6

0800a744 <_printf_common>:
 800a744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a748:	4616      	mov	r6, r2
 800a74a:	4699      	mov	r9, r3
 800a74c:	688a      	ldr	r2, [r1, #8]
 800a74e:	690b      	ldr	r3, [r1, #16]
 800a750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a754:	4293      	cmp	r3, r2
 800a756:	bfb8      	it	lt
 800a758:	4613      	movlt	r3, r2
 800a75a:	6033      	str	r3, [r6, #0]
 800a75c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a760:	4607      	mov	r7, r0
 800a762:	460c      	mov	r4, r1
 800a764:	b10a      	cbz	r2, 800a76a <_printf_common+0x26>
 800a766:	3301      	adds	r3, #1
 800a768:	6033      	str	r3, [r6, #0]
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	0699      	lsls	r1, r3, #26
 800a76e:	bf42      	ittt	mi
 800a770:	6833      	ldrmi	r3, [r6, #0]
 800a772:	3302      	addmi	r3, #2
 800a774:	6033      	strmi	r3, [r6, #0]
 800a776:	6825      	ldr	r5, [r4, #0]
 800a778:	f015 0506 	ands.w	r5, r5, #6
 800a77c:	d106      	bne.n	800a78c <_printf_common+0x48>
 800a77e:	f104 0a19 	add.w	sl, r4, #25
 800a782:	68e3      	ldr	r3, [r4, #12]
 800a784:	6832      	ldr	r2, [r6, #0]
 800a786:	1a9b      	subs	r3, r3, r2
 800a788:	42ab      	cmp	r3, r5
 800a78a:	dc26      	bgt.n	800a7da <_printf_common+0x96>
 800a78c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a790:	1e13      	subs	r3, r2, #0
 800a792:	6822      	ldr	r2, [r4, #0]
 800a794:	bf18      	it	ne
 800a796:	2301      	movne	r3, #1
 800a798:	0692      	lsls	r2, r2, #26
 800a79a:	d42b      	bmi.n	800a7f4 <_printf_common+0xb0>
 800a79c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	4638      	mov	r0, r7
 800a7a4:	47c0      	blx	r8
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	d01e      	beq.n	800a7e8 <_printf_common+0xa4>
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	6922      	ldr	r2, [r4, #16]
 800a7ae:	f003 0306 	and.w	r3, r3, #6
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	bf02      	ittt	eq
 800a7b6:	68e5      	ldreq	r5, [r4, #12]
 800a7b8:	6833      	ldreq	r3, [r6, #0]
 800a7ba:	1aed      	subeq	r5, r5, r3
 800a7bc:	68a3      	ldr	r3, [r4, #8]
 800a7be:	bf0c      	ite	eq
 800a7c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7c4:	2500      	movne	r5, #0
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	bfc4      	itt	gt
 800a7ca:	1a9b      	subgt	r3, r3, r2
 800a7cc:	18ed      	addgt	r5, r5, r3
 800a7ce:	2600      	movs	r6, #0
 800a7d0:	341a      	adds	r4, #26
 800a7d2:	42b5      	cmp	r5, r6
 800a7d4:	d11a      	bne.n	800a80c <_printf_common+0xc8>
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	e008      	b.n	800a7ec <_printf_common+0xa8>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4652      	mov	r2, sl
 800a7de:	4649      	mov	r1, r9
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	47c0      	blx	r8
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	d103      	bne.n	800a7f0 <_printf_common+0xac>
 800a7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f0:	3501      	adds	r5, #1
 800a7f2:	e7c6      	b.n	800a782 <_printf_common+0x3e>
 800a7f4:	18e1      	adds	r1, r4, r3
 800a7f6:	1c5a      	adds	r2, r3, #1
 800a7f8:	2030      	movs	r0, #48	; 0x30
 800a7fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7fe:	4422      	add	r2, r4
 800a800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a808:	3302      	adds	r3, #2
 800a80a:	e7c7      	b.n	800a79c <_printf_common+0x58>
 800a80c:	2301      	movs	r3, #1
 800a80e:	4622      	mov	r2, r4
 800a810:	4649      	mov	r1, r9
 800a812:	4638      	mov	r0, r7
 800a814:	47c0      	blx	r8
 800a816:	3001      	adds	r0, #1
 800a818:	d0e6      	beq.n	800a7e8 <_printf_common+0xa4>
 800a81a:	3601      	adds	r6, #1
 800a81c:	e7d9      	b.n	800a7d2 <_printf_common+0x8e>
	...

0800a820 <_printf_i>:
 800a820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a824:	7e0f      	ldrb	r7, [r1, #24]
 800a826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a828:	2f78      	cmp	r7, #120	; 0x78
 800a82a:	4691      	mov	r9, r2
 800a82c:	4680      	mov	r8, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	469a      	mov	sl, r3
 800a832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a836:	d807      	bhi.n	800a848 <_printf_i+0x28>
 800a838:	2f62      	cmp	r7, #98	; 0x62
 800a83a:	d80a      	bhi.n	800a852 <_printf_i+0x32>
 800a83c:	2f00      	cmp	r7, #0
 800a83e:	f000 80d4 	beq.w	800a9ea <_printf_i+0x1ca>
 800a842:	2f58      	cmp	r7, #88	; 0x58
 800a844:	f000 80c0 	beq.w	800a9c8 <_printf_i+0x1a8>
 800a848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a84c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a850:	e03a      	b.n	800a8c8 <_printf_i+0xa8>
 800a852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a856:	2b15      	cmp	r3, #21
 800a858:	d8f6      	bhi.n	800a848 <_printf_i+0x28>
 800a85a:	a101      	add	r1, pc, #4	; (adr r1, 800a860 <_printf_i+0x40>)
 800a85c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a860:	0800a8b9 	.word	0x0800a8b9
 800a864:	0800a8cd 	.word	0x0800a8cd
 800a868:	0800a849 	.word	0x0800a849
 800a86c:	0800a849 	.word	0x0800a849
 800a870:	0800a849 	.word	0x0800a849
 800a874:	0800a849 	.word	0x0800a849
 800a878:	0800a8cd 	.word	0x0800a8cd
 800a87c:	0800a849 	.word	0x0800a849
 800a880:	0800a849 	.word	0x0800a849
 800a884:	0800a849 	.word	0x0800a849
 800a888:	0800a849 	.word	0x0800a849
 800a88c:	0800a9d1 	.word	0x0800a9d1
 800a890:	0800a8f9 	.word	0x0800a8f9
 800a894:	0800a98b 	.word	0x0800a98b
 800a898:	0800a849 	.word	0x0800a849
 800a89c:	0800a849 	.word	0x0800a849
 800a8a0:	0800a9f3 	.word	0x0800a9f3
 800a8a4:	0800a849 	.word	0x0800a849
 800a8a8:	0800a8f9 	.word	0x0800a8f9
 800a8ac:	0800a849 	.word	0x0800a849
 800a8b0:	0800a849 	.word	0x0800a849
 800a8b4:	0800a993 	.word	0x0800a993
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	1d1a      	adds	r2, r3, #4
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	602a      	str	r2, [r5, #0]
 800a8c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e09f      	b.n	800aa0c <_printf_i+0x1ec>
 800a8cc:	6820      	ldr	r0, [r4, #0]
 800a8ce:	682b      	ldr	r3, [r5, #0]
 800a8d0:	0607      	lsls	r7, r0, #24
 800a8d2:	f103 0104 	add.w	r1, r3, #4
 800a8d6:	6029      	str	r1, [r5, #0]
 800a8d8:	d501      	bpl.n	800a8de <_printf_i+0xbe>
 800a8da:	681e      	ldr	r6, [r3, #0]
 800a8dc:	e003      	b.n	800a8e6 <_printf_i+0xc6>
 800a8de:	0646      	lsls	r6, r0, #25
 800a8e0:	d5fb      	bpl.n	800a8da <_printf_i+0xba>
 800a8e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a8e6:	2e00      	cmp	r6, #0
 800a8e8:	da03      	bge.n	800a8f2 <_printf_i+0xd2>
 800a8ea:	232d      	movs	r3, #45	; 0x2d
 800a8ec:	4276      	negs	r6, r6
 800a8ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8f2:	485a      	ldr	r0, [pc, #360]	; (800aa5c <_printf_i+0x23c>)
 800a8f4:	230a      	movs	r3, #10
 800a8f6:	e012      	b.n	800a91e <_printf_i+0xfe>
 800a8f8:	682b      	ldr	r3, [r5, #0]
 800a8fa:	6820      	ldr	r0, [r4, #0]
 800a8fc:	1d19      	adds	r1, r3, #4
 800a8fe:	6029      	str	r1, [r5, #0]
 800a900:	0605      	lsls	r5, r0, #24
 800a902:	d501      	bpl.n	800a908 <_printf_i+0xe8>
 800a904:	681e      	ldr	r6, [r3, #0]
 800a906:	e002      	b.n	800a90e <_printf_i+0xee>
 800a908:	0641      	lsls	r1, r0, #25
 800a90a:	d5fb      	bpl.n	800a904 <_printf_i+0xe4>
 800a90c:	881e      	ldrh	r6, [r3, #0]
 800a90e:	4853      	ldr	r0, [pc, #332]	; (800aa5c <_printf_i+0x23c>)
 800a910:	2f6f      	cmp	r7, #111	; 0x6f
 800a912:	bf0c      	ite	eq
 800a914:	2308      	moveq	r3, #8
 800a916:	230a      	movne	r3, #10
 800a918:	2100      	movs	r1, #0
 800a91a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a91e:	6865      	ldr	r5, [r4, #4]
 800a920:	60a5      	str	r5, [r4, #8]
 800a922:	2d00      	cmp	r5, #0
 800a924:	bfa2      	ittt	ge
 800a926:	6821      	ldrge	r1, [r4, #0]
 800a928:	f021 0104 	bicge.w	r1, r1, #4
 800a92c:	6021      	strge	r1, [r4, #0]
 800a92e:	b90e      	cbnz	r6, 800a934 <_printf_i+0x114>
 800a930:	2d00      	cmp	r5, #0
 800a932:	d04b      	beq.n	800a9cc <_printf_i+0x1ac>
 800a934:	4615      	mov	r5, r2
 800a936:	fbb6 f1f3 	udiv	r1, r6, r3
 800a93a:	fb03 6711 	mls	r7, r3, r1, r6
 800a93e:	5dc7      	ldrb	r7, [r0, r7]
 800a940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a944:	4637      	mov	r7, r6
 800a946:	42bb      	cmp	r3, r7
 800a948:	460e      	mov	r6, r1
 800a94a:	d9f4      	bls.n	800a936 <_printf_i+0x116>
 800a94c:	2b08      	cmp	r3, #8
 800a94e:	d10b      	bne.n	800a968 <_printf_i+0x148>
 800a950:	6823      	ldr	r3, [r4, #0]
 800a952:	07de      	lsls	r6, r3, #31
 800a954:	d508      	bpl.n	800a968 <_printf_i+0x148>
 800a956:	6923      	ldr	r3, [r4, #16]
 800a958:	6861      	ldr	r1, [r4, #4]
 800a95a:	4299      	cmp	r1, r3
 800a95c:	bfde      	ittt	le
 800a95e:	2330      	movle	r3, #48	; 0x30
 800a960:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a964:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a968:	1b52      	subs	r2, r2, r5
 800a96a:	6122      	str	r2, [r4, #16]
 800a96c:	f8cd a000 	str.w	sl, [sp]
 800a970:	464b      	mov	r3, r9
 800a972:	aa03      	add	r2, sp, #12
 800a974:	4621      	mov	r1, r4
 800a976:	4640      	mov	r0, r8
 800a978:	f7ff fee4 	bl	800a744 <_printf_common>
 800a97c:	3001      	adds	r0, #1
 800a97e:	d14a      	bne.n	800aa16 <_printf_i+0x1f6>
 800a980:	f04f 30ff 	mov.w	r0, #4294967295
 800a984:	b004      	add	sp, #16
 800a986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	f043 0320 	orr.w	r3, r3, #32
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	4833      	ldr	r0, [pc, #204]	; (800aa60 <_printf_i+0x240>)
 800a994:	2778      	movs	r7, #120	; 0x78
 800a996:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	6829      	ldr	r1, [r5, #0]
 800a99e:	061f      	lsls	r7, r3, #24
 800a9a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9a4:	d402      	bmi.n	800a9ac <_printf_i+0x18c>
 800a9a6:	065f      	lsls	r7, r3, #25
 800a9a8:	bf48      	it	mi
 800a9aa:	b2b6      	uxthmi	r6, r6
 800a9ac:	07df      	lsls	r7, r3, #31
 800a9ae:	bf48      	it	mi
 800a9b0:	f043 0320 	orrmi.w	r3, r3, #32
 800a9b4:	6029      	str	r1, [r5, #0]
 800a9b6:	bf48      	it	mi
 800a9b8:	6023      	strmi	r3, [r4, #0]
 800a9ba:	b91e      	cbnz	r6, 800a9c4 <_printf_i+0x1a4>
 800a9bc:	6823      	ldr	r3, [r4, #0]
 800a9be:	f023 0320 	bic.w	r3, r3, #32
 800a9c2:	6023      	str	r3, [r4, #0]
 800a9c4:	2310      	movs	r3, #16
 800a9c6:	e7a7      	b.n	800a918 <_printf_i+0xf8>
 800a9c8:	4824      	ldr	r0, [pc, #144]	; (800aa5c <_printf_i+0x23c>)
 800a9ca:	e7e4      	b.n	800a996 <_printf_i+0x176>
 800a9cc:	4615      	mov	r5, r2
 800a9ce:	e7bd      	b.n	800a94c <_printf_i+0x12c>
 800a9d0:	682b      	ldr	r3, [r5, #0]
 800a9d2:	6826      	ldr	r6, [r4, #0]
 800a9d4:	6961      	ldr	r1, [r4, #20]
 800a9d6:	1d18      	adds	r0, r3, #4
 800a9d8:	6028      	str	r0, [r5, #0]
 800a9da:	0635      	lsls	r5, r6, #24
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	d501      	bpl.n	800a9e4 <_printf_i+0x1c4>
 800a9e0:	6019      	str	r1, [r3, #0]
 800a9e2:	e002      	b.n	800a9ea <_printf_i+0x1ca>
 800a9e4:	0670      	lsls	r0, r6, #25
 800a9e6:	d5fb      	bpl.n	800a9e0 <_printf_i+0x1c0>
 800a9e8:	8019      	strh	r1, [r3, #0]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	6123      	str	r3, [r4, #16]
 800a9ee:	4615      	mov	r5, r2
 800a9f0:	e7bc      	b.n	800a96c <_printf_i+0x14c>
 800a9f2:	682b      	ldr	r3, [r5, #0]
 800a9f4:	1d1a      	adds	r2, r3, #4
 800a9f6:	602a      	str	r2, [r5, #0]
 800a9f8:	681d      	ldr	r5, [r3, #0]
 800a9fa:	6862      	ldr	r2, [r4, #4]
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	4628      	mov	r0, r5
 800aa00:	f7f5 fbee 	bl	80001e0 <memchr>
 800aa04:	b108      	cbz	r0, 800aa0a <_printf_i+0x1ea>
 800aa06:	1b40      	subs	r0, r0, r5
 800aa08:	6060      	str	r0, [r4, #4]
 800aa0a:	6863      	ldr	r3, [r4, #4]
 800aa0c:	6123      	str	r3, [r4, #16]
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa14:	e7aa      	b.n	800a96c <_printf_i+0x14c>
 800aa16:	6923      	ldr	r3, [r4, #16]
 800aa18:	462a      	mov	r2, r5
 800aa1a:	4649      	mov	r1, r9
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	47d0      	blx	sl
 800aa20:	3001      	adds	r0, #1
 800aa22:	d0ad      	beq.n	800a980 <_printf_i+0x160>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	079b      	lsls	r3, r3, #30
 800aa28:	d413      	bmi.n	800aa52 <_printf_i+0x232>
 800aa2a:	68e0      	ldr	r0, [r4, #12]
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	4298      	cmp	r0, r3
 800aa30:	bfb8      	it	lt
 800aa32:	4618      	movlt	r0, r3
 800aa34:	e7a6      	b.n	800a984 <_printf_i+0x164>
 800aa36:	2301      	movs	r3, #1
 800aa38:	4632      	mov	r2, r6
 800aa3a:	4649      	mov	r1, r9
 800aa3c:	4640      	mov	r0, r8
 800aa3e:	47d0      	blx	sl
 800aa40:	3001      	adds	r0, #1
 800aa42:	d09d      	beq.n	800a980 <_printf_i+0x160>
 800aa44:	3501      	adds	r5, #1
 800aa46:	68e3      	ldr	r3, [r4, #12]
 800aa48:	9903      	ldr	r1, [sp, #12]
 800aa4a:	1a5b      	subs	r3, r3, r1
 800aa4c:	42ab      	cmp	r3, r5
 800aa4e:	dcf2      	bgt.n	800aa36 <_printf_i+0x216>
 800aa50:	e7eb      	b.n	800aa2a <_printf_i+0x20a>
 800aa52:	2500      	movs	r5, #0
 800aa54:	f104 0619 	add.w	r6, r4, #25
 800aa58:	e7f5      	b.n	800aa46 <_printf_i+0x226>
 800aa5a:	bf00      	nop
 800aa5c:	0800aeb1 	.word	0x0800aeb1
 800aa60:	0800aec2 	.word	0x0800aec2

0800aa64 <memmove>:
 800aa64:	4288      	cmp	r0, r1
 800aa66:	b510      	push	{r4, lr}
 800aa68:	eb01 0402 	add.w	r4, r1, r2
 800aa6c:	d902      	bls.n	800aa74 <memmove+0x10>
 800aa6e:	4284      	cmp	r4, r0
 800aa70:	4623      	mov	r3, r4
 800aa72:	d807      	bhi.n	800aa84 <memmove+0x20>
 800aa74:	1e43      	subs	r3, r0, #1
 800aa76:	42a1      	cmp	r1, r4
 800aa78:	d008      	beq.n	800aa8c <memmove+0x28>
 800aa7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa82:	e7f8      	b.n	800aa76 <memmove+0x12>
 800aa84:	4402      	add	r2, r0
 800aa86:	4601      	mov	r1, r0
 800aa88:	428a      	cmp	r2, r1
 800aa8a:	d100      	bne.n	800aa8e <memmove+0x2a>
 800aa8c:	bd10      	pop	{r4, pc}
 800aa8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa96:	e7f7      	b.n	800aa88 <memmove+0x24>

0800aa98 <memcpy>:
 800aa98:	440a      	add	r2, r1
 800aa9a:	4291      	cmp	r1, r2
 800aa9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aaa0:	d100      	bne.n	800aaa4 <memcpy+0xc>
 800aaa2:	4770      	bx	lr
 800aaa4:	b510      	push	{r4, lr}
 800aaa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaae:	4291      	cmp	r1, r2
 800aab0:	d1f9      	bne.n	800aaa6 <memcpy+0xe>
 800aab2:	bd10      	pop	{r4, pc}

0800aab4 <_realloc_r>:
 800aab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab8:	4680      	mov	r8, r0
 800aaba:	4614      	mov	r4, r2
 800aabc:	460e      	mov	r6, r1
 800aabe:	b921      	cbnz	r1, 800aaca <_realloc_r+0x16>
 800aac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aac4:	4611      	mov	r1, r2
 800aac6:	f7ff bb95 	b.w	800a1f4 <_malloc_r>
 800aaca:	b92a      	cbnz	r2, 800aad8 <_realloc_r+0x24>
 800aacc:	f7ff fc96 	bl	800a3fc <_free_r>
 800aad0:	4625      	mov	r5, r4
 800aad2:	4628      	mov	r0, r5
 800aad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad8:	f000 f81b 	bl	800ab12 <_malloc_usable_size_r>
 800aadc:	4284      	cmp	r4, r0
 800aade:	4607      	mov	r7, r0
 800aae0:	d802      	bhi.n	800aae8 <_realloc_r+0x34>
 800aae2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aae6:	d812      	bhi.n	800ab0e <_realloc_r+0x5a>
 800aae8:	4621      	mov	r1, r4
 800aaea:	4640      	mov	r0, r8
 800aaec:	f7ff fb82 	bl	800a1f4 <_malloc_r>
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d0ed      	beq.n	800aad2 <_realloc_r+0x1e>
 800aaf6:	42bc      	cmp	r4, r7
 800aaf8:	4622      	mov	r2, r4
 800aafa:	4631      	mov	r1, r6
 800aafc:	bf28      	it	cs
 800aafe:	463a      	movcs	r2, r7
 800ab00:	f7ff ffca 	bl	800aa98 <memcpy>
 800ab04:	4631      	mov	r1, r6
 800ab06:	4640      	mov	r0, r8
 800ab08:	f7ff fc78 	bl	800a3fc <_free_r>
 800ab0c:	e7e1      	b.n	800aad2 <_realloc_r+0x1e>
 800ab0e:	4635      	mov	r5, r6
 800ab10:	e7df      	b.n	800aad2 <_realloc_r+0x1e>

0800ab12 <_malloc_usable_size_r>:
 800ab12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab16:	1f18      	subs	r0, r3, #4
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	bfbc      	itt	lt
 800ab1c:	580b      	ldrlt	r3, [r1, r0]
 800ab1e:	18c0      	addlt	r0, r0, r3
 800ab20:	4770      	bx	lr
	...

0800ab24 <expf>:
 800ab24:	b508      	push	{r3, lr}
 800ab26:	ed2d 8b02 	vpush	{d8}
 800ab2a:	eef0 8a40 	vmov.f32	s17, s0
 800ab2e:	f000 f87f 	bl	800ac30 <__ieee754_expf>
 800ab32:	eeb0 8a40 	vmov.f32	s16, s0
 800ab36:	eeb0 0a68 	vmov.f32	s0, s17
 800ab3a:	f000 f829 	bl	800ab90 <finitef>
 800ab3e:	b160      	cbz	r0, 800ab5a <expf+0x36>
 800ab40:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ab80 <expf+0x5c>
 800ab44:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ab48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab4c:	dd0a      	ble.n	800ab64 <expf+0x40>
 800ab4e:	f7ff fc29 	bl	800a3a4 <__errno>
 800ab52:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800ab84 <expf+0x60>
 800ab56:	2322      	movs	r3, #34	; 0x22
 800ab58:	6003      	str	r3, [r0, #0]
 800ab5a:	eeb0 0a48 	vmov.f32	s0, s16
 800ab5e:	ecbd 8b02 	vpop	{d8}
 800ab62:	bd08      	pop	{r3, pc}
 800ab64:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ab88 <expf+0x64>
 800ab68:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ab6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab70:	d5f3      	bpl.n	800ab5a <expf+0x36>
 800ab72:	f7ff fc17 	bl	800a3a4 <__errno>
 800ab76:	2322      	movs	r3, #34	; 0x22
 800ab78:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800ab8c <expf+0x68>
 800ab7c:	6003      	str	r3, [r0, #0]
 800ab7e:	e7ec      	b.n	800ab5a <expf+0x36>
 800ab80:	42b17217 	.word	0x42b17217
 800ab84:	7f800000 	.word	0x7f800000
 800ab88:	c2cff1b5 	.word	0xc2cff1b5
 800ab8c:	00000000 	.word	0x00000000

0800ab90 <finitef>:
 800ab90:	b082      	sub	sp, #8
 800ab92:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ab96:	9801      	ldr	r0, [sp, #4]
 800ab98:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ab9c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800aba0:	bfac      	ite	ge
 800aba2:	2000      	movge	r0, #0
 800aba4:	2001      	movlt	r0, #1
 800aba6:	b002      	add	sp, #8
 800aba8:	4770      	bx	lr
	...

0800abac <ceilf>:
 800abac:	ee10 3a10 	vmov	r3, s0
 800abb0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800abb4:	3a7f      	subs	r2, #127	; 0x7f
 800abb6:	2a16      	cmp	r2, #22
 800abb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800abbc:	dc2a      	bgt.n	800ac14 <ceilf+0x68>
 800abbe:	2a00      	cmp	r2, #0
 800abc0:	da11      	bge.n	800abe6 <ceilf+0x3a>
 800abc2:	eddf 7a19 	vldr	s15, [pc, #100]	; 800ac28 <ceilf+0x7c>
 800abc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800abca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800abce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd2:	dd05      	ble.n	800abe0 <ceilf+0x34>
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	db23      	blt.n	800ac20 <ceilf+0x74>
 800abd8:	2900      	cmp	r1, #0
 800abda:	bf18      	it	ne
 800abdc:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800abe0:	ee00 3a10 	vmov	s0, r3
 800abe4:	4770      	bx	lr
 800abe6:	4911      	ldr	r1, [pc, #68]	; (800ac2c <ceilf+0x80>)
 800abe8:	4111      	asrs	r1, r2
 800abea:	420b      	tst	r3, r1
 800abec:	d0fa      	beq.n	800abe4 <ceilf+0x38>
 800abee:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800ac28 <ceilf+0x7c>
 800abf2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800abf6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800abfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abfe:	ddef      	ble.n	800abe0 <ceilf+0x34>
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	bfc2      	ittt	gt
 800ac04:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800ac08:	fa40 f202 	asrgt.w	r2, r0, r2
 800ac0c:	189b      	addgt	r3, r3, r2
 800ac0e:	ea23 0301 	bic.w	r3, r3, r1
 800ac12:	e7e5      	b.n	800abe0 <ceilf+0x34>
 800ac14:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ac18:	d3e4      	bcc.n	800abe4 <ceilf+0x38>
 800ac1a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ac1e:	4770      	bx	lr
 800ac20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac24:	e7dc      	b.n	800abe0 <ceilf+0x34>
 800ac26:	bf00      	nop
 800ac28:	7149f2ca 	.word	0x7149f2ca
 800ac2c:	007fffff 	.word	0x007fffff

0800ac30 <__ieee754_expf>:
 800ac30:	ee10 2a10 	vmov	r2, s0
 800ac34:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800ac38:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ac3c:	d902      	bls.n	800ac44 <__ieee754_expf+0x14>
 800ac3e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ac42:	4770      	bx	lr
 800ac44:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800ac48:	d106      	bne.n	800ac58 <__ieee754_expf+0x28>
 800ac4a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800ad84 <__ieee754_expf+0x154>
 800ac4e:	2900      	cmp	r1, #0
 800ac50:	bf18      	it	ne
 800ac52:	eeb0 0a67 	vmovne.f32	s0, s15
 800ac56:	4770      	bx	lr
 800ac58:	484b      	ldr	r0, [pc, #300]	; (800ad88 <__ieee754_expf+0x158>)
 800ac5a:	4282      	cmp	r2, r0
 800ac5c:	dd02      	ble.n	800ac64 <__ieee754_expf+0x34>
 800ac5e:	2000      	movs	r0, #0
 800ac60:	f000 b8d0 	b.w	800ae04 <__math_oflowf>
 800ac64:	2a00      	cmp	r2, #0
 800ac66:	da05      	bge.n	800ac74 <__ieee754_expf+0x44>
 800ac68:	4a48      	ldr	r2, [pc, #288]	; (800ad8c <__ieee754_expf+0x15c>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d902      	bls.n	800ac74 <__ieee754_expf+0x44>
 800ac6e:	2000      	movs	r0, #0
 800ac70:	f000 b8c2 	b.w	800adf8 <__math_uflowf>
 800ac74:	4a46      	ldr	r2, [pc, #280]	; (800ad90 <__ieee754_expf+0x160>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ac7c:	d952      	bls.n	800ad24 <__ieee754_expf+0xf4>
 800ac7e:	4a45      	ldr	r2, [pc, #276]	; (800ad94 <__ieee754_expf+0x164>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800ac86:	d834      	bhi.n	800acf2 <__ieee754_expf+0xc2>
 800ac88:	4b43      	ldr	r3, [pc, #268]	; (800ad98 <__ieee754_expf+0x168>)
 800ac8a:	4413      	add	r3, r2
 800ac8c:	ed93 7a00 	vldr	s14, [r3]
 800ac90:	4b42      	ldr	r3, [pc, #264]	; (800ad9c <__ieee754_expf+0x16c>)
 800ac92:	4413      	add	r3, r2
 800ac94:	ee30 7a47 	vsub.f32	s14, s0, s14
 800ac98:	f1c1 0201 	rsb	r2, r1, #1
 800ac9c:	edd3 7a00 	vldr	s15, [r3]
 800aca0:	1a52      	subs	r2, r2, r1
 800aca2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800aca6:	ee20 6a00 	vmul.f32	s12, s0, s0
 800acaa:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800ada0 <__ieee754_expf+0x170>
 800acae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ada4 <__ieee754_expf+0x174>
 800acb2:	eee6 6a05 	vfma.f32	s13, s12, s10
 800acb6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800ada8 <__ieee754_expf+0x178>
 800acba:	eea6 5a86 	vfma.f32	s10, s13, s12
 800acbe:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800adac <__ieee754_expf+0x17c>
 800acc2:	eee5 6a06 	vfma.f32	s13, s10, s12
 800acc6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800adb0 <__ieee754_expf+0x180>
 800acca:	eea6 5a86 	vfma.f32	s10, s13, s12
 800acce:	eef0 6a40 	vmov.f32	s13, s0
 800acd2:	eee5 6a46 	vfms.f32	s13, s10, s12
 800acd6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800acda:	ee20 5a26 	vmul.f32	s10, s0, s13
 800acde:	bb92      	cbnz	r2, 800ad46 <__ieee754_expf+0x116>
 800ace0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800ace4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800ace8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800acec:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800acf0:	4770      	bx	lr
 800acf2:	4b30      	ldr	r3, [pc, #192]	; (800adb4 <__ieee754_expf+0x184>)
 800acf4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800adb8 <__ieee754_expf+0x188>
 800acf8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800adbc <__ieee754_expf+0x18c>
 800acfc:	4413      	add	r3, r2
 800acfe:	edd3 7a00 	vldr	s15, [r3]
 800ad02:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ad06:	eeb0 7a40 	vmov.f32	s14, s0
 800ad0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad0e:	ee17 2a90 	vmov	r2, s15
 800ad12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad16:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800ad1a:	eddf 6a29 	vldr	s13, [pc, #164]	; 800adc0 <__ieee754_expf+0x190>
 800ad1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ad22:	e7be      	b.n	800aca2 <__ieee754_expf+0x72>
 800ad24:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800ad28:	d20b      	bcs.n	800ad42 <__ieee754_expf+0x112>
 800ad2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800adc4 <__ieee754_expf+0x194>
 800ad2e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800ad32:	eef4 6ae5 	vcmpe.f32	s13, s11
 800ad36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad3a:	dd02      	ble.n	800ad42 <__ieee754_expf+0x112>
 800ad3c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800ad40:	4770      	bx	lr
 800ad42:	2200      	movs	r2, #0
 800ad44:	e7af      	b.n	800aca6 <__ieee754_expf+0x76>
 800ad46:	ee36 6a66 	vsub.f32	s12, s12, s13
 800ad4a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800ad4e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800ad52:	bfb8      	it	lt
 800ad54:	3264      	addlt	r2, #100	; 0x64
 800ad56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad5e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800ad62:	ee17 3a90 	vmov	r3, s15
 800ad66:	bfab      	itete	ge
 800ad68:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800ad6c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800ad70:	ee00 3a10 	vmovge	s0, r3
 800ad74:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800adc8 <__ieee754_expf+0x198>
 800ad78:	bfbc      	itt	lt
 800ad7a:	ee00 3a10 	vmovlt	s0, r3
 800ad7e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800ad82:	4770      	bx	lr
 800ad84:	00000000 	.word	0x00000000
 800ad88:	42b17217 	.word	0x42b17217
 800ad8c:	42cff1b5 	.word	0x42cff1b5
 800ad90:	3eb17218 	.word	0x3eb17218
 800ad94:	3f851591 	.word	0x3f851591
 800ad98:	0800aedc 	.word	0x0800aedc
 800ad9c:	0800aee4 	.word	0x0800aee4
 800ada0:	3331bb4c 	.word	0x3331bb4c
 800ada4:	b5ddea0e 	.word	0xb5ddea0e
 800ada8:	388ab355 	.word	0x388ab355
 800adac:	bb360b61 	.word	0xbb360b61
 800adb0:	3e2aaaab 	.word	0x3e2aaaab
 800adb4:	0800aed4 	.word	0x0800aed4
 800adb8:	3fb8aa3b 	.word	0x3fb8aa3b
 800adbc:	3f317180 	.word	0x3f317180
 800adc0:	3717f7d1 	.word	0x3717f7d1
 800adc4:	7149f2ca 	.word	0x7149f2ca
 800adc8:	0d800000 	.word	0x0d800000

0800adcc <with_errnof>:
 800adcc:	b513      	push	{r0, r1, r4, lr}
 800adce:	4604      	mov	r4, r0
 800add0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800add4:	f7ff fae6 	bl	800a3a4 <__errno>
 800add8:	ed9d 0a01 	vldr	s0, [sp, #4]
 800addc:	6004      	str	r4, [r0, #0]
 800adde:	b002      	add	sp, #8
 800ade0:	bd10      	pop	{r4, pc}

0800ade2 <xflowf>:
 800ade2:	b130      	cbz	r0, 800adf2 <xflowf+0x10>
 800ade4:	eef1 7a40 	vneg.f32	s15, s0
 800ade8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800adec:	2022      	movs	r0, #34	; 0x22
 800adee:	f7ff bfed 	b.w	800adcc <with_errnof>
 800adf2:	eef0 7a40 	vmov.f32	s15, s0
 800adf6:	e7f7      	b.n	800ade8 <xflowf+0x6>

0800adf8 <__math_uflowf>:
 800adf8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ae00 <__math_uflowf+0x8>
 800adfc:	f7ff bff1 	b.w	800ade2 <xflowf>
 800ae00:	10000000 	.word	0x10000000

0800ae04 <__math_oflowf>:
 800ae04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ae0c <__math_oflowf+0x8>
 800ae08:	f7ff bfeb 	b.w	800ade2 <xflowf>
 800ae0c:	70000000 	.word	0x70000000

0800ae10 <_init>:
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae12:	bf00      	nop
 800ae14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae16:	bc08      	pop	{r3}
 800ae18:	469e      	mov	lr, r3
 800ae1a:	4770      	bx	lr

0800ae1c <_fini>:
 800ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1e:	bf00      	nop
 800ae20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae22:	bc08      	pop	{r3}
 800ae24:	469e      	mov	lr, r3
 800ae26:	4770      	bx	lr
